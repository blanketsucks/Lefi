{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Lefi A discord API wrapper focused on clean code, and usability Features Asynchronous - Almost everything is async except for few unavoidable ones. Object oriented - Allows for easy usage Get started here","title":"Home"},{"location":"#lefi","text":"A discord API wrapper focused on clean code, and usability","title":"Lefi"},{"location":"#features","text":"Asynchronous - Almost everything is async except for few unavoidable ones. Object oriented - Allows for easy usage Get started here","title":"Features"},{"location":"getting-started/","text":"Getting started Table of contents Installation Basic usage Installing To install the wrapper you can use pip , poetry or any other manager you use. Note: It is recommended to use poetry or any other venv when downloading Poetry poetry add git+https://github.com/an-dyy/Lefi.git --no-dev Note: If you plan on contributing, omit the --no-dev flag. Pip pip install git+https://github.com/an-dyy/Lefi.git Examples import os import asyncio import lefi async def main () -> None : token = os . getenv ( \"discord_token\" ) # NOTE: I'm on linux so I can just export, windows might need a `.env` client = lefi . Client ( token ) # type: ignore @client . once ( \"ready\" ) async def on_ready ( client_user : lefi . User ) -> None : print ( f \"LOGGED IN AS { client_user . id } \" ) @client . on ( \"message_create\" ) async def on_message_create ( message : lefi . Message ) -> None : print ( message ) await client . start () asyncio . run ( main ())","title":"Getting-Started"},{"location":"getting-started/#getting-started","text":"","title":"Getting started"},{"location":"getting-started/#table-of-contents","text":"Installation Basic usage","title":"Table of contents"},{"location":"getting-started/#installing","text":"To install the wrapper you can use pip , poetry or any other manager you use. Note: It is recommended to use poetry or any other venv when downloading Poetry poetry add git+https://github.com/an-dyy/Lefi.git --no-dev Note: If you plan on contributing, omit the --no-dev flag. Pip pip install git+https://github.com/an-dyy/Lefi.git","title":"Installing"},{"location":"getting-started/#examples","text":"import os import asyncio import lefi async def main () -> None : token = os . getenv ( \"discord_token\" ) # NOTE: I'm on linux so I can just export, windows might need a `.env` client = lefi . Client ( token ) # type: ignore @client . once ( \"ready\" ) async def on_ready ( client_user : lefi . User ) -> None : print ( f \"LOGGED IN AS { client_user . id } \" ) @client . on ( \"message_create\" ) async def on_message_create ( message : lefi . Message ) -> None : print ( message ) await client . start () asyncio . run ( main ())","title":"Examples"},{"location":"API-Reference/actionrow/","text":"__components__ : List [ lefi . objects . components . Component ] special Represents a message action row. Attributes: Name Type Description components List[Component] A list of components connected to the action row. callbacks List[Callable] A list of callbacks for each child component of the row. __init__ ( self , components = None ) special Parameters: Name Type Description Default components List[Component] The list of components connected to the action row. None Source code in lefi/__init__.py def __init__ ( self , components : Optional [ List [ Component ]] = None ) -> None : \"\"\" Parameters: components (List[Component]): The list of components connected to the action row. \"\"\" if components is not None : self . __components__ . extend ( components ) add ( self , component ) Add a component to the action row. Parameters: Name Type Description Default component Component The component to add. required Source code in lefi/__init__.py def add ( self , component : Component ) -> None : \"\"\" Add a component to the action row. Parameters: component (Component): The component to add. \"\"\" self . components . append ( component )","title":"ActionRow"},{"location":"API-Reference/actionrow/#lefi.components.ActionRow.__components__","text":"Represents a message action row. Attributes: Name Type Description components List[Component] A list of components connected to the action row. callbacks List[Callable] A list of callbacks for each child component of the row.","title":"__components__"},{"location":"API-Reference/actionrow/#lefi.components.ActionRow.__init__","text":"Parameters: Name Type Description Default components List[Component] The list of components connected to the action row. None Source code in lefi/__init__.py def __init__ ( self , components : Optional [ List [ Component ]] = None ) -> None : \"\"\" Parameters: components (List[Component]): The list of components connected to the action row. \"\"\" if components is not None : self . __components__ . extend ( components )","title":"__init__()"},{"location":"API-Reference/actionrow/#lefi.components.ActionRow.add","text":"Add a component to the action row. Parameters: Name Type Description Default component Component The component to add. required Source code in lefi/__init__.py def add ( self , component : Component ) -> None : \"\"\" Add a component to the action row. Parameters: component (Component): The component to add. \"\"\" self . components . append ( component )","title":"add()"},{"location":"API-Reference/banentry/","text":"BanEntry(user, reason) __new__ ( _cls , user , reason ) special staticmethod Create new instance of BanEntry(user, reason) __repr__ ( self ) special Return a nicely formatted representation string Source code in lefi/__init__.py def __repr__ ( self ): 'Return a nicely formatted representation string' return self . __class__ . __name__ + repr_fmt % self __getnewargs__ ( self ) special Return self as a plain tuple. Used by copy and pickle. Source code in lefi/__init__.py def __getnewargs__ ( self ): 'Return self as a plain tuple. Used by copy and pickle.' return _tuple ( self )","title":"BanEntry"},{"location":"API-Reference/banentry/#lefi.guild.BanEntry.__new__","text":"Create new instance of BanEntry(user, reason)","title":"__new__()"},{"location":"API-Reference/banentry/#lefi.guild.BanEntry.__repr__","text":"Return a nicely formatted representation string Source code in lefi/__init__.py def __repr__ ( self ): 'Return a nicely formatted representation string' return self . __class__ . __name__ + repr_fmt % self","title":"__repr__()"},{"location":"API-Reference/banentry/#lefi.guild.BanEntry.__getnewargs__","text":"Return self as a plain tuple. Used by copy and pickle. Source code in lefi/__init__.py def __getnewargs__ ( self ): 'Return self as a plain tuple. Used by copy and pickle.' return _tuple ( self )","title":"__getnewargs__()"},{"location":"API-Reference/button/","text":"Represents a button component. Attributes: Name Type Description style ComponentStyle The style of the button. label str The button's label. custom_id str The buttons custom_id. disabled bool Whether the button is disabled or not. emoji Optional[str] The emoji to use for the button. url Optional[str] The url of the button callback Coroutine The coroutine to run after the button is pressed. __init__ ( self , style , label , ** kwargs ) special Parameters: Name Type Description Default style ComponentStyle The style to use. required label str The label to use. required callback Coroutine The callback to use. required Source code in lefi/__init__.py def __init__ ( self , style : ButtonStyle , label : str , ** kwargs ) -> None : \"\"\" Parameters: style (ComponentStyle): The style to use. label (str): The label to use. callback (Coroutine): The callback to use. \"\"\" self . style : ButtonStyle = style self . label : str = label self . custom_id : str = kwargs . get ( \"custom_id\" , uuid . uuid4 () . hex ) self . disabled : bool = kwargs . get ( \"disabled\" , False ) self . emoji : Optional [ Emoji ] = kwargs . get ( \"emoji\" ) self . url : Optional [ str ] = kwargs . get ( \"url\" )","title":"Button"},{"location":"API-Reference/button/#lefi.components.Button.__init__","text":"Parameters: Name Type Description Default style ComponentStyle The style to use. required label str The label to use. required callback Coroutine The callback to use. required Source code in lefi/__init__.py def __init__ ( self , style : ButtonStyle , label : str , ** kwargs ) -> None : \"\"\" Parameters: style (ComponentStyle): The style to use. label (str): The label to use. callback (Coroutine): The callback to use. \"\"\" self . style : ButtonStyle = style self . label : str = label self . custom_id : str = kwargs . get ( \"custom_id\" , uuid . uuid4 () . hex ) self . disabled : bool = kwargs . get ( \"disabled\" , False ) self . emoji : Optional [ Emoji ] = kwargs . get ( \"emoji\" ) self . url : Optional [ str ] = kwargs . get ( \"url\" )","title":"__init__()"},{"location":"API-Reference/cache/","text":"A class which acts as a cache for objects. Attributes: Name Type Description maxlen Optional[int] The max amount the cache can hold. __init__ ( self , maxlen = None , * args , ** kwargs ) special Parameters: Name Type Description Default maxlen Optional[int] The max amount the cache can hold. None Source code in lefi/state.py def __init__ ( self , maxlen : Optional [ int ] = None , * args , ** kwargs ): \"\"\" Parameters: maxlen (Optional[int]): The max amount the cache can hold. \"\"\" super () . __init__ ( * args , ** kwargs ) self . maxlen : Optional [ int ] = maxlen self . _max : int = 0","title":"Cache"},{"location":"API-Reference/cache/#lefi.state.Cache.__init__","text":"Parameters: Name Type Description Default maxlen Optional[int] The max amount the cache can hold. None Source code in lefi/state.py def __init__ ( self , maxlen : Optional [ int ] = None , * args , ** kwargs ): \"\"\" Parameters: maxlen (Optional[int]): The max amount the cache can hold. \"\"\" super () . __init__ ( * args , ** kwargs ) self . maxlen : Optional [ int ] = maxlen self . _max : int = 0","title":"__init__()"},{"location":"API-Reference/channel/","text":"Channel A class representing a discord channel. guild : Guild property readonly A lefi.Guild instance which the channel belongs to. id : int property readonly The channels id. name : str property readonly The channels name. type : ChannelType property readonly The type of the channel. nsfw : bool property readonly Whether or not the channel is marked as NSFW. position : int property readonly The position of the channel. overwrites : Dict [ Union [ Member , Role ], Overwrite ] property readonly A list of lefi.Overwrite s for the channel. __init__ ( self , state , data , guild ) special Creates a new Channel from the given data. Parameters: Name Type Description Default state lefi.State The State of the client. required data dict The data to create the channel from. required Source code in lefi/objects/channel.py def __init__ ( self , state : State , data : Dict , guild : Guild ) -> None : \"\"\" Creates a new Channel from the given data. Parameters: state (lefi.State): The [State](./state.md) of the client. data (dict): The data to create the channel from. \"\"\" self . _state = state self . _data = data self . _guild = guild self . _overwrites : Dict [ Union [ Member , Role ], Overwrite ] = {} delete ( self ) async Deletes the channel. Source code in lefi/objects/channel.py async def delete ( self ) -> None : \"\"\" Deletes the channel. \"\"\" await self . _state . http . delete_channel ( self . id ) edit_permissions ( self , target , ** permissions ) async Edits the permissions for the given target. Parameters: Name Type Description Default target lefi.Role or lefi.Member The target to edit the permissions for. required **permissions bool The permissions to set. {} Source code in lefi/objects/channel.py async def edit_permissions ( self , target : Union [ Role , Member ], ** permissions : bool ) -> None : \"\"\" Edits the permissions for the given target. Parameters: target (lefi.Role or lefi.Member): The target to edit the permissions for. **permissions (bool): The permissions to set. \"\"\" if not isinstance ( target , ( Role , Member )): raise TypeError ( \"target must be either a Role or Member\" ) perms = Permissions ( ** permissions ) allow , deny = perms . to_overwrite_pair () type = 0 if isinstance ( target , Role ) else 1 await self . _state . http . edit_channel_permissions ( channel_id = self . id , overwrite_id = target . id , allow = allow . value , deny = deny . value , type = type , ) delete_permission ( self , target ) async Deletes the permission for the given target. Parameters: Name Type Description Default target lefi.Member or lefi.Role The target to delete the permission for. required Source code in lefi/objects/channel.py async def delete_permission ( self , target : Union [ Member , Role ]) -> None : \"\"\" Deletes the permission for the given target. Parameters: target (lefi.Member or lefi.Role): The target to delete the permission for. \"\"\" if not isinstance ( target , ( Member , Role )): raise TypeError ( \"target must be either a Member or Role\" ) await self . _state . http . delete_channel_permissions ( channel_id = self . id , overwrite_id = target . id , ) self . _overwrites . pop ( target , None ) overwrites_for ( self , target ) Returns the lefi.Overwrite for the given target. Source code in lefi/objects/channel.py def overwrites_for ( self , target : Union [ Member , Role ]) -> Optional [ Overwrite ]: \"\"\" Returns the [lefi.Overwrite](./overwrite.md) for the given target. \"\"\" return self . _overwrites . get ( target ) permissions_for ( self , target ) Returns the permissions for the given target. Parameters: Name Type Description Default target lefi.Member or lefi.Role The target to get the permissions for. required Returns: Type Description Permissions The Permission s for the target. Source code in lefi/objects/channel.py def permissions_for ( self , target : Union [ Member , Role ]) -> Permissions : \"\"\" Returns the permissions for the given target. Parameters: target (lefi.Member or lefi.Role): The target to get the permissions for. Returns: The [Permission]()s for the target. \"\"\" base = target . permissions if base & Permissions . administrator : return Permissions . all () everyone = self . overwrites_for ( self . guild . default_role ) if everyone is not None : base |= everyone . allow base &= ~ everyone . deny allow = Permissions ( 0 ) deny = Permissions ( 0 ) if isinstance ( target , Member ): for role in target . roles : overwrite = self . overwrites_for ( role ) if overwrite is not None : allow |= overwrite . allow deny |= overwrite . deny base |= allow base &= ~ deny member_overwrite = self . overwrites_for ( target ) if member_overwrite : base |= member_overwrite . allow base &= ~ member_overwrite . deny return base return base DMChannel ( Messageable ) A class that represents a Users DMChannel. Attributes: Name Type Description guild lefi.Guild The Guild the channel is in. id : int property readonly The ID of the DMChannel. last_message : Optional [ Message ] property readonly The last lefi.Message instance sent in the channel. type : int property readonly The type of the channel. receipients : List [ User ] property readonly A list of lefi.User instances which are the recipients. __init__ ( self , state , data ) special Creates a new DMChannel from the given data. Parameters: Name Type Description Default state lefi.State The State of the client. required data dict The data to create the channel from. required Source code in lefi/objects/channel.py def __init__ ( self , state : State , data : Dict [ str , Any ]) -> None : \"\"\" Creates a new DMChannel from the given data. Parameters: state (lefi.State): The [State](./state.md) of the client. data (dict): The data to create the channel from. \"\"\" self . _state = state self . _data = data self . guild = None TextChannel ( Channel , BaseTextChannel ) A class that represents a TextChannel. topic : str property readonly The topic of the channel. last_message : Optional [ Message ] property readonly The last lefi.Message instance sent in the channel. rate_limit_per_user : int property readonly The amount of time needed before another message can be sent in the channel. default_auto_archive_duration : int property readonly The amount of time it takes to archive a thread inside of the channel. parent_id : Optional [ int ] property readonly The ID of the parent channel. parent : Optional [ CategoryChannel ] property readonly The channels parent. category : Optional [ CategoryChannel ] property readonly An alias of parent __init__ ( self , state , data , guild ) special Creates a new TextChannel from the given data. Parameters: Name Type Description Default state lefi.State The State of the client. required data dict The data to create the channel from. required Source code in lefi/objects/channel.py def __init__ ( self , state : State , data : Dict , guild : Guild ) -> None : \"\"\" Creates a new TextChannel from the given data. Parameters: state (lefi.State): The [State](./state.md) of the client. data (dict): The data to create the channel from. \"\"\" super () . __init__ ( state , data , guild ) edit ( self , * , name = None , type = None , position = None , topic = None , nsfw = None , slowmode = None , overwrites ) async Edits the channel. Parameters: Name Type Description Default **kwargs Any The options to pass to required Returns: Type Description TextChannel The lefi.TextChannel instance after editting. Source code in lefi/objects/channel.py async def edit ( self , * , name : Optional [ str ] = None , type : Optional [ ChannelType ] = None , position : Optional [ int ] = None , topic : Optional [ str ] = None , nsfw : Optional [ bool ] = None , slowmode : Optional [ int ] = None , overwrites : Optional [ Dict [ Union [ Member , Role ], Permissions ]], ) -> TextChannel : \"\"\" Edits the channel. Parameters: **kwargs (Any): The options to pass to [lefi.HTTPClient.edit_text_channel](./http.md#lefi.http.HTTPClient.edit_text_channel). Returns: The lefi.TextChannel instance after editting. \"\"\" permission_overwrites = self . guild . _make_permission_overwrites ( overwrites ) data = await self . _state . http . edit_text_channel ( channel_id = self . id , name = name , type = type . value if type else None , position = position , topic = topic , nsfw = nsfw , rate_limit_per_user = slowmode , permission_overwrites = permission_overwrites , ) self . _data = data return self create_invite ( self , * , max_age = 86400 , max_uses = 0 , temporary = False , unique = False ) async Creates an invite for the channel. Parameters: Name Type Description Default max_age int The max age of the invite. 86400 max_uses int The max uses of the invite. 0 temporary bool Whether or not the invite is temporary. False unique bool Whether or not the invite is unique. False Returns: Type Description Invite The lefi.Invite instance. Source code in lefi/objects/channel.py async def create_invite ( self , * , max_age : int = 86400 , max_uses : int = 0 , temporary : bool = False , unique : bool = False , ) -> Invite : \"\"\" Creates an invite for the channel. Parameters: max_age (int): The max age of the invite. max_uses (int): The max uses of the invite. temporary (bool): Whether or not the invite is temporary. unique (bool): Whether or not the invite is unique. Returns: The [lefi.Invite](./invite.md) instance. \"\"\" data = await self . _state . http . create_channel_invite ( channel_id = self . id , max_age = max_age , max_uses = max_uses , temporary = temporary , unique = unique , ) return Invite ( self . _state , data ) trigger_typing ( self ) async Triggers typing in this text channel. Source code in lefi/objects/channel.py async def trigger_typing ( self ) -> None : \"\"\" Triggers typing in this text channel. \"\"\" await self . _state . http . trigger_typing ( channel_id = self . id ) create_thread ( self , * , name , auto_archive_duration = None , type = None , invitable = None ) async Creates a thread in this text channel. Parameters: Name Type Description Default name str The name of the thread. required auto_archive_duration int The duration of the thread. None type lefi.ChannelType The type of the thread. None invitable bool Whether or not the thread is invitable. None Returns: Type Description Thread The lefi.Thread instance. Source code in lefi/objects/channel.py async def create_thread ( self , * , name : str , auto_archive_duration : Optional [ int ] = None , type : Optional [ ChannelType ] = None , invitable : Optional [ bool ] = None , ) -> Thread : \"\"\" Creates a thread in this text channel. Parameters: name (str): The name of the thread. auto_archive_duration (int): The duration of the thread. type (lefi.ChannelType): The type of the thread. invitable (bool): Whether or not the thread is invitable. Returns: The [lefi.Thread](./thread.md) instance. \"\"\" if auto_archive_duration is not None : if auto_archive_duration not in ( 60 , 1440 , 4320 , 10080 ): raise ValueError ( \"auto_archive_duration must be 60, 1440, 4320 or 10080\" ) if not type : type = ChannelType . PRIVATE_THREAD data = await self . _state . http . start_thread_without_message ( channel_id = self . id , name = name , auto_archive_duration = auto_archive_duration , type = type . value , invitable = invitable , ) return Thread ( self . _state , self . guild , data ) fetch_archived_threads ( self , * , public = True , before = None , limit = None ) async Fetches archived threads in this text channel. Parameters: Name Type Description Default public bool Whether or not to fetch public threads. True before int The timestamp to fetch threads before. None limit int The limit of the messages to fetch. None Returns: Type Description List[Thread] A list of lefi.Thread instances. Source code in lefi/objects/channel.py async def fetch_archived_threads ( self , * , public : bool = True , before : Optional [ int ] = None , limit : Optional [ int ] = None , ) -> List [ Thread ]: \"\"\" Fetches archived threads in this text channel. Parameters: public (bool): Whether or not to fetch public threads. before (int): The timestamp to fetch threads before. limit (int): The limit of the messages to fetch. Returns: A list of [lefi.Thread](./thread.md) instances. \"\"\" if public : data = await self . _state . http . list_public_archived_threads ( channel_id = self . id , before = before , limit = limit , ) else : data = await self . _state . http . list_private_archived_threads ( channel_id = self . id , before = before , limit = limit ) return self . guild . _create_threads ( data ) fetch_joined_private_archived_threads ( self ) async Fetches joined private archived threads in this text channel. Returns: Type Description List[Thread] A list of lefi.Thread instances. Source code in lefi/objects/channel.py async def fetch_joined_private_archived_threads ( self ) -> List [ Thread ]: \"\"\" Fetches joined private archived threads in this text channel. Returns: A list of [lefi.Thread](./thread.md) instances. \"\"\" data = await self . _state . http . list_private_archived_threads ( channel_id = self . id ) return self . guild . _create_threads ( data ) VoiceChannel ( Channel ) Represents a VoiceChannel. user_limit : int property readonly The user limit of the voice channel. bitrate : int property readonly The bitrate of the voice channel. rtc_region : Optional [ str ] property readonly THe rtc region of the voice channel. parent_id : Optional [ int ] property readonly The ID of the parent channel. parent : Optional [ CategoryChannel ] property readonly The channels parent. category : Optional [ CategoryChannel ] property readonly An alias of parent members : List [ Member ] cached property writable The members in the voice channel. __init__ ( self , state , data , guild ) special Creates a new VoiceChannel from the given data. Parameters: Name Type Description Default state lefi.State The State of the client. required data dict The data to create the channel from. required guild lefi.Guild The Guild the channel belongs to. required Source code in lefi/objects/channel.py def __init__ ( self , state : State , data : Dict , guild : Guild ) -> None : \"\"\" Creates a new VoiceChannel from the given data. Parameters: state (lefi.State): The [State](./state.md) of the client. data (dict): The data to create the channel from. guild (lefi.Guild): The [Guild](./guild.md) the channel belongs to. \"\"\" super () . __init__ ( state , data , guild ) create_invite ( self , * , max_age = 86400 , max_uses = 0 , temporary = False , unique = False , target_type = None , target_user = None , target_application_id = None ) async Creates an invite for the channel. Parameters: Name Type Description Default max_age int The max age of the invite. 86400 max_uses int The max uses of the invite. 0 temporary bool Whether or not the invite is temporary. False unique bool Whether or not the invite is unique. False target_type Optional[lefi.InviteTargetType] The target type of the invite. None target_user Optional[lefi.User] The target user of the invite. None target_application_id Optional[int] The target application ID of the invite. None Returns: Type Description Invite The lefi.Invite instance. Source code in lefi/objects/channel.py async def create_invite ( self , * , max_age : int = 86400 , max_uses : int = 0 , temporary : bool = False , unique : bool = False , target_type : Optional [ InviteTargetType ] = None , target_user : Optional [ User ] = None , target_application_id : Optional [ int ] = None , ) -> Invite : \"\"\" Creates an invite for the channel. Parameters: max_age (int): The max age of the invite. max_uses (int): The max uses of the invite. temporary (bool): Whether or not the invite is temporary. unique (bool): Whether or not the invite is unique. target_type (Optional[lefi.InviteTargetType]): The target type of the invite. target_user (Optional[lefi.User]): The target user of the invite. target_application_id (Optional[int]): The target application ID of the invite. Returns: The [lefi.Invite](./invite.md) instance. \"\"\" data = await self . _state . http . create_channel_invite ( channel_id = self . id , max_age = max_age , max_uses = max_uses , temporary = temporary , unique = unique , target_type = target_type , target_user_id = target_user . id if target_user is not None else None , target_application_id = target_application_id , ) return Invite ( self . _state , data ) edit ( self , * , name = None , position = None , bitrate = None , user_limit = None , rtc_region = None , video_quality_mode = None , sync_permissions = None , overwrites ) async Edits the channel. Parameters: Name Type Description Default **kwargs Any The options to pass to required Returns: Type Description VoiceChannel The lefi.VoiceChannel instance after editting. Source code in lefi/objects/channel.py async def edit ( self , * , name : Optional [ str ] = None , position : Optional [ int ] = None , bitrate : Optional [ int ] = None , user_limit : Optional [ int ] = None , rtc_region : Optional [ str ] = None , video_quality_mode : Optional [ int ] = None , sync_permissions : Optional [ bool ] = None , overwrites : Optional [ Dict [ Union [ Member , Role ], Permissions ]], ) -> VoiceChannel : \"\"\" Edits the channel. Parameters: **kwargs (Any): The options to pass to [lefi.HTTPClient.edit_voice_channel](./http.md#lefi.http.HTTPClient.edit_voice_channel). Returns: The lefi.VoiceChannel instance after editting. \"\"\" permission_overwrites = self . guild . _make_permission_overwrites ( overwrites ) data = await self . _state . http . edit_voice_channel ( channel_id = self . id , name = name , position = position , bitrate = bitrate , user_limit = user_limit , rtc_region = rtc_region , video_quality_mode = video_quality_mode , sync_permissions = sync_permissions , permission_overwrites = permission_overwrites , ) self . _data = data return self connect ( self ) async Connects to this voice channel and returns the created voice client. Returns: Type Description VoiceClient The lefi.VoiceClient instance. Source code in lefi/objects/channel.py async def connect ( self ) -> VoiceClient : \"\"\" Connects to this voice channel and returns the created voice client. Returns: The [lefi.VoiceClient][] instance. \"\"\" if self . guild . voice_client : raise VoiceException ( \"Client Already connected to a voice channel.\" ) voice = VoiceClient ( self . _state , self ) self . _state . add_voice_client ( self . guild . id , voice ) await voice . connect () return voice disconnect ( self ) async Disconnects the voice client from the channel. Source code in lefi/objects/channel.py async def disconnect ( self ) -> None : \"\"\" Disconnects the voice client from the channel. \"\"\" voice = self . _state . get_voice_client ( self . guild . id ) if not voice : raise VoiceException ( \"Client not connected to a voice channel\" ) if voice . channel != self : raise VoiceException ( \"Client not connected to the voice channel\" ) if voice . is_connected (): await voice . disconnect () self . _state . remove_voice_client ( self . guild . id )","title":"Channel"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.Channel","text":"A class representing a discord channel.","title":"Channel"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.Channel.guild","text":"A lefi.Guild instance which the channel belongs to.","title":"guild"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.Channel.id","text":"The channels id.","title":"id"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.Channel.name","text":"The channels name.","title":"name"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.Channel.type","text":"The type of the channel.","title":"type"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.Channel.nsfw","text":"Whether or not the channel is marked as NSFW.","title":"nsfw"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.Channel.position","text":"The position of the channel.","title":"position"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.Channel.overwrites","text":"A list of lefi.Overwrite s for the channel.","title":"overwrites"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.Channel.__init__","text":"Creates a new Channel from the given data. Parameters: Name Type Description Default state lefi.State The State of the client. required data dict The data to create the channel from. required Source code in lefi/objects/channel.py def __init__ ( self , state : State , data : Dict , guild : Guild ) -> None : \"\"\" Creates a new Channel from the given data. Parameters: state (lefi.State): The [State](./state.md) of the client. data (dict): The data to create the channel from. \"\"\" self . _state = state self . _data = data self . _guild = guild self . _overwrites : Dict [ Union [ Member , Role ], Overwrite ] = {}","title":"__init__()"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.Channel.delete","text":"Deletes the channel. Source code in lefi/objects/channel.py async def delete ( self ) -> None : \"\"\" Deletes the channel. \"\"\" await self . _state . http . delete_channel ( self . id )","title":"delete()"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.Channel.edit_permissions","text":"Edits the permissions for the given target. Parameters: Name Type Description Default target lefi.Role or lefi.Member The target to edit the permissions for. required **permissions bool The permissions to set. {} Source code in lefi/objects/channel.py async def edit_permissions ( self , target : Union [ Role , Member ], ** permissions : bool ) -> None : \"\"\" Edits the permissions for the given target. Parameters: target (lefi.Role or lefi.Member): The target to edit the permissions for. **permissions (bool): The permissions to set. \"\"\" if not isinstance ( target , ( Role , Member )): raise TypeError ( \"target must be either a Role or Member\" ) perms = Permissions ( ** permissions ) allow , deny = perms . to_overwrite_pair () type = 0 if isinstance ( target , Role ) else 1 await self . _state . http . edit_channel_permissions ( channel_id = self . id , overwrite_id = target . id , allow = allow . value , deny = deny . value , type = type , )","title":"edit_permissions()"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.Channel.delete_permission","text":"Deletes the permission for the given target. Parameters: Name Type Description Default target lefi.Member or lefi.Role The target to delete the permission for. required Source code in lefi/objects/channel.py async def delete_permission ( self , target : Union [ Member , Role ]) -> None : \"\"\" Deletes the permission for the given target. Parameters: target (lefi.Member or lefi.Role): The target to delete the permission for. \"\"\" if not isinstance ( target , ( Member , Role )): raise TypeError ( \"target must be either a Member or Role\" ) await self . _state . http . delete_channel_permissions ( channel_id = self . id , overwrite_id = target . id , ) self . _overwrites . pop ( target , None )","title":"delete_permission()"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.Channel.overwrites_for","text":"Returns the lefi.Overwrite for the given target. Source code in lefi/objects/channel.py def overwrites_for ( self , target : Union [ Member , Role ]) -> Optional [ Overwrite ]: \"\"\" Returns the [lefi.Overwrite](./overwrite.md) for the given target. \"\"\" return self . _overwrites . get ( target )","title":"overwrites_for()"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.Channel.permissions_for","text":"Returns the permissions for the given target. Parameters: Name Type Description Default target lefi.Member or lefi.Role The target to get the permissions for. required Returns: Type Description Permissions The Permission s for the target. Source code in lefi/objects/channel.py def permissions_for ( self , target : Union [ Member , Role ]) -> Permissions : \"\"\" Returns the permissions for the given target. Parameters: target (lefi.Member or lefi.Role): The target to get the permissions for. Returns: The [Permission]()s for the target. \"\"\" base = target . permissions if base & Permissions . administrator : return Permissions . all () everyone = self . overwrites_for ( self . guild . default_role ) if everyone is not None : base |= everyone . allow base &= ~ everyone . deny allow = Permissions ( 0 ) deny = Permissions ( 0 ) if isinstance ( target , Member ): for role in target . roles : overwrite = self . overwrites_for ( role ) if overwrite is not None : allow |= overwrite . allow deny |= overwrite . deny base |= allow base &= ~ deny member_overwrite = self . overwrites_for ( target ) if member_overwrite : base |= member_overwrite . allow base &= ~ member_overwrite . deny return base return base","title":"permissions_for()"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.DMChannel","text":"A class that represents a Users DMChannel. Attributes: Name Type Description guild lefi.Guild The Guild the channel is in.","title":"DMChannel"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.DMChannel.id","text":"The ID of the DMChannel.","title":"id"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.DMChannel.last_message","text":"The last lefi.Message instance sent in the channel.","title":"last_message"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.DMChannel.type","text":"The type of the channel.","title":"type"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.DMChannel.receipients","text":"A list of lefi.User instances which are the recipients.","title":"receipients"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.DMChannel.__init__","text":"Creates a new DMChannel from the given data. Parameters: Name Type Description Default state lefi.State The State of the client. required data dict The data to create the channel from. required Source code in lefi/objects/channel.py def __init__ ( self , state : State , data : Dict [ str , Any ]) -> None : \"\"\" Creates a new DMChannel from the given data. Parameters: state (lefi.State): The [State](./state.md) of the client. data (dict): The data to create the channel from. \"\"\" self . _state = state self . _data = data self . guild = None","title":"__init__()"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.TextChannel","text":"A class that represents a TextChannel.","title":"TextChannel"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.TextChannel.topic","text":"The topic of the channel.","title":"topic"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.TextChannel.last_message","text":"The last lefi.Message instance sent in the channel.","title":"last_message"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.TextChannel.rate_limit_per_user","text":"The amount of time needed before another message can be sent in the channel.","title":"rate_limit_per_user"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.TextChannel.default_auto_archive_duration","text":"The amount of time it takes to archive a thread inside of the channel.","title":"default_auto_archive_duration"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.TextChannel.parent_id","text":"The ID of the parent channel.","title":"parent_id"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.TextChannel.parent","text":"The channels parent.","title":"parent"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.TextChannel.category","text":"An alias of parent","title":"category"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.TextChannel.__init__","text":"Creates a new TextChannel from the given data. Parameters: Name Type Description Default state lefi.State The State of the client. required data dict The data to create the channel from. required Source code in lefi/objects/channel.py def __init__ ( self , state : State , data : Dict , guild : Guild ) -> None : \"\"\" Creates a new TextChannel from the given data. Parameters: state (lefi.State): The [State](./state.md) of the client. data (dict): The data to create the channel from. \"\"\" super () . __init__ ( state , data , guild )","title":"__init__()"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.TextChannel.edit","text":"Edits the channel. Parameters: Name Type Description Default **kwargs Any The options to pass to required Returns: Type Description TextChannel The lefi.TextChannel instance after editting. Source code in lefi/objects/channel.py async def edit ( self , * , name : Optional [ str ] = None , type : Optional [ ChannelType ] = None , position : Optional [ int ] = None , topic : Optional [ str ] = None , nsfw : Optional [ bool ] = None , slowmode : Optional [ int ] = None , overwrites : Optional [ Dict [ Union [ Member , Role ], Permissions ]], ) -> TextChannel : \"\"\" Edits the channel. Parameters: **kwargs (Any): The options to pass to [lefi.HTTPClient.edit_text_channel](./http.md#lefi.http.HTTPClient.edit_text_channel). Returns: The lefi.TextChannel instance after editting. \"\"\" permission_overwrites = self . guild . _make_permission_overwrites ( overwrites ) data = await self . _state . http . edit_text_channel ( channel_id = self . id , name = name , type = type . value if type else None , position = position , topic = topic , nsfw = nsfw , rate_limit_per_user = slowmode , permission_overwrites = permission_overwrites , ) self . _data = data return self","title":"edit()"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.TextChannel.create_invite","text":"Creates an invite for the channel. Parameters: Name Type Description Default max_age int The max age of the invite. 86400 max_uses int The max uses of the invite. 0 temporary bool Whether or not the invite is temporary. False unique bool Whether or not the invite is unique. False Returns: Type Description Invite The lefi.Invite instance. Source code in lefi/objects/channel.py async def create_invite ( self , * , max_age : int = 86400 , max_uses : int = 0 , temporary : bool = False , unique : bool = False , ) -> Invite : \"\"\" Creates an invite for the channel. Parameters: max_age (int): The max age of the invite. max_uses (int): The max uses of the invite. temporary (bool): Whether or not the invite is temporary. unique (bool): Whether or not the invite is unique. Returns: The [lefi.Invite](./invite.md) instance. \"\"\" data = await self . _state . http . create_channel_invite ( channel_id = self . id , max_age = max_age , max_uses = max_uses , temporary = temporary , unique = unique , ) return Invite ( self . _state , data )","title":"create_invite()"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.TextChannel.trigger_typing","text":"Triggers typing in this text channel. Source code in lefi/objects/channel.py async def trigger_typing ( self ) -> None : \"\"\" Triggers typing in this text channel. \"\"\" await self . _state . http . trigger_typing ( channel_id = self . id )","title":"trigger_typing()"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.TextChannel.create_thread","text":"Creates a thread in this text channel. Parameters: Name Type Description Default name str The name of the thread. required auto_archive_duration int The duration of the thread. None type lefi.ChannelType The type of the thread. None invitable bool Whether or not the thread is invitable. None Returns: Type Description Thread The lefi.Thread instance. Source code in lefi/objects/channel.py async def create_thread ( self , * , name : str , auto_archive_duration : Optional [ int ] = None , type : Optional [ ChannelType ] = None , invitable : Optional [ bool ] = None , ) -> Thread : \"\"\" Creates a thread in this text channel. Parameters: name (str): The name of the thread. auto_archive_duration (int): The duration of the thread. type (lefi.ChannelType): The type of the thread. invitable (bool): Whether or not the thread is invitable. Returns: The [lefi.Thread](./thread.md) instance. \"\"\" if auto_archive_duration is not None : if auto_archive_duration not in ( 60 , 1440 , 4320 , 10080 ): raise ValueError ( \"auto_archive_duration must be 60, 1440, 4320 or 10080\" ) if not type : type = ChannelType . PRIVATE_THREAD data = await self . _state . http . start_thread_without_message ( channel_id = self . id , name = name , auto_archive_duration = auto_archive_duration , type = type . value , invitable = invitable , ) return Thread ( self . _state , self . guild , data )","title":"create_thread()"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.TextChannel.fetch_archived_threads","text":"Fetches archived threads in this text channel. Parameters: Name Type Description Default public bool Whether or not to fetch public threads. True before int The timestamp to fetch threads before. None limit int The limit of the messages to fetch. None Returns: Type Description List[Thread] A list of lefi.Thread instances. Source code in lefi/objects/channel.py async def fetch_archived_threads ( self , * , public : bool = True , before : Optional [ int ] = None , limit : Optional [ int ] = None , ) -> List [ Thread ]: \"\"\" Fetches archived threads in this text channel. Parameters: public (bool): Whether or not to fetch public threads. before (int): The timestamp to fetch threads before. limit (int): The limit of the messages to fetch. Returns: A list of [lefi.Thread](./thread.md) instances. \"\"\" if public : data = await self . _state . http . list_public_archived_threads ( channel_id = self . id , before = before , limit = limit , ) else : data = await self . _state . http . list_private_archived_threads ( channel_id = self . id , before = before , limit = limit ) return self . guild . _create_threads ( data )","title":"fetch_archived_threads()"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.TextChannel.fetch_joined_private_archived_threads","text":"Fetches joined private archived threads in this text channel. Returns: Type Description List[Thread] A list of lefi.Thread instances. Source code in lefi/objects/channel.py async def fetch_joined_private_archived_threads ( self ) -> List [ Thread ]: \"\"\" Fetches joined private archived threads in this text channel. Returns: A list of [lefi.Thread](./thread.md) instances. \"\"\" data = await self . _state . http . list_private_archived_threads ( channel_id = self . id ) return self . guild . _create_threads ( data )","title":"fetch_joined_private_archived_threads()"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.VoiceChannel","text":"Represents a VoiceChannel.","title":"VoiceChannel"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.VoiceChannel.user_limit","text":"The user limit of the voice channel.","title":"user_limit"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.VoiceChannel.bitrate","text":"The bitrate of the voice channel.","title":"bitrate"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.VoiceChannel.rtc_region","text":"THe rtc region of the voice channel.","title":"rtc_region"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.VoiceChannel.parent_id","text":"The ID of the parent channel.","title":"parent_id"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.VoiceChannel.parent","text":"The channels parent.","title":"parent"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.VoiceChannel.category","text":"An alias of parent","title":"category"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.VoiceChannel.members","text":"The members in the voice channel.","title":"members"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.VoiceChannel.__init__","text":"Creates a new VoiceChannel from the given data. Parameters: Name Type Description Default state lefi.State The State of the client. required data dict The data to create the channel from. required guild lefi.Guild The Guild the channel belongs to. required Source code in lefi/objects/channel.py def __init__ ( self , state : State , data : Dict , guild : Guild ) -> None : \"\"\" Creates a new VoiceChannel from the given data. Parameters: state (lefi.State): The [State](./state.md) of the client. data (dict): The data to create the channel from. guild (lefi.Guild): The [Guild](./guild.md) the channel belongs to. \"\"\" super () . __init__ ( state , data , guild )","title":"__init__()"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.VoiceChannel.create_invite","text":"Creates an invite for the channel. Parameters: Name Type Description Default max_age int The max age of the invite. 86400 max_uses int The max uses of the invite. 0 temporary bool Whether or not the invite is temporary. False unique bool Whether or not the invite is unique. False target_type Optional[lefi.InviteTargetType] The target type of the invite. None target_user Optional[lefi.User] The target user of the invite. None target_application_id Optional[int] The target application ID of the invite. None Returns: Type Description Invite The lefi.Invite instance. Source code in lefi/objects/channel.py async def create_invite ( self , * , max_age : int = 86400 , max_uses : int = 0 , temporary : bool = False , unique : bool = False , target_type : Optional [ InviteTargetType ] = None , target_user : Optional [ User ] = None , target_application_id : Optional [ int ] = None , ) -> Invite : \"\"\" Creates an invite for the channel. Parameters: max_age (int): The max age of the invite. max_uses (int): The max uses of the invite. temporary (bool): Whether or not the invite is temporary. unique (bool): Whether or not the invite is unique. target_type (Optional[lefi.InviteTargetType]): The target type of the invite. target_user (Optional[lefi.User]): The target user of the invite. target_application_id (Optional[int]): The target application ID of the invite. Returns: The [lefi.Invite](./invite.md) instance. \"\"\" data = await self . _state . http . create_channel_invite ( channel_id = self . id , max_age = max_age , max_uses = max_uses , temporary = temporary , unique = unique , target_type = target_type , target_user_id = target_user . id if target_user is not None else None , target_application_id = target_application_id , ) return Invite ( self . _state , data )","title":"create_invite()"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.VoiceChannel.edit","text":"Edits the channel. Parameters: Name Type Description Default **kwargs Any The options to pass to required Returns: Type Description VoiceChannel The lefi.VoiceChannel instance after editting. Source code in lefi/objects/channel.py async def edit ( self , * , name : Optional [ str ] = None , position : Optional [ int ] = None , bitrate : Optional [ int ] = None , user_limit : Optional [ int ] = None , rtc_region : Optional [ str ] = None , video_quality_mode : Optional [ int ] = None , sync_permissions : Optional [ bool ] = None , overwrites : Optional [ Dict [ Union [ Member , Role ], Permissions ]], ) -> VoiceChannel : \"\"\" Edits the channel. Parameters: **kwargs (Any): The options to pass to [lefi.HTTPClient.edit_voice_channel](./http.md#lefi.http.HTTPClient.edit_voice_channel). Returns: The lefi.VoiceChannel instance after editting. \"\"\" permission_overwrites = self . guild . _make_permission_overwrites ( overwrites ) data = await self . _state . http . edit_voice_channel ( channel_id = self . id , name = name , position = position , bitrate = bitrate , user_limit = user_limit , rtc_region = rtc_region , video_quality_mode = video_quality_mode , sync_permissions = sync_permissions , permission_overwrites = permission_overwrites , ) self . _data = data return self","title":"edit()"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.VoiceChannel.connect","text":"Connects to this voice channel and returns the created voice client. Returns: Type Description VoiceClient The lefi.VoiceClient instance. Source code in lefi/objects/channel.py async def connect ( self ) -> VoiceClient : \"\"\" Connects to this voice channel and returns the created voice client. Returns: The [lefi.VoiceClient][] instance. \"\"\" if self . guild . voice_client : raise VoiceException ( \"Client Already connected to a voice channel.\" ) voice = VoiceClient ( self . _state , self ) self . _state . add_voice_client ( self . guild . id , voice ) await voice . connect () return voice","title":"connect()"},{"location":"API-Reference/channel/#lefi.objects.channel.channel.VoiceChannel.disconnect","text":"Disconnects the voice client from the channel. Source code in lefi/objects/channel.py async def disconnect ( self ) -> None : \"\"\" Disconnects the voice client from the channel. \"\"\" voice = self . _state . get_voice_client ( self . guild . id ) if not voice : raise VoiceException ( \"Client not connected to a voice channel\" ) if voice . channel != self : raise VoiceException ( \"Client not connected to the voice channel\" ) if voice . is_connected (): await voice . disconnect () self . _state . remove_voice_client ( self . guild . id )","title":"disconnect()"},{"location":"API-Reference/client/","text":"A class used to communicate with the discord API and its gateway. Attributes: Name Type Description pub_key Optional[str] The client's public key. Used when handling interactions over HTTP. loop asyncio.AbstractEventLoop The event loop which is being used. http lefi.HTTPClient The HTTPClient to use for handling requests to the API. ws lefi.WebSocketClient The WebSocketClient which handles the gateway. guilds : List [ Guild ] property readonly The list of guilds the client is in. channels : List [ Union [ TextChannel , VoiceChannel , CategoryChannel , DMChannel , Channel ]] property readonly The list of channels the client can see. users : List [ User ] property readonly The list of users that the client can see. voice_clients : List [ VoiceClient ] property readonly The list of voice clients the client has. __init__ ( self , token , * , intents = None , sharded = False , shard_ids = None , loop = None ) special Parameters: Name Type Description Default token str The clients token, used for authorization (logging in, etc...) This is required. required intents Optional[lefi.Intents] The intents to be used for the client. None loop Optional[asyncio.AbstractEventLoop] The loop to use. None Source code in lefi/client.py def __init__ ( self , token : str , * , intents : Intents = None , sharded : bool = False , shard_ids : Optional [ List [ int ]] = None , loop : Optional [ asyncio . AbstractEventLoop ] = None , ) -> None : \"\"\" Parameters: token (str): The clients token, used for authorization (logging in, etc...) This is required. intents (Optional[lefi.Intents]): The intents to be used for the client. loop (Optional[asyncio.AbstractEventLoop]): The loop to use. \"\"\" self . loop : asyncio . AbstractEventLoop = loop or self . _create_loop () self . http : HTTPClient = HTTPClient ( token , self . loop ) self . _state : State = State ( self , self . loop ) self . ws : WebSocketClient = WebSocketClient ( self , intents , shard_ids , sharded ) self . events : Dict [ str , Cache [ Callable [ ... , Any ]]] = {} self . once_events : Dict [ str , List [ Callable [ ... , Any ]]] = {} self . futures : Dict [ str , List [ Tuple [ asyncio . Future , Callable [ ... , bool ]]]] = {} self . user : User = None # type: ignore self . shards : Optional [ List [ Shard ]] = None self . application_commands : Dict [ str , AppCommand ] = {} add_listener ( self , func , event_name , overwrite = False ) Registers listener, basically connecting an event to a callback. Parameters: Name Type Description Default func Callable[..., Coroutine] The callback to register for an event. required event_name Optional[str] The event to register, if None it will pass the decorated functions name. required Source code in lefi/client.py def add_listener ( self , func : Callable [ ... , Coroutine ], event_name : Optional [ str ], overwrite : bool = False , ) -> None : \"\"\" Registers listener, basically connecting an event to a callback. Parameters: func (Callable[..., Coroutine]): The callback to register for an event. event_name (Optional[str]): The event to register, if None it will pass the decorated functions name. \"\"\" name = event_name or func . __name__ if not inspect . iscoroutinefunction ( func ): raise TypeError ( \"Callback must be a coroutine\" ) callbacks = self . events . setdefault ( name , Cache [ Callable [ ... , Coroutine ]]( maxlen = 1 if overwrite else None ) ) if overwrite is False : callbacks . maxlen = None elif overwrite is True : callbacks . maxlen = 1 callbacks [ func ] = func # type: ignore on ( self , event_name = None , overwrite = False ) A decorator that registers the decorated function to an event. Parameters: Name Type Description Default event_name Optional[str] The event to register. None overwrite bool Whether or not to clear every callback except for the current one being registered. False Note The function being decorated must be a coroutine. Multiple functions can be decorated with the same event. Although you will need to pass the event name and give functions different names. And if no event name is passed it defaults to the functions name. Returns: Type Description Callable[..., Callable[..., Coroutine]] The decorated function after registering it as a listener. Examples: @client . on ( \"message_create\" ) async def on_message ( message : lefi . Message ) -> None : await message . channel . send ( \"Got your message!\" ) @client . on ( \"message_create\" ) async def on_message ( message : lefi . Message ) -> None : await message . channel . send ( \"Got your message!\" ) @client . on ( \"message_create\" ) async def on_message2 ( message : lefi . Message ) -> None : print ( message . content ) Source code in lefi/client.py def on ( self , event_name : Optional [ str ] = None , overwrite : bool = False ) -> Callable [ ... , Callable [ ... , Coroutine ]]: \"\"\" A decorator that registers the decorated function to an event. Parameters: event_name (Optional[str]): The event to register. overwrite (bool): Whether or not to clear every callback except for the current one being registered. Note: The function being decorated must be a coroutine. Multiple functions can be decorated with the same event. Although you will need to pass the event name and give functions different names. And if no event name is passed it defaults to the functions name. Returns: The decorated function after registering it as a listener. Example: ```py @client.on(\"message_create\") async def on_message(message: lefi.Message) -> None: await message.channel.send(\"Got your message!\") ``` ```py @client.on(\"message_create\") async def on_message(message: lefi.Message) -> None: await message.channel.send(\"Got your message!\") @client.on(\"message_create\") async def on_message2(message: lefi.Message) -> None: print(message.content) ``` \"\"\" def inner ( func : Callable [ ... , Coroutine ]) -> Callable [ ... , Coroutine ]: self . add_listener ( func , event_name , overwrite ) return func return inner once ( self , event_name = None ) A decorator that registers the decorated function to an event. Similar to lefi.Client.on but also cuts itself off the event after firing once. Meaning it will only run once. Parameters: Name Type Description Default event_name Optional[str] The event to register. None Note Functions must be coroutines. Multiple functions can be decorated with this that have the same event. Functions decorated with lefi.Client.once take precedence over the regular events. Returns: Type Description Callable[..., Callable[..., Coroutine]] The decorated function after registering it as a listener. Examples: @client . once ( \"ready\" ) async def on_ready ( client_user : lefi . User ) -> None : print ( f \"logged in as { client_user . username } \" ) Source code in lefi/client.py def once ( self , event_name : Optional [ str ] = None ) -> Callable [ ... , Callable [ ... , Coroutine ]]: \"\"\" A decorator that registers the decorated function to an event. Similar to [lefi.Client.on][] but also cuts itself off the event after firing once. Meaning it will only run once. Parameters: event_name (Optional[str]): The event to register. Note: Functions must be coroutines. Multiple functions can be decorated with this that have the same event. Functions decorated with [lefi.Client.once][] take precedence over the regular events. Returns: The decorated function after registering it as a listener. Example: ```py @client.once(\"ready\") async def on_ready(client_user: lefi.User) -> None: print(f\"logged in as {client_user.username}\") ``` \"\"\" def inner ( func : Callable [ ... , Coroutine ]) -> Callable [ ... , Coroutine ]: name = event_name or func . __name__ if not inspect . iscoroutinefunction ( func ): raise TypeError ( \"Callback must be a coroutine\" ) callbacks = self . once_events . setdefault ( name , []) callbacks . append ( func ) return func return inner connect ( self ) async A method which starts the connection to the gateway. Source code in lefi/client.py async def connect ( self ) -> None : \"\"\" A method which starts the connection to the gateway. \"\"\" await self . ws . start () close ( self ) async Closes the ClientSession and the websocket connection. Essentially closing the client. Source code in lefi/client.py async def close ( self ) -> None : \"\"\" Closes the ClientSession and the websocket connection. Essentially closing the client. \"\"\" await self . http . close () for voice in self . voice_clients : await voice . disconnect () if self . shards : for shard in self . shards : await shard . close () else : await self . ws . close () return None run ( self ) A blocking version of lefi.Client.run Source code in lefi/client.py def run ( self ) -> None : \"\"\" A blocking version of `lefi.Client.run` \"\"\" try : self . loop . run_until_complete ( self . start ()) self . loop . run_forever () except KeyboardInterrupt : self . loop . run_until_complete ( self . close ()) login ( self ) async A method which \"logs\" in with the token to make sure it is valid. This is to make sure that proper authorization has been passed. Source code in lefi/client.py async def login ( self ) -> None : \"\"\" A method which \"logs\" in with the token to make sure it is valid. This is to make sure that proper authorization has been passed. \"\"\" await self . http . login () start ( self ) async A method which calls lefi.Client.login and lefi.Client.connect in that order. Source code in lefi/client.py async def start ( self ) -> None : \"\"\" A method which calls [lefi.Client.login][] and [lefi.Client.connect][] in that order. \"\"\" await self . login () await self . connect () wait_for ( self , event , * , check = None , timeout = None ) async Waits for an event to be dispatched that passes the check. Parameters: Name Type Description Default event str The event to wait for. required check Callable[..., bool] A function that takes the same args as the event, and returns a bool. None timeout float The time to wait before stopping. None Returns: Type Description Any The return from a callback that matches with the event you are waiting for. Note The check has to take in the same args as the event. If no check is passed, everything will complete the check. Examples: @client . on ( \"message_create\" ) async def on_message ( message : lefi . Message ) -> None : if message . content == \"wait for next!\" : next_message = await client . wait_for ( \"message_create\" , check = lambda msg : msg . author . id == 270700034985558017 ) await message . channel . send ( f \"got your message! ` { next_message . content } `\" ) Source code in lefi/client.py async def wait_for ( self , event : str , * , check : Callable [ ... , bool ] = None , timeout : float = None ) -> Any : \"\"\" Waits for an event to be dispatched that passes the check. Parameters: event (str): The event to wait for. check (Callable[..., bool]): A function that takes the same args as the event, and returns a bool. timeout (float): The time to wait before stopping. Returns: The return from a callback that matches with the event you are waiting for. Note: The check has to take in the same args as the event. If no check is passed, everything will complete the check. Example: ```py @client.on(\"message_create\") async def on_message(message: lefi.Message) -> None: if message.content == \"wait for next!\": next_message = await client.wait_for( \"message_create\", check=lambda msg: msg.author.id == 270700034985558017 ) await message.channel.send(f\"got your message! `{next_message.content}`\") ``` \"\"\" future = self . loop . create_future () futures = self . futures . setdefault ( event , []) if check is None : check = lambda * _ : True futures . append (( future , check )) return await asyncio . wait_for ( future , timeout = timeout ) get_message ( self , id ) Grabs a lefi.Message instance if cached. Parameters: Name Type Description Default id int The message's ID. required Returns: Type Description Optional[Message] The lefi.Message instance related to the ID. Else None if not found. Source code in lefi/client.py def get_message ( self , id : int ) -> Optional [ Message ]: \"\"\" Grabs a [lefi.Message](./message.md) instance if cached. Parameters: id (int): The message's ID. Returns: The [lefi.Message](./message.md) instance related to the ID. Else None if not found. \"\"\" return self . _state . get_message ( id ) get_guild ( self , id ) Grabs a lefi.Guild instance if cached. Parameters: Name Type Description Default id int The guild's ID. required Returns: Type Description Optional[Guild] The lefi.Guild instance related to the ID. Else None if not found Source code in lefi/client.py def get_guild ( self , id : int ) -> Optional [ Guild ]: \"\"\" Grabs a [lefi.Guild](./guild.md) instance if cached. Parameters: id (int): The guild's ID. Returns: The [lefi.Guild](./guild.md) instance related to the ID. Else None if not found \"\"\" return self . _state . get_guild ( id ) get_channel ( self , id ) Grabs a lefi.Channel instance if cached. Parameters: Name Type Description Default id int The channel's ID. required Returns: Type Description Optional[Union[TextChannel, VoiceChannel, DMChannel, CategoryChannel, Channel]] The lefi.Channel instance related to the ID. Else None if not found Source code in lefi/client.py def get_channel ( self , id : int ) -> Optional [ Union [ TextChannel , VoiceChannel , DMChannel , CategoryChannel , Channel ] ]: \"\"\" Grabs a [lefi.Channel](./channel.md) instance if cached. Parameters: id (int): The channel's ID. Returns: The [lefi.Channel](./channel.md) instance related to the ID. Else None if not found \"\"\" return self . _state . get_channel ( id ) get_user ( self , id ) Grabs a lefi.User instance if cached. Parameters: Name Type Description Default id int The user's ID. required Returns: Type Description Optional[User] The lefi.User instance related to the ID. Else None if not found Source code in lefi/client.py def get_user ( self , id : int ) -> Optional [ User ]: \"\"\" Grabs a [lefi.User](./user.md) instance if cached. Parameters: id (int): The user's ID. Returns: The [lefi.User](./user.md) instance related to the ID. Else None if not found \"\"\" return self . _state . get_user ( id ) get_emoji ( self , id ) Grabs a lefi.Emoji instance if cached. Parameters: Name Type Description Default id int The emoji's ID. required Returns: Type Description Optional[Emoji] The lefi.Emoji instance related to the ID. Else None if not found Source code in lefi/client.py def get_emoji ( self , id : int ) -> Optional [ Emoji ]: \"\"\" Grabs a [lefi.Emoji](./emoji.md) instance if cached. Parameters: id (int): The emoji's ID. Returns: The [lefi.Emoji](./emoji.md) instance related to the ID. Else None if not found \"\"\" return self . _state . get_emoji ( id ) fetch_user ( self , user_id ) async Fetches a user from the API. Parameters: Name Type Description Default user_id int The users ID. required Returns: Type Description User The lefi.User instance fetched. Source code in lefi/client.py async def fetch_user ( self , user_id : int ) -> User : \"\"\" Fetches a user from the API. Parameters: user_id (int): The users ID. Returns: The [lefi.User](./user.md) instance fetched. \"\"\" data = await self . http . get_user ( user_id ) return self . _state . add_user ( data ) fetch_invite ( self , code , ** kwargs ) async Fetches an invite from the API. Parameters: Name Type Description Default code str The invite code. required Returns: Type Description Invite The lefi.Invite instance related to the code. Source code in lefi/client.py async def fetch_invite ( self , code : str , ** kwargs ) -> Invite : \"\"\" Fetches an invite from the API. Parameters: code (str): The invite code. Returns: The [lefi.Invite](./invite.md) instance related to the code. \"\"\" data = await self . http . get_invite ( code , ** kwargs ) return Invite ( data = data , state = self . _state ) fetch_guild ( self , guild_id ) async Fetches a guild from the API. Parameters: Name Type Description Default guild_id int The guild's ID. required Returns: Type Description Guild The lefi.Guild instance related to the ID. Source code in lefi/client.py async def fetch_guild ( self , guild_id : int ) -> Guild : \"\"\" Fetches a guild from the API. Parameters: guild_id (int): The guild's ID. Returns: The [lefi.Guild](./guild.md) instance related to the ID. \"\"\" data = await self . http . get_guild ( guild_id ) return Guild ( data = data , state = self . _state ) fetch_template ( self , code ) async Fetches a template from the API. Parameters: Name Type Description Default code str The template code. required Returns: Type Description GuildTemplate The lefi.GuildTemplate instance related to the code. Source code in lefi/client.py async def fetch_template ( self , code : str ) -> GuildTemplate : \"\"\" Fetches a template from the API. Parameters: code (str): The template code. Returns: The [lefi.GuildTemplate](./template.md) instance related to the code. \"\"\" data = await self . http . get_guild_template ( code ) return GuildTemplate ( data = data , state = self . _state )","title":"Client"},{"location":"API-Reference/client/#lefi.client.Client.guilds","text":"The list of guilds the client is in.","title":"guilds"},{"location":"API-Reference/client/#lefi.client.Client.channels","text":"The list of channels the client can see.","title":"channels"},{"location":"API-Reference/client/#lefi.client.Client.users","text":"The list of users that the client can see.","title":"users"},{"location":"API-Reference/client/#lefi.client.Client.voice_clients","text":"The list of voice clients the client has.","title":"voice_clients"},{"location":"API-Reference/client/#lefi.client.Client.__init__","text":"Parameters: Name Type Description Default token str The clients token, used for authorization (logging in, etc...) This is required. required intents Optional[lefi.Intents] The intents to be used for the client. None loop Optional[asyncio.AbstractEventLoop] The loop to use. None Source code in lefi/client.py def __init__ ( self , token : str , * , intents : Intents = None , sharded : bool = False , shard_ids : Optional [ List [ int ]] = None , loop : Optional [ asyncio . AbstractEventLoop ] = None , ) -> None : \"\"\" Parameters: token (str): The clients token, used for authorization (logging in, etc...) This is required. intents (Optional[lefi.Intents]): The intents to be used for the client. loop (Optional[asyncio.AbstractEventLoop]): The loop to use. \"\"\" self . loop : asyncio . AbstractEventLoop = loop or self . _create_loop () self . http : HTTPClient = HTTPClient ( token , self . loop ) self . _state : State = State ( self , self . loop ) self . ws : WebSocketClient = WebSocketClient ( self , intents , shard_ids , sharded ) self . events : Dict [ str , Cache [ Callable [ ... , Any ]]] = {} self . once_events : Dict [ str , List [ Callable [ ... , Any ]]] = {} self . futures : Dict [ str , List [ Tuple [ asyncio . Future , Callable [ ... , bool ]]]] = {} self . user : User = None # type: ignore self . shards : Optional [ List [ Shard ]] = None self . application_commands : Dict [ str , AppCommand ] = {}","title":"__init__()"},{"location":"API-Reference/client/#lefi.client.Client.add_listener","text":"Registers listener, basically connecting an event to a callback. Parameters: Name Type Description Default func Callable[..., Coroutine] The callback to register for an event. required event_name Optional[str] The event to register, if None it will pass the decorated functions name. required Source code in lefi/client.py def add_listener ( self , func : Callable [ ... , Coroutine ], event_name : Optional [ str ], overwrite : bool = False , ) -> None : \"\"\" Registers listener, basically connecting an event to a callback. Parameters: func (Callable[..., Coroutine]): The callback to register for an event. event_name (Optional[str]): The event to register, if None it will pass the decorated functions name. \"\"\" name = event_name or func . __name__ if not inspect . iscoroutinefunction ( func ): raise TypeError ( \"Callback must be a coroutine\" ) callbacks = self . events . setdefault ( name , Cache [ Callable [ ... , Coroutine ]]( maxlen = 1 if overwrite else None ) ) if overwrite is False : callbacks . maxlen = None elif overwrite is True : callbacks . maxlen = 1 callbacks [ func ] = func # type: ignore","title":"add_listener()"},{"location":"API-Reference/client/#lefi.client.Client.on","text":"A decorator that registers the decorated function to an event. Parameters: Name Type Description Default event_name Optional[str] The event to register. None overwrite bool Whether or not to clear every callback except for the current one being registered. False Note The function being decorated must be a coroutine. Multiple functions can be decorated with the same event. Although you will need to pass the event name and give functions different names. And if no event name is passed it defaults to the functions name. Returns: Type Description Callable[..., Callable[..., Coroutine]] The decorated function after registering it as a listener. Examples: @client . on ( \"message_create\" ) async def on_message ( message : lefi . Message ) -> None : await message . channel . send ( \"Got your message!\" ) @client . on ( \"message_create\" ) async def on_message ( message : lefi . Message ) -> None : await message . channel . send ( \"Got your message!\" ) @client . on ( \"message_create\" ) async def on_message2 ( message : lefi . Message ) -> None : print ( message . content ) Source code in lefi/client.py def on ( self , event_name : Optional [ str ] = None , overwrite : bool = False ) -> Callable [ ... , Callable [ ... , Coroutine ]]: \"\"\" A decorator that registers the decorated function to an event. Parameters: event_name (Optional[str]): The event to register. overwrite (bool): Whether or not to clear every callback except for the current one being registered. Note: The function being decorated must be a coroutine. Multiple functions can be decorated with the same event. Although you will need to pass the event name and give functions different names. And if no event name is passed it defaults to the functions name. Returns: The decorated function after registering it as a listener. Example: ```py @client.on(\"message_create\") async def on_message(message: lefi.Message) -> None: await message.channel.send(\"Got your message!\") ``` ```py @client.on(\"message_create\") async def on_message(message: lefi.Message) -> None: await message.channel.send(\"Got your message!\") @client.on(\"message_create\") async def on_message2(message: lefi.Message) -> None: print(message.content) ``` \"\"\" def inner ( func : Callable [ ... , Coroutine ]) -> Callable [ ... , Coroutine ]: self . add_listener ( func , event_name , overwrite ) return func return inner","title":"on()"},{"location":"API-Reference/client/#lefi.client.Client.once","text":"A decorator that registers the decorated function to an event. Similar to lefi.Client.on but also cuts itself off the event after firing once. Meaning it will only run once. Parameters: Name Type Description Default event_name Optional[str] The event to register. None Note Functions must be coroutines. Multiple functions can be decorated with this that have the same event. Functions decorated with lefi.Client.once take precedence over the regular events. Returns: Type Description Callable[..., Callable[..., Coroutine]] The decorated function after registering it as a listener. Examples: @client . once ( \"ready\" ) async def on_ready ( client_user : lefi . User ) -> None : print ( f \"logged in as { client_user . username } \" ) Source code in lefi/client.py def once ( self , event_name : Optional [ str ] = None ) -> Callable [ ... , Callable [ ... , Coroutine ]]: \"\"\" A decorator that registers the decorated function to an event. Similar to [lefi.Client.on][] but also cuts itself off the event after firing once. Meaning it will only run once. Parameters: event_name (Optional[str]): The event to register. Note: Functions must be coroutines. Multiple functions can be decorated with this that have the same event. Functions decorated with [lefi.Client.once][] take precedence over the regular events. Returns: The decorated function after registering it as a listener. Example: ```py @client.once(\"ready\") async def on_ready(client_user: lefi.User) -> None: print(f\"logged in as {client_user.username}\") ``` \"\"\" def inner ( func : Callable [ ... , Coroutine ]) -> Callable [ ... , Coroutine ]: name = event_name or func . __name__ if not inspect . iscoroutinefunction ( func ): raise TypeError ( \"Callback must be a coroutine\" ) callbacks = self . once_events . setdefault ( name , []) callbacks . append ( func ) return func return inner","title":"once()"},{"location":"API-Reference/client/#lefi.client.Client.connect","text":"A method which starts the connection to the gateway. Source code in lefi/client.py async def connect ( self ) -> None : \"\"\" A method which starts the connection to the gateway. \"\"\" await self . ws . start ()","title":"connect()"},{"location":"API-Reference/client/#lefi.client.Client.close","text":"Closes the ClientSession and the websocket connection. Essentially closing the client. Source code in lefi/client.py async def close ( self ) -> None : \"\"\" Closes the ClientSession and the websocket connection. Essentially closing the client. \"\"\" await self . http . close () for voice in self . voice_clients : await voice . disconnect () if self . shards : for shard in self . shards : await shard . close () else : await self . ws . close () return None","title":"close()"},{"location":"API-Reference/client/#lefi.client.Client.run","text":"A blocking version of lefi.Client.run Source code in lefi/client.py def run ( self ) -> None : \"\"\" A blocking version of `lefi.Client.run` \"\"\" try : self . loop . run_until_complete ( self . start ()) self . loop . run_forever () except KeyboardInterrupt : self . loop . run_until_complete ( self . close ())","title":"run()"},{"location":"API-Reference/client/#lefi.client.Client.login","text":"A method which \"logs\" in with the token to make sure it is valid. This is to make sure that proper authorization has been passed. Source code in lefi/client.py async def login ( self ) -> None : \"\"\" A method which \"logs\" in with the token to make sure it is valid. This is to make sure that proper authorization has been passed. \"\"\" await self . http . login ()","title":"login()"},{"location":"API-Reference/client/#lefi.client.Client.start","text":"A method which calls lefi.Client.login and lefi.Client.connect in that order. Source code in lefi/client.py async def start ( self ) -> None : \"\"\" A method which calls [lefi.Client.login][] and [lefi.Client.connect][] in that order. \"\"\" await self . login () await self . connect ()","title":"start()"},{"location":"API-Reference/client/#lefi.client.Client.wait_for","text":"Waits for an event to be dispatched that passes the check. Parameters: Name Type Description Default event str The event to wait for. required check Callable[..., bool] A function that takes the same args as the event, and returns a bool. None timeout float The time to wait before stopping. None Returns: Type Description Any The return from a callback that matches with the event you are waiting for. Note The check has to take in the same args as the event. If no check is passed, everything will complete the check. Examples: @client . on ( \"message_create\" ) async def on_message ( message : lefi . Message ) -> None : if message . content == \"wait for next!\" : next_message = await client . wait_for ( \"message_create\" , check = lambda msg : msg . author . id == 270700034985558017 ) await message . channel . send ( f \"got your message! ` { next_message . content } `\" ) Source code in lefi/client.py async def wait_for ( self , event : str , * , check : Callable [ ... , bool ] = None , timeout : float = None ) -> Any : \"\"\" Waits for an event to be dispatched that passes the check. Parameters: event (str): The event to wait for. check (Callable[..., bool]): A function that takes the same args as the event, and returns a bool. timeout (float): The time to wait before stopping. Returns: The return from a callback that matches with the event you are waiting for. Note: The check has to take in the same args as the event. If no check is passed, everything will complete the check. Example: ```py @client.on(\"message_create\") async def on_message(message: lefi.Message) -> None: if message.content == \"wait for next!\": next_message = await client.wait_for( \"message_create\", check=lambda msg: msg.author.id == 270700034985558017 ) await message.channel.send(f\"got your message! `{next_message.content}`\") ``` \"\"\" future = self . loop . create_future () futures = self . futures . setdefault ( event , []) if check is None : check = lambda * _ : True futures . append (( future , check )) return await asyncio . wait_for ( future , timeout = timeout )","title":"wait_for()"},{"location":"API-Reference/client/#lefi.client.Client.get_message","text":"Grabs a lefi.Message instance if cached. Parameters: Name Type Description Default id int The message's ID. required Returns: Type Description Optional[Message] The lefi.Message instance related to the ID. Else None if not found. Source code in lefi/client.py def get_message ( self , id : int ) -> Optional [ Message ]: \"\"\" Grabs a [lefi.Message](./message.md) instance if cached. Parameters: id (int): The message's ID. Returns: The [lefi.Message](./message.md) instance related to the ID. Else None if not found. \"\"\" return self . _state . get_message ( id )","title":"get_message()"},{"location":"API-Reference/client/#lefi.client.Client.get_guild","text":"Grabs a lefi.Guild instance if cached. Parameters: Name Type Description Default id int The guild's ID. required Returns: Type Description Optional[Guild] The lefi.Guild instance related to the ID. Else None if not found Source code in lefi/client.py def get_guild ( self , id : int ) -> Optional [ Guild ]: \"\"\" Grabs a [lefi.Guild](./guild.md) instance if cached. Parameters: id (int): The guild's ID. Returns: The [lefi.Guild](./guild.md) instance related to the ID. Else None if not found \"\"\" return self . _state . get_guild ( id )","title":"get_guild()"},{"location":"API-Reference/client/#lefi.client.Client.get_channel","text":"Grabs a lefi.Channel instance if cached. Parameters: Name Type Description Default id int The channel's ID. required Returns: Type Description Optional[Union[TextChannel, VoiceChannel, DMChannel, CategoryChannel, Channel]] The lefi.Channel instance related to the ID. Else None if not found Source code in lefi/client.py def get_channel ( self , id : int ) -> Optional [ Union [ TextChannel , VoiceChannel , DMChannel , CategoryChannel , Channel ] ]: \"\"\" Grabs a [lefi.Channel](./channel.md) instance if cached. Parameters: id (int): The channel's ID. Returns: The [lefi.Channel](./channel.md) instance related to the ID. Else None if not found \"\"\" return self . _state . get_channel ( id )","title":"get_channel()"},{"location":"API-Reference/client/#lefi.client.Client.get_user","text":"Grabs a lefi.User instance if cached. Parameters: Name Type Description Default id int The user's ID. required Returns: Type Description Optional[User] The lefi.User instance related to the ID. Else None if not found Source code in lefi/client.py def get_user ( self , id : int ) -> Optional [ User ]: \"\"\" Grabs a [lefi.User](./user.md) instance if cached. Parameters: id (int): The user's ID. Returns: The [lefi.User](./user.md) instance related to the ID. Else None if not found \"\"\" return self . _state . get_user ( id )","title":"get_user()"},{"location":"API-Reference/client/#lefi.client.Client.get_emoji","text":"Grabs a lefi.Emoji instance if cached. Parameters: Name Type Description Default id int The emoji's ID. required Returns: Type Description Optional[Emoji] The lefi.Emoji instance related to the ID. Else None if not found Source code in lefi/client.py def get_emoji ( self , id : int ) -> Optional [ Emoji ]: \"\"\" Grabs a [lefi.Emoji](./emoji.md) instance if cached. Parameters: id (int): The emoji's ID. Returns: The [lefi.Emoji](./emoji.md) instance related to the ID. Else None if not found \"\"\" return self . _state . get_emoji ( id )","title":"get_emoji()"},{"location":"API-Reference/client/#lefi.client.Client.fetch_user","text":"Fetches a user from the API. Parameters: Name Type Description Default user_id int The users ID. required Returns: Type Description User The lefi.User instance fetched. Source code in lefi/client.py async def fetch_user ( self , user_id : int ) -> User : \"\"\" Fetches a user from the API. Parameters: user_id (int): The users ID. Returns: The [lefi.User](./user.md) instance fetched. \"\"\" data = await self . http . get_user ( user_id ) return self . _state . add_user ( data )","title":"fetch_user()"},{"location":"API-Reference/client/#lefi.client.Client.fetch_invite","text":"Fetches an invite from the API. Parameters: Name Type Description Default code str The invite code. required Returns: Type Description Invite The lefi.Invite instance related to the code. Source code in lefi/client.py async def fetch_invite ( self , code : str , ** kwargs ) -> Invite : \"\"\" Fetches an invite from the API. Parameters: code (str): The invite code. Returns: The [lefi.Invite](./invite.md) instance related to the code. \"\"\" data = await self . http . get_invite ( code , ** kwargs ) return Invite ( data = data , state = self . _state )","title":"fetch_invite()"},{"location":"API-Reference/client/#lefi.client.Client.fetch_guild","text":"Fetches a guild from the API. Parameters: Name Type Description Default guild_id int The guild's ID. required Returns: Type Description Guild The lefi.Guild instance related to the ID. Source code in lefi/client.py async def fetch_guild ( self , guild_id : int ) -> Guild : \"\"\" Fetches a guild from the API. Parameters: guild_id (int): The guild's ID. Returns: The [lefi.Guild](./guild.md) instance related to the ID. \"\"\" data = await self . http . get_guild ( guild_id ) return Guild ( data = data , state = self . _state )","title":"fetch_guild()"},{"location":"API-Reference/client/#lefi.client.Client.fetch_template","text":"Fetches a template from the API. Parameters: Name Type Description Default code str The template code. required Returns: Type Description GuildTemplate The lefi.GuildTemplate instance related to the code. Source code in lefi/client.py async def fetch_template ( self , code : str ) -> GuildTemplate : \"\"\" Fetches a template from the API. Parameters: code (str): The template code. Returns: The [lefi.GuildTemplate](./template.md) instance related to the code. \"\"\" data = await self . http . get_guild_template ( code ) return GuildTemplate ( data = data , state = self . _state )","title":"fetch_template()"},{"location":"API-Reference/embed/","text":"Embed Represents a discord embed. title : Optional [ str ] property writable The embed's title. description : Optional [ str ] property writable The the embed's description. url : Optional [ str ] property writable The embed's url. timestamp : Optional [ str ] property writable The embed's timestamp. color : Optional [ int ] property writable The embed's color. footer : Optional [ EmbedFooter ] property readonly The embed's footer. image : Optional [ EmbedImage ] property readonly The embed's image. thumbnail : Optional [ EmbedThumbnail ] property readonly The embed's thumbnail. video : Optional [ EmbedVideo ] property readonly The embed's video. provider : Optional [ EmbedProvider ] property readonly The embed's provider. author : Optional [ EmbedAuthor ] property readonly The embed's author. fields : Optional [ List [ EmbedField ]] property readonly The embed's fields. __init__ ( self , ** kwargs ) special Parameters: Name Type Description Default **kwargs The attributes of the embed {} Source code in lefi/objects/embed.py def __init__ ( self , ** kwargs ) -> None : \"\"\" Parameters: **kwargs: The attributes of the embed \"\"\" self . _data = kwargs from_dict ( data ) classmethod Creates an Embed object from a dictionary. Parameters: Name Type Description Default data Dict The dictionary to create the embed from. required Returns: Type Description Embed The created embed Source code in lefi/objects/embed.py @classmethod def from_dict ( cls : Type [ Embed ], data : Dict ) -> Embed : \"\"\" Creates an Embed object from a dictionary. Parameters: data (Dict): The dictionary to create the embed from. Returns: The created embed \"\"\" return cls ( ** data ) to_dict ( self ) Turns the Embed into a dictionary. Returns: Type Description Dict The created dictionary. Source code in lefi/objects/embed.py def to_dict ( self ) -> Dict : \"\"\" Turns the Embed into a dictionary. Returns: The created dictionary. \"\"\" payload = self . _data . copy () for name , item in payload . items (): if isinstance ( item , EmbedItem ): payload [ name ] = update_payload ({}, ** item . data ) continue elif isinstance ( item , list ) and all ( isinstance ( obj , EmbedItem ) for obj in item ): payload [ name ] = [ update_payload ({}, ** field . data ) for field in item ] return payload set_footer ( self , text , icon_url = None ) Sets the embed's footer. Parameters: Name Type Description Default text str The text of the footer. required icon_url Optional[str] The icon url of the footer. None Source code in lefi/objects/embed.py def set_footer ( self , text : str , icon_url : Optional [ str ] = None ) -> None : \"\"\" Sets the embed's footer. Parameters: text (str): The text of the footer. icon_url (Optional[str]): The icon url of the footer. \"\"\" self . _data [ \"footer\" ] = EmbedItem ( text = text , icon_url = icon_url ) set_image ( self , url , height = None , width = None ) Sets the embed's image. Parameters: Name Type Description Default url str The url of the image required height Optional[int] The height of the image. None width Optional[int] The width of the image. None Source code in lefi/objects/embed.py def set_image ( self , url : str , height : Optional [ int ] = None , width : Optional [ int ] = None ) -> None : \"\"\" Sets the embed's image. Parameters: url (str): The url of the image height (Optional[int]): The height of the image. width (Optional[int]): The width of the image. \"\"\" self . _data [ \"image\" ] = EmbedItem ( url = url , height = height , width = width ) set_thumbnail ( self , url , height = None , width = None ) Sets the embed's thumbnail. Parameters: Name Type Description Default url str The url of the image required height Optional[int] The height of the thumbnail. None width Optional[int] The width of the thumbnail. None Source code in lefi/objects/embed.py def set_thumbnail ( self , url : str , height : Optional [ int ] = None , width : Optional [ int ] = None ) -> None : \"\"\" Sets the embed's thumbnail. Parameters: url (str): The url of the image height (Optional[int]): The height of the thumbnail. width (Optional[int]): The width of the thumbnail. \"\"\" self . _data [ \"thumbnail\" ] = EmbedItem ( url = url , height = height , width = width ) set_video ( self , url , height = None , width = None ) Sets the embed's video. Parameters: Name Type Description Default url str The url of the video required height Optional[int] The height of the video. None width Optional[int] The width of the video. None Source code in lefi/objects/embed.py def set_video ( self , url : str , height : Optional [ int ] = None , width : Optional [ int ] = None ) -> None : \"\"\" Sets the embed's video. Parameters: url (str): The url of the video height (Optional[int]): The height of the video. width (Optional[int]): The width of the video. \"\"\" self . _data [ \"thumbnail\" ] = EmbedItem ( url = url , height = height , width = width ) set_provider ( self , name = None , url = None ) Sets the embed's provider. Parameters: Name Type Description Default name Optional[str] The name of the provider. None url Optional[str] The url of the provider. None Source code in lefi/objects/embed.py def set_provider ( self , name : Optional [ str ] = None , url : Optional [ str ] = None ) -> None : \"\"\" Sets the embed's provider. Parameters: name (Optional[str]): The name of the provider. url (Optional[str]): The url of the provider. \"\"\" self . _data [ \"thumbnail\" ] = EmbedItem ( name = name , url = url ) set_author ( self , name , url = None , icon_url = None ) Sets the embed's author. Parameters: Name Type Description Default name str The name of the author. required url Optional[str] The url of the author. None icon_url Optional[str] The icon url of the author. None Source code in lefi/objects/embed.py def set_author ( self , name : str , url : Optional [ str ] = None , icon_url : Optional [ str ] = None ) -> None : \"\"\" Sets the embed's author. Parameters: name (str): The name of the author. url (Optional[str]): The url of the author. icon_url (Optional[str]): The icon url of the author. \"\"\" self . _data [ \"author\" ] = EmbedItem ( name = name , url = url , icon_url = icon_url ) add_field ( self , name , value , inline = False ) Adds a field to the embed. Parameters: Name Type Description Default name str The fields name. required value str The value of the field. required inline bool Whether or not the field is inline. False Source code in lefi/objects/embed.py def add_field ( self , name : str , value : str , inline : bool = False ) -> None : \"\"\" Adds a field to the embed. Parameters: name (str): The fields name. value (str): The value of the field. inline (bool): Whether or not the field is inline. \"\"\" self . _data . setdefault ( \"fields\" , []) . append ( EmbedItem ( name = name , value = value , inline = inline ) )","title":"Embed"},{"location":"API-Reference/embed/#lefi.objects.embed.embed.Embed","text":"Represents a discord embed.","title":"Embed"},{"location":"API-Reference/embed/#lefi.objects.embed.embed.Embed.title","text":"The embed's title.","title":"title"},{"location":"API-Reference/embed/#lefi.objects.embed.embed.Embed.description","text":"The the embed's description.","title":"description"},{"location":"API-Reference/embed/#lefi.objects.embed.embed.Embed.url","text":"The embed's url.","title":"url"},{"location":"API-Reference/embed/#lefi.objects.embed.embed.Embed.timestamp","text":"The embed's timestamp.","title":"timestamp"},{"location":"API-Reference/embed/#lefi.objects.embed.embed.Embed.color","text":"The embed's color.","title":"color"},{"location":"API-Reference/embed/#lefi.objects.embed.embed.Embed.footer","text":"The embed's footer.","title":"footer"},{"location":"API-Reference/embed/#lefi.objects.embed.embed.Embed.image","text":"The embed's image.","title":"image"},{"location":"API-Reference/embed/#lefi.objects.embed.embed.Embed.thumbnail","text":"The embed's thumbnail.","title":"thumbnail"},{"location":"API-Reference/embed/#lefi.objects.embed.embed.Embed.video","text":"The embed's video.","title":"video"},{"location":"API-Reference/embed/#lefi.objects.embed.embed.Embed.provider","text":"The embed's provider.","title":"provider"},{"location":"API-Reference/embed/#lefi.objects.embed.embed.Embed.author","text":"The embed's author.","title":"author"},{"location":"API-Reference/embed/#lefi.objects.embed.embed.Embed.fields","text":"The embed's fields.","title":"fields"},{"location":"API-Reference/embed/#lefi.objects.embed.embed.Embed.__init__","text":"Parameters: Name Type Description Default **kwargs The attributes of the embed {} Source code in lefi/objects/embed.py def __init__ ( self , ** kwargs ) -> None : \"\"\" Parameters: **kwargs: The attributes of the embed \"\"\" self . _data = kwargs","title":"__init__()"},{"location":"API-Reference/embed/#lefi.objects.embed.embed.Embed.from_dict","text":"Creates an Embed object from a dictionary. Parameters: Name Type Description Default data Dict The dictionary to create the embed from. required Returns: Type Description Embed The created embed Source code in lefi/objects/embed.py @classmethod def from_dict ( cls : Type [ Embed ], data : Dict ) -> Embed : \"\"\" Creates an Embed object from a dictionary. Parameters: data (Dict): The dictionary to create the embed from. Returns: The created embed \"\"\" return cls ( ** data )","title":"from_dict()"},{"location":"API-Reference/embed/#lefi.objects.embed.embed.Embed.to_dict","text":"Turns the Embed into a dictionary. Returns: Type Description Dict The created dictionary. Source code in lefi/objects/embed.py def to_dict ( self ) -> Dict : \"\"\" Turns the Embed into a dictionary. Returns: The created dictionary. \"\"\" payload = self . _data . copy () for name , item in payload . items (): if isinstance ( item , EmbedItem ): payload [ name ] = update_payload ({}, ** item . data ) continue elif isinstance ( item , list ) and all ( isinstance ( obj , EmbedItem ) for obj in item ): payload [ name ] = [ update_payload ({}, ** field . data ) for field in item ] return payload","title":"to_dict()"},{"location":"API-Reference/embed/#lefi.objects.embed.embed.Embed.set_footer","text":"Sets the embed's footer. Parameters: Name Type Description Default text str The text of the footer. required icon_url Optional[str] The icon url of the footer. None Source code in lefi/objects/embed.py def set_footer ( self , text : str , icon_url : Optional [ str ] = None ) -> None : \"\"\" Sets the embed's footer. Parameters: text (str): The text of the footer. icon_url (Optional[str]): The icon url of the footer. \"\"\" self . _data [ \"footer\" ] = EmbedItem ( text = text , icon_url = icon_url )","title":"set_footer()"},{"location":"API-Reference/embed/#lefi.objects.embed.embed.Embed.set_image","text":"Sets the embed's image. Parameters: Name Type Description Default url str The url of the image required height Optional[int] The height of the image. None width Optional[int] The width of the image. None Source code in lefi/objects/embed.py def set_image ( self , url : str , height : Optional [ int ] = None , width : Optional [ int ] = None ) -> None : \"\"\" Sets the embed's image. Parameters: url (str): The url of the image height (Optional[int]): The height of the image. width (Optional[int]): The width of the image. \"\"\" self . _data [ \"image\" ] = EmbedItem ( url = url , height = height , width = width )","title":"set_image()"},{"location":"API-Reference/embed/#lefi.objects.embed.embed.Embed.set_thumbnail","text":"Sets the embed's thumbnail. Parameters: Name Type Description Default url str The url of the image required height Optional[int] The height of the thumbnail. None width Optional[int] The width of the thumbnail. None Source code in lefi/objects/embed.py def set_thumbnail ( self , url : str , height : Optional [ int ] = None , width : Optional [ int ] = None ) -> None : \"\"\" Sets the embed's thumbnail. Parameters: url (str): The url of the image height (Optional[int]): The height of the thumbnail. width (Optional[int]): The width of the thumbnail. \"\"\" self . _data [ \"thumbnail\" ] = EmbedItem ( url = url , height = height , width = width )","title":"set_thumbnail()"},{"location":"API-Reference/embed/#lefi.objects.embed.embed.Embed.set_video","text":"Sets the embed's video. Parameters: Name Type Description Default url str The url of the video required height Optional[int] The height of the video. None width Optional[int] The width of the video. None Source code in lefi/objects/embed.py def set_video ( self , url : str , height : Optional [ int ] = None , width : Optional [ int ] = None ) -> None : \"\"\" Sets the embed's video. Parameters: url (str): The url of the video height (Optional[int]): The height of the video. width (Optional[int]): The width of the video. \"\"\" self . _data [ \"thumbnail\" ] = EmbedItem ( url = url , height = height , width = width )","title":"set_video()"},{"location":"API-Reference/embed/#lefi.objects.embed.embed.Embed.set_provider","text":"Sets the embed's provider. Parameters: Name Type Description Default name Optional[str] The name of the provider. None url Optional[str] The url of the provider. None Source code in lefi/objects/embed.py def set_provider ( self , name : Optional [ str ] = None , url : Optional [ str ] = None ) -> None : \"\"\" Sets the embed's provider. Parameters: name (Optional[str]): The name of the provider. url (Optional[str]): The url of the provider. \"\"\" self . _data [ \"thumbnail\" ] = EmbedItem ( name = name , url = url )","title":"set_provider()"},{"location":"API-Reference/embed/#lefi.objects.embed.embed.Embed.set_author","text":"Sets the embed's author. Parameters: Name Type Description Default name str The name of the author. required url Optional[str] The url of the author. None icon_url Optional[str] The icon url of the author. None Source code in lefi/objects/embed.py def set_author ( self , name : str , url : Optional [ str ] = None , icon_url : Optional [ str ] = None ) -> None : \"\"\" Sets the embed's author. Parameters: name (str): The name of the author. url (Optional[str]): The url of the author. icon_url (Optional[str]): The icon url of the author. \"\"\" self . _data [ \"author\" ] = EmbedItem ( name = name , url = url , icon_url = icon_url )","title":"set_author()"},{"location":"API-Reference/embed/#lefi.objects.embed.embed.Embed.add_field","text":"Adds a field to the embed. Parameters: Name Type Description Default name str The fields name. required value str The value of the field. required inline bool Whether or not the field is inline. False Source code in lefi/objects/embed.py def add_field ( self , name : str , value : str , inline : bool = False ) -> None : \"\"\" Adds a field to the embed. Parameters: name (str): The fields name. value (str): The value of the field. inline (bool): Whether or not the field is inline. \"\"\" self . _data . setdefault ( \"fields\" , []) . append ( EmbedItem ( name = name , value = value , inline = inline ) )","title":"add_field()"},{"location":"API-Reference/emoji/","text":"A class representing an Emoji. guild : Guild property readonly The Guild this emoji belongs to. id : int property readonly The emoji's ID. name : Optional [ str ] property readonly The emoji's name. roles : List [ Role ] property readonly The list of Role s that can use this emoji. user : Optional [ User ] property readonly The User that created this emoji. requires_colons : bool property readonly Whether this emoji requires colons to be used. managed : bool property readonly Whether this emoji is managed. animated : bool property readonly Whether this emoji is animated. available : bool property readonly Whether this emoji is available. __init__ ( self , state , data , guild ) special Creates a new Emoji. Parameters: Name Type Description Default state lefi.State The parent State . required data dict The data for this emoji. required guild lefi.Guild The parent Guild . required Source code in lefi/objects/emoji.py def __init__ ( self , state : State , data : Dict [ str , Any ], guild : Guild ) -> None : \"\"\" Creates a new Emoji. Parameters: state (lefi.State): The parent [State](./state.md). data (dict): The data for this emoji. guild (lefi.Guild): The parent [Guild](./guild.md). \"\"\" self . _data = data self . _state = state self . _guild = guild delete ( self ) async Deletes this Emoji . Source code in lefi/objects/emoji.py async def delete ( self ) -> Emoji : \"\"\" Deletes this [Emoji](./emoji.md). \"\"\" await self . _state . http . delete_guild_emoji ( self . guild . id , self . id ) return self edit ( self , * , name , roles = None ) async Edits this Emoji . Parameters: Name Type Description Default name str The new name for this emoji. required roles List[Role] The new list of Role s that can use this emoji. None Returns: Type Description Emoji The updated Emoji . Source code in lefi/objects/emoji.py async def edit ( self , * , name : str , roles : List [ Role ] = None ) -> Emoji : \"\"\" Edits this [Emoji](). Parameters: name: The new name for this emoji. roles: The new list of [Role](./role.md)s that can use this emoji. Returns: The updated [Emoji](./emoji.md). \"\"\" roles = roles or [] data = await self . _state . http . modify_guild_emoji ( guild_id = self . guild . id , emoji_id = self . id , name = name , roles = [ role . id for role in roles ], ) self . _data = data return self","title":"Emoji"},{"location":"API-Reference/emoji/#lefi.objects.emoji.Emoji.guild","text":"The Guild this emoji belongs to.","title":"guild"},{"location":"API-Reference/emoji/#lefi.objects.emoji.Emoji.id","text":"The emoji's ID.","title":"id"},{"location":"API-Reference/emoji/#lefi.objects.emoji.Emoji.name","text":"The emoji's name.","title":"name"},{"location":"API-Reference/emoji/#lefi.objects.emoji.Emoji.roles","text":"The list of Role s that can use this emoji.","title":"roles"},{"location":"API-Reference/emoji/#lefi.objects.emoji.Emoji.user","text":"The User that created this emoji.","title":"user"},{"location":"API-Reference/emoji/#lefi.objects.emoji.Emoji.requires_colons","text":"Whether this emoji requires colons to be used.","title":"requires_colons"},{"location":"API-Reference/emoji/#lefi.objects.emoji.Emoji.managed","text":"Whether this emoji is managed.","title":"managed"},{"location":"API-Reference/emoji/#lefi.objects.emoji.Emoji.animated","text":"Whether this emoji is animated.","title":"animated"},{"location":"API-Reference/emoji/#lefi.objects.emoji.Emoji.available","text":"Whether this emoji is available.","title":"available"},{"location":"API-Reference/emoji/#lefi.objects.emoji.Emoji.__init__","text":"Creates a new Emoji. Parameters: Name Type Description Default state lefi.State The parent State . required data dict The data for this emoji. required guild lefi.Guild The parent Guild . required Source code in lefi/objects/emoji.py def __init__ ( self , state : State , data : Dict [ str , Any ], guild : Guild ) -> None : \"\"\" Creates a new Emoji. Parameters: state (lefi.State): The parent [State](./state.md). data (dict): The data for this emoji. guild (lefi.Guild): The parent [Guild](./guild.md). \"\"\" self . _data = data self . _state = state self . _guild = guild","title":"__init__()"},{"location":"API-Reference/emoji/#lefi.objects.emoji.Emoji.delete","text":"Deletes this Emoji . Source code in lefi/objects/emoji.py async def delete ( self ) -> Emoji : \"\"\" Deletes this [Emoji](./emoji.md). \"\"\" await self . _state . http . delete_guild_emoji ( self . guild . id , self . id ) return self","title":"delete()"},{"location":"API-Reference/emoji/#lefi.objects.emoji.Emoji.edit","text":"Edits this Emoji . Parameters: Name Type Description Default name str The new name for this emoji. required roles List[Role] The new list of Role s that can use this emoji. None Returns: Type Description Emoji The updated Emoji . Source code in lefi/objects/emoji.py async def edit ( self , * , name : str , roles : List [ Role ] = None ) -> Emoji : \"\"\" Edits this [Emoji](). Parameters: name: The new name for this emoji. roles: The new list of [Role](./role.md)s that can use this emoji. Returns: The updated [Emoji](./emoji.md). \"\"\" roles = roles or [] data = await self . _state . http . modify_guild_emoji ( guild_id = self . guild . id , emoji_id = self . id , name = name , roles = [ role . id for role in roles ], ) self . _data = data return self","title":"edit()"},{"location":"API-Reference/errors/","text":"BadRequest ( HTTPException ) Represents a 400 error ClientException ( Exception ) Base class for all exceptions. Forbidden ( HTTPException ) Represents a 403 error HTTPException ( ClientException ) Error representing an error received from the API. Attributes: Name Type Description data Union[Dict[str, Any], str] data received from the API. messsage str The message for the error. code int The code of the error. __init__ ( self , data ) special Initialize the HTTPException. Parameters: Name Type Description Default data Union[Dict[str, Any], str] data received from the API. required Source code in lefi/errors.py def __init__ ( self , data : Union [ Dict [ str , Any ], str ]) -> None : \"\"\" Initialize the HTTPException. Parameters: data (Union[Dict[str, Any], str]): data received from the API. \"\"\" self . data = data self . message : str = \"\" self . code : int = 0 if isinstance ( data , dict ): self . code = data . get ( \"code\" , 0 ) self . message = data . get ( \"message\" , self . message ) else : self . code = 0 self . message = data super () . __init__ ( f \"(code: { self . code } ) { self . message } \" ) NotFound ( HTTPException ) Represents a 404 error OpusNotFound ( VoiceException ) Raised whenever a user attempts to use voice without having the Opus library installed. Unauthorized ( HTTPException ) Represents a 401 error VoiceException ( ClientException ) Base class for all voice exceptions.","title":"Errors"},{"location":"API-Reference/errors/#lefi.errors.BadRequest","text":"Represents a 400 error","title":"BadRequest"},{"location":"API-Reference/errors/#lefi.errors.ClientException","text":"Base class for all exceptions.","title":"ClientException"},{"location":"API-Reference/errors/#lefi.errors.Forbidden","text":"Represents a 403 error","title":"Forbidden"},{"location":"API-Reference/errors/#lefi.errors.HTTPException","text":"Error representing an error received from the API. Attributes: Name Type Description data Union[Dict[str, Any], str] data received from the API. messsage str The message for the error. code int The code of the error.","title":"HTTPException"},{"location":"API-Reference/errors/#lefi.errors.HTTPException.__init__","text":"Initialize the HTTPException. Parameters: Name Type Description Default data Union[Dict[str, Any], str] data received from the API. required Source code in lefi/errors.py def __init__ ( self , data : Union [ Dict [ str , Any ], str ]) -> None : \"\"\" Initialize the HTTPException. Parameters: data (Union[Dict[str, Any], str]): data received from the API. \"\"\" self . data = data self . message : str = \"\" self . code : int = 0 if isinstance ( data , dict ): self . code = data . get ( \"code\" , 0 ) self . message = data . get ( \"message\" , self . message ) else : self . code = 0 self . message = data super () . __init__ ( f \"(code: { self . code } ) { self . message } \" )","title":"__init__()"},{"location":"API-Reference/errors/#lefi.errors.NotFound","text":"Represents a 404 error","title":"NotFound"},{"location":"API-Reference/errors/#lefi.errors.OpusNotFound","text":"Raised whenever a user attempts to use voice without having the Opus library installed.","title":"OpusNotFound"},{"location":"API-Reference/errors/#lefi.errors.Unauthorized","text":"Represents a 401 error","title":"Unauthorized"},{"location":"API-Reference/errors/#lefi.errors.VoiceException","text":"Base class for all voice exceptions.","title":"VoiceException"},{"location":"API-Reference/guild/","text":"Represents a Guild. voice_client : Optional [ VoiceClient ] property readonly The guild's voice client if it exists. id : int property readonly The ID of the guild. name : str property readonly The name of the guild. icon : Optional [ CDNAsset ] property readonly The icon of the guild. icon_hash : str property readonly The icon hash of the guild. splash : Optional [ CDNAsset ] property readonly The guild's splash. discovery_splash : Optional [ CDNAsset ] property readonly The guilds discovery splash. owner : Optional [ Union [ User , Member ]] property readonly The owner of the guild. owner_id : int property readonly The ID of the owner. channels : List [ GuildChannels ] property readonly The list of lefi.Channel instances belonging to the guild. members : List [ Member ] property readonly The list of lefi.Member instances belonging to the guild. roles : List [ Role ] property readonly The list of lefi.Role instances belonging to the guild. emojis : List [ Emoji ] property readonly The list of lefi.Emoji instances belonging to the guild. default_role : Role property readonly The guild's default role. member_count : int property readonly The guild's member count. afk_channel_id : int property readonly The ID of the guild's AFK channel. afk_channel : Optional [ GuildChannels ] property readonly The guild's AFK channel. afk_timeout : int property readonly The guild's AFK timeout. verification_level : VerificationLevel property readonly The guild's verification level. default_message_notifications : MessageNotificationLevel property readonly The guild's default message notification level. explicit_content_filter : ExplicitContentFilterLevel property readonly The guild's explicit content filter level. features : List [ str ] property readonly The guild's features. mfa_level : MFALevel property readonly The guild's MFA level. application_id : Optional [ int ] property readonly The ID of the guild's application. __init__ ( self , state , data ) special Creates a new Guild instance. Parameters: Name Type Description Default state lefi.State The state instance. required data Dict The guild data. required Source code in lefi/objects/guild.py def __init__ ( self , state : State , data : Dict ) -> None : \"\"\" Creates a new Guild instance. Parameters: state (lefi.State): The state instance. data (Dict): The guild data. \"\"\" self . _channels : Dict [ int , GuildChannels ] = {} self . _members : Dict [ int , Member ] = {} self . _roles : Dict [ int , Role ] = {} self . _emojis : Dict [ int , Emoji ] = {} self . _voice_states : Dict [ int , VoiceState ] = {} self . _threads : Dict [ int , Thread ] = {} self . _state = state self . _data = data edit ( self , * , name = None , description = None , icon = None , banner = None , splash = None , discovery_splash = None , region = None , afk_channel = None , owner = None , afk_timeout = None , default_message_notifications = None , verification_level = None , features = None , system_channel = None , system_channel_flags = None , preferred_locale = None , rules_channel = None , public_updates_channel = None ) async Edits the guild. Parameters: Name Type Description Default **kwargs Any Options to pass to lefi.HTTPClient.modify_guild required Returns: Type Description Guild The Guild after editing Source code in lefi/objects/guild.py async def edit ( self , * , name : Optional [ str ] = None , description : Optional [ str ] = None , icon : Optional [ bytes ] = None , banner : Optional [ bytes ] = None , splash : Optional [ bytes ] = None , discovery_splash : Optional [ bytes ] = None , region : Optional [ Union [ str , VoiceRegion ]] = None , afk_channel : Optional [ VoiceChannel ] = None , owner : Optional [ Snowflake ] = None , afk_timeout : Optional [ int ] = None , default_message_notifications : Optional [ MessageNotificationLevel ] = None , verification_level : Optional [ VerificationLevel ] = None , features : Optional [ List [ str ]] = None , system_channel : Optional [ TextChannel ] = None , system_channel_flags : Optional [ SystemChannelFlags ] = None , preferred_locale : Optional [ str ] = None , rules_channel : Optional [ TextChannel ] = None , public_updates_channel : Optional [ TextChannel ] = None , ) -> Guild : \"\"\" Edits the guild. Parameters: **kwargs (Any): Options to pass to [lefi.HTTPClient.modify_guild][] Returns: The [Guild](./guild.md) after editing \"\"\" region = region . name if isinstance ( region , VoiceRegion ) else region notif = ( default_message_notifications . value if default_message_notifications else None ) data = await self . _state . http . modify_guild ( guild_id = self . id , name = name , description = description , icon = icon , banner = banner , splash = splash , discovery_splash = discovery_splash , region = region , afk_channel = afk_channel . id if afk_channel else None , owner_id = owner . id if owner else None , afk_timeout = afk_timeout , default_message_notifications = notif , verification_level = verification_level . value if verification_level else None , system_channel_id = system_channel . id if system_channel else None , rules_channel_id = rules_channel . id if rules_channel else None , public_updates_channel_id = public_updates_channel . id if public_updates_channel else None , preferred_locale = preferred_locale , features = features , system_channel_flags = system_channel_flags . value if system_channel_flags else None , ) self . _data = data return self create_text_channel ( self , * , name , topic = None , position = None , nsfw = None , overwrites = None , parent = None ) async Creates a new text channel in the guild. Parameters: Name Type Description Default name str The name of the channel. required topic str The topic of the channel. None position int The position of the channel. None nsfw bool Whether the channel is nsfw. None parent lefi.CategoryChannel The parent category of the channel. None Source code in lefi/objects/guild.py async def create_text_channel ( self , * , name : str , topic : Optional [ str ] = None , position : Optional [ int ] = None , nsfw : Optional [ bool ] = None , overwrites : Optional [ Dict [ Union [ Member , Role ], Permissions ]] = None , parent : Optional [ CategoryChannel ] = None , ) -> TextChannel : \"\"\" Creates a new text channel in the guild. Parameters: name (str): The name of the channel. topic (str): The topic of the channel. position (int): The position of the channel. nsfw (bool): Whether the channel is nsfw. parent (lefi.CategoryChannel): The parent category of the channel. \"\"\" data = await self . _create_channel ( name = name , type = ChannelType . TEXT , topic = topic , position = position , nsfw = nsfw , parent = parent , overwrites = overwrites , ) channel = self . _state . create_channel ( data , self ) return channel # type: ignore create_voice_channel ( self , * , name , bitrate = None , user_limit = None , position = None , overwrites = None , parent = None ) async Creates a new voice channel in the guild. Parameters: Name Type Description Default name str The name of the channel. required bitrate int The bitrate of the channel. None user_limit int The user limit of the channel. None position int The position of the channel. None parent lefi.CategoryChannel The parent category of the channel. None overwrites Dict[Union[lefi.Member, lefi.Role], lefi.Permissions] The overwrites of the channel. None Returns: Type Description VoiceChannel The newly created [lefi.VoiceChannel] instance. Source code in lefi/objects/guild.py async def create_voice_channel ( self , * , name : str , bitrate : Optional [ int ] = None , user_limit : Optional [ int ] = None , position : Optional [ int ] = None , overwrites : Optional [ Dict [ Union [ Member , Role ], Permissions ]] = None , parent : Optional [ CategoryChannel ] = None , ) -> VoiceChannel : \"\"\" Creates a new voice channel in the guild. Parameters: name (str): The name of the channel. bitrate (int): The bitrate of the channel. user_limit (int): The user limit of the channel. position (int): The position of the channel. parent (lefi.CategoryChannel): The parent category of the channel. overwrites (Dict[Union[lefi.Member, lefi.Role], lefi.Permissions]): The overwrites of the channel. Returns: The newly created [lefi.VoiceChannel] instance. \"\"\" data = await self . _create_channel ( name = name , type = ChannelType . VOICE , bitrate = bitrate , user_limit = user_limit , position = position , parent = parent , overwrites = overwrites , ) channel = self . _state . create_channel ( data , self ) return channel # type: ignore create_category ( self , * , name , position = None , overwrites = None ) async Creates a new category in the guild. Parameters: Name Type Description Default name str The name of the category. required position int The position of the category. None parent lefi.CategoryChannel The parent category of the category. required overwrites Dict[Union[lefi.Member, lefi.Role], lefi.Permissions] The overwrites of the category. None Returns: Type Description CategoryChannel The newly created [lefi.CategoryChannel] instance. Source code in lefi/objects/guild.py async def create_category ( self , * , name : str , position : Optional [ int ] = None , overwrites : Optional [ Dict [ Union [ Member , Role ], Permissions ]] = None , ) -> CategoryChannel : \"\"\" Creates a new category in the guild. Parameters: name (str): The name of the category. position (int): The position of the category. parent (lefi.CategoryChannel): The parent category of the category. overwrites (Dict[Union[lefi.Member, lefi.Role], lefi.Permissions]): The overwrites of the category. Returns: The newly created [lefi.CategoryChannel] instance. \"\"\" data = await self . _create_channel ( name = name , type = ChannelType . CATEGORY , position = position , overwrites = overwrites , ) channel = self . _state . create_channel ( data , self ) return channel # type: ignore create_role ( self , name , ** kwargs ) async Creates a new role in the guild. Parameters: Name Type Description Default name str The name of the role. required **kwargs Any Extra options to pass to lefi.HTTPClient.create_guild_role . {} Returns: Type Description Role The newly created lefi.Role instance. Source code in lefi/objects/guild.py async def create_role ( self , name : str , ** kwargs ) -> Role : \"\"\" Creates a new role in the guild. Parameters: name (str): The name of the role. **kwargs (Any): Extra options to pass to [lefi.HTTPClient.create_guild_role][]. Returns: The newly created [lefi.Role](./role.md) instance. \"\"\" data = await self . _state . http . create_guild_role ( self . id , name = name , ** kwargs ) role = Role ( self . _state , data , self ) self . _roles [ role . id ] = role return role kick ( self , user ) async Kicks a member from the guild. Parameters: Name Type Description Default user lefi.User The user to kick. required Source code in lefi/objects/guild.py async def kick ( self , user : Snowflake ) -> None : \"\"\" Kicks a member from the guild. Parameters: user (lefi.User): The user to kick. \"\"\" await self . _state . http . remove_guild_member ( self . id , user . id ) ban ( self , user , * , delete_message_days = 0 ) async Bans a member from the guild. Parameters: Name Type Description Default member lefi.Member The member to ban. required delete_message_days int The number of days to delete messages for. 0 Source code in lefi/objects/guild.py async def ban ( self , user : Snowflake , * , delete_message_days : int = 0 ) -> None : \"\"\" Bans a member from the guild. Parameters: member (lefi.Member): The member to ban. delete_message_days (int): The number of days to delete messages for. \"\"\" await self . _state . http . create_guild_ban ( self . id , user . id , delete_message_days = delete_message_days ) unban ( self , user ) async Unbans a member from the guild. Parameters: Name Type Description Default user lefi.User The user to unban. required Source code in lefi/objects/guild.py async def unban ( self , user : Snowflake ) -> None : \"\"\" Unbans a member from the guild. Parameters: user (lefi.User): The user to unban. \"\"\" await self . _state . http . remove_guild_ban ( self . id , user . id ) fetch_bans ( self ) async Fetches the bans from the guild. Returns: Type Description List[BanEntry] A list of lefi.BanEntry instances. Source code in lefi/objects/guild.py async def fetch_bans ( self ) -> List [ BanEntry ]: \"\"\" Fetches the bans from the guild. Returns: A list of [lefi.BanEntry](./banentry.md) instances. \"\"\" data = await self . _state . http . get_guild_bans ( self . id ) return [ BanEntry ( User ( self . _state , payload [ \"user\" ]), payload [ \"reason\" ]) for payload in data ] fetch_ban ( self , user ) async Fetches the ban from the guild. Parameters: Name Type Description Default user lefi.User The user to fetch the ban for. required Returns: Type Description BanEntry The lefi.BanEntry instance. Source code in lefi/objects/guild.py async def fetch_ban ( self , user : Snowflake ) -> BanEntry : \"\"\" Fetches the ban from the guild. Parameters: user (lefi.User): The user to fetch the ban for. Returns: The [lefi.BanEntry](./banentry.md) instance. \"\"\" data = await self . _state . http . get_guild_ban ( self . id , user . id ) user = User ( self . _state , data [ \"user\" ]) return BanEntry ( user , data [ \"reason\" ]) fetch_invites ( self ) async Fetches the guild's invites. Returns: Type Description List[Invite] A list of lefi.Invite instances. Source code in lefi/objects/guild.py async def fetch_invites ( self ) -> List [ Invite ]: \"\"\" Fetches the guild's invites. Returns: A list of [lefi.Invite](./invite.md) instances. \"\"\" data = await self . _state . http . get_guild_invites ( self . id ) return [ Invite ( self . _state , payload ) for payload in data ] fetch_integrations ( self ) async Fetches the guild's integrations. Returns: Type Description List[Integration] A list of lefi.Integration instances. Source code in lefi/objects/guild.py async def fetch_integrations ( self ) -> List [ Integration ]: \"\"\" Fetches the guild's integrations. Returns: A list of [lefi.Integration](./integration.md) instances. \"\"\" data = await self . _state . http . get_guild_integrations ( self . id ) return [ Integration ( self . _state , payload , self ) for payload in data ] fetch_vanity_url ( self ) async Fetches the guild's vanity url. Returns: Type Description The vanity url. Source code in lefi/objects/guild.py async def fetch_vanity_url ( self ): \"\"\" Fetches the guild's vanity url. Returns: The vanity url. \"\"\" data = await self . _state . http . get_guild_vanity_url ( self . id ) return PartialInvite ( data ) fetch_templates ( self ) async Fetches the guild's templates. Returns: Type Description List[GuildTemplate] A list of lefi.GuildTemplate instances. Source code in lefi/objects/guild.py async def fetch_templates ( self ) -> List [ GuildTemplate ]: \"\"\" Fetches the guild's templates. Returns: A list of [lefi.GuildTemplate](./template.md) instances. \"\"\" data = await self . _state . http . get_guild_templates ( self . id ) return [ GuildTemplate ( self . _state , payload ) for payload in data ] fetch_member ( self , user_id ) async Fetches a member from the guild. Parameters: Name Type Description Default user_id int The id of the user to fetch. required Returns: Type Description Member The lefi.Member instance. Source code in lefi/objects/guild.py async def fetch_member ( self , user_id : int ) -> Member : \"\"\" Fetches a member from the guild. Parameters: user_id (int): The id of the user to fetch. Returns: The [lefi.Member](./member.md) instance. \"\"\" data = await self . _state . http . get_guild_member ( self . id , user_id ) return self . _state . create_member ( data , self ) fetch_members ( self , * , limit = 100 , after = None ) async Fetches the guild's members. Parameters: Name Type Description Default limit int The number of members to fetch. 100 after int The id of the member to start at. None Returns: Type Description List[Member] A list of lefi.Member instances. Source code in lefi/objects/guild.py async def fetch_members ( self , * , limit : int = 100 , after : Optional [ int ] = None ) -> List [ Member ]: \"\"\" Fetches the guild's members. Parameters: limit (int): The number of members to fetch. after (int): The id of the member to start at. Returns: A list of [lefi.Member](./member.md) instances. \"\"\" data = await self . _state . http . list_guild_members ( self . id , limit = limit , after = after ) return [ self . _state . create_member ( payload , self ) for payload in data ] fetch_roles ( self ) async Fetches the guild's roles. Returns: Type Description List[Role] A list of lefi.Role instances. Source code in lefi/objects/guild.py async def fetch_roles ( self ) -> List [ Role ]: \"\"\" Fetches the guild's roles. Returns: A list of [lefi.Role](./role.md) instances. \"\"\" data = await self . _state . http . get_guild_roles ( self . id ) return [ Role ( self . _state , payload , self ) for payload in data ] fetch_prune_count ( self , * , days = 7 , roles = None ) async Fetches the number of members that would be pruned. Parameters: Name Type Description Default days int The number of days to prune for. 7 roles List[lefi.Role] The roles to include. None Returns: Type Description int The number of members that would be pruned. Source code in lefi/objects/guild.py async def fetch_prune_count ( self , * , days : int = 7 , roles : Optional [ List [ Role ]] = None ) -> int : \"\"\" Fetches the number of members that would be pruned. Parameters: days (int): The number of days to prune for. roles (List[lefi.Role]): The roles to include. Returns: The number of members that would be pruned. \"\"\" include_roles = [ r . id for r in roles ] if roles else None data = await self . _state . http . get_guild_prune_count ( guild_id = self . id , days = days , include_roles = include_roles ) return data [ \"pruned\" ] prune ( self , * , days = 7 , roles = None , compute_prune_count = True ) async Prunes the guild. Parameters: Name Type Description Default days int The number of days to prune for. 7 roles List[lefi.Role] The roles to include. None Returns: Type Description Optional[int] The number of members that were pruned. Source code in lefi/objects/guild.py async def prune ( self , * , days : int = 7 , roles : Optional [ List [ Role ]] = None , compute_prune_count : bool = True , ) -> Optional [ int ]: \"\"\" Prunes the guild. Parameters: days (int): The number of days to prune for. roles (List[lefi.Role]): The roles to include. Returns: The number of members that were pruned. \"\"\" include_roles = [ r . id for r in roles ] if roles else None data = await self . _state . http . begin_guild_prune ( guild_id = self . id , days = days , include_roles = include_roles , compute_prune_count = compute_prune_count , ) if compute_prune_count : return data [ \"pruned\" ] return None fetch_voice_regions ( self ) async Fetches the guild's voice regions. Returns: Type Description List[VoiceRegion] A list of lefi.VoiceRegion instances. Source code in lefi/objects/guild.py async def fetch_voice_regions ( self ) -> List [ VoiceRegion ]: \"\"\" Fetches the guild's voice regions. Returns: A list of [lefi.VoiceRegion](./voiceregion.md) instances. \"\"\" data = await self . _state . http . get_guild_voice_regions ( self . id ) return [ VoiceRegion ( payload ) for payload in data ] query ( self , q , * , limit = 1 ) Queries the guild for a specific string. Parameters: Name Type Description Default q str The query string. required limit int The maximum number of results to return. 1 Returns: Type Description MemberIterator A list of lefi.Member instances. Source code in lefi/objects/guild.py def query ( self , q : str , * , limit : int = 1 ) -> MemberIterator : \"\"\" Queries the guild for a specific string. Parameters: q (str): The query string. limit (int): The maximum number of results to return. Returns: A list of [lefi.Member](./member.md) instances. \"\"\" coro = self . _state . http . search_guild_members ( self . id , query = q , limit = limit ) return MemberIterator ( self . _state , self , coro ) audit_logs ( self , * , user = None , action = None , limit = None ) Returns an iterator for the guild's audit logs. Examples: async for entry in guild . audit_logs (): print ( f \"Action: { entry . action . name } . Target: { entry . target } . Reason: { entry . reason } \" ) for change in entry . changes : print ( f \"Change: { change . key } - { change . before } -> { change . after } \" ) Source code in lefi/objects/guild.py def audit_logs ( self , * , user : Optional [ Snowflake ] = None , action : Optional [ AuditLogsEvent ] = None , limit : Optional [ int ] = None , ) -> AuditLogIterator : \"\"\" Returns an iterator for the guild's audit logs. Example: ```py async for entry in guild.audit_logs(): print(f\"Action: {entry.action.name}. Target: {entry.target}. Reason: {entry.reason}\") for change in entry.changes: print(f\"Change: {change.key} - {change.before} -> {change.after}\") ``` \"\"\" user_id = user . id if user else None action_type = action . value if action else None coro = self . _state . http . get_guild_audit_log ( guild_id = self . id , user_id = user_id , action_type = action_type , limit = limit ) return AuditLogIterator ( self . _state , self , coro ) fetch_active_threads ( self ) async Fetches the guild's active threads. Returns: Type Description List[Thread] A list of lefi.Thread instances. Source code in lefi/objects/guild.py async def fetch_active_threads ( self ) -> List [ Thread ]: \"\"\" Fetches the guild's active threads. Returns: A list of [lefi.Thread](./thread.md) instances. \"\"\" data = await self . _state . http . list_active_threads ( self . id ) return self . _create_threads ( data ) change_voice_state ( self , * , channel = None , self_mute = False , self_deaf = False ) async Changes the guild's voice state. Parameters: Name Type Description Default channel lefi.VoiceChannel The voice channel to move to. None self_mute bool Whether to mute the bot. False self_deaf bool Whether to deafen the bot. False Source code in lefi/objects/guild.py async def change_voice_state ( self , * , channel : Optional [ VoiceChannel ] = None , self_mute : bool = False , self_deaf : bool = False , ) -> None : \"\"\" Changes the guild's voice state. Parameters: channel (lefi.VoiceChannel): The voice channel to move to. self_mute (bool): Whether to mute the bot. self_deaf (bool): Whether to deafen the bot. \"\"\" ws = self . _state . get_websocket ( self . id ) await ws . change_guild_voice_state ( self . id , channel . id if channel else None , self_mute , self_deaf ) get_member ( self , member_id ) Gets a member from the guilds member cache. Parameters: Name Type Description Default member_id int The ID of the member. required Returns: Type Description Optional[Member] The lefi.Member instance corresponding to the ID if found. Source code in lefi/objects/guild.py def get_member ( self , member_id : int ) -> Optional [ Member ]: \"\"\" Gets a member from the guilds member cache. Parameters: member_id (int): The ID of the member. Returns: The [lefi.Member](./member.md) instance corresponding to the ID if found. \"\"\" return self . _members . get ( member_id ) get_channel ( self , channel_id ) Gets a channel from the guilds channel cache. Parameters: Name Type Description Default channel_id int The ID of the channel. required Returns: Type Description Optional[GuildChannels] The lefi.Channel instance corresponding to the ID if found. Source code in lefi/objects/guild.py def get_channel ( self , channel_id : int ) -> Optional [ GuildChannels ]: \"\"\" Gets a channel from the guilds channel cache. Parameters: channel_id (int): The ID of the channel. Returns: The [lefi.Channel](./channel.md) instance corresponding to the ID if found. \"\"\" return self . _channels . get ( channel_id ) get_role ( self , role_id ) Gets a role from the guilds role cache. Parameters: Name Type Description Default role_id int The ID of the role. required Returns: Type Description Optional[Role] The lefi.Role instance corresponding to the ID if found. Source code in lefi/objects/guild.py def get_role ( self , role_id : int ) -> Optional [ Role ]: \"\"\" Gets a role from the guilds role cache. Parameters: role_id (int): The ID of the role. Returns: The [lefi.Role](./role.md) instance corresponding to the ID if found. \"\"\" return self . _roles . get ( role_id ) get_emoji ( self , emoji_id ) Gets an emoji from the guilds emoji cache. Parameters: Name Type Description Default emoji_id int The ID of the emoji. required Returns: Type Description Optional[Emoji] The lefi.Emoji instance corresponding to the ID if found. Source code in lefi/objects/guild.py def get_emoji ( self , emoji_id : int ) -> Optional [ Emoji ]: \"\"\" Gets an emoji from the guilds emoji cache. Parameters: emoji_id (int): The ID of the emoji. Returns: The [lefi.Emoji](./emoji.md) instance corresponding to the ID if found. \"\"\" return self . _emojis . get ( emoji_id ) get_voice_state ( self , member_id ) Gets a voice state from the guilds voice state cache. Parameters: Name Type Description Default member_id int The ID of the member. required Returns: Type Description Optional[VoiceState] The lefi.VoiceState instance corresponding to the ID if found. Source code in lefi/objects/guild.py def get_voice_state ( self , member_id : int ) -> Optional [ VoiceState ]: \"\"\" Gets a voice state from the guilds voice state cache. Parameters: member_id (int): The ID of the member. Returns: The [lefi.VoiceState][] instance corresponding to the ID if found. \"\"\" return self . _voice_states . get ( member_id ) get_thread ( self , thread_id ) Gets a thread from the guilds thread cache. Parameters: Name Type Description Default thread_id int The ID of the thread. required Returns: Type Description Optional[Thread] The lefi.Thread instance corresponding to the ID if found. Source code in lefi/objects/guild.py def get_thread ( self , thread_id : int ) -> Optional [ Thread ]: \"\"\" Gets a thread from the guilds thread cache. Parameters: thread_id (int): The ID of the thread. Returns: The [lefi.Thread](./thread.md) instance corresponding to the ID if found. \"\"\" return self . _threads . get ( thread_id )","title":"Guild"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.voice_client","text":"The guild's voice client if it exists.","title":"voice_client"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.id","text":"The ID of the guild.","title":"id"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.name","text":"The name of the guild.","title":"name"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.icon","text":"The icon of the guild.","title":"icon"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.icon_hash","text":"The icon hash of the guild.","title":"icon_hash"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.splash","text":"The guild's splash.","title":"splash"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.discovery_splash","text":"The guilds discovery splash.","title":"discovery_splash"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.owner","text":"The owner of the guild.","title":"owner"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.owner_id","text":"The ID of the owner.","title":"owner_id"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.channels","text":"The list of lefi.Channel instances belonging to the guild.","title":"channels"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.members","text":"The list of lefi.Member instances belonging to the guild.","title":"members"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.roles","text":"The list of lefi.Role instances belonging to the guild.","title":"roles"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.emojis","text":"The list of lefi.Emoji instances belonging to the guild.","title":"emojis"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.default_role","text":"The guild's default role.","title":"default_role"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.member_count","text":"The guild's member count.","title":"member_count"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.afk_channel_id","text":"The ID of the guild's AFK channel.","title":"afk_channel_id"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.afk_channel","text":"The guild's AFK channel.","title":"afk_channel"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.afk_timeout","text":"The guild's AFK timeout.","title":"afk_timeout"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.verification_level","text":"The guild's verification level.","title":"verification_level"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.default_message_notifications","text":"The guild's default message notification level.","title":"default_message_notifications"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.explicit_content_filter","text":"The guild's explicit content filter level.","title":"explicit_content_filter"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.features","text":"The guild's features.","title":"features"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.mfa_level","text":"The guild's MFA level.","title":"mfa_level"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.application_id","text":"The ID of the guild's application.","title":"application_id"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.__init__","text":"Creates a new Guild instance. Parameters: Name Type Description Default state lefi.State The state instance. required data Dict The guild data. required Source code in lefi/objects/guild.py def __init__ ( self , state : State , data : Dict ) -> None : \"\"\" Creates a new Guild instance. Parameters: state (lefi.State): The state instance. data (Dict): The guild data. \"\"\" self . _channels : Dict [ int , GuildChannels ] = {} self . _members : Dict [ int , Member ] = {} self . _roles : Dict [ int , Role ] = {} self . _emojis : Dict [ int , Emoji ] = {} self . _voice_states : Dict [ int , VoiceState ] = {} self . _threads : Dict [ int , Thread ] = {} self . _state = state self . _data = data","title":"__init__()"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.edit","text":"Edits the guild. Parameters: Name Type Description Default **kwargs Any Options to pass to lefi.HTTPClient.modify_guild required Returns: Type Description Guild The Guild after editing Source code in lefi/objects/guild.py async def edit ( self , * , name : Optional [ str ] = None , description : Optional [ str ] = None , icon : Optional [ bytes ] = None , banner : Optional [ bytes ] = None , splash : Optional [ bytes ] = None , discovery_splash : Optional [ bytes ] = None , region : Optional [ Union [ str , VoiceRegion ]] = None , afk_channel : Optional [ VoiceChannel ] = None , owner : Optional [ Snowflake ] = None , afk_timeout : Optional [ int ] = None , default_message_notifications : Optional [ MessageNotificationLevel ] = None , verification_level : Optional [ VerificationLevel ] = None , features : Optional [ List [ str ]] = None , system_channel : Optional [ TextChannel ] = None , system_channel_flags : Optional [ SystemChannelFlags ] = None , preferred_locale : Optional [ str ] = None , rules_channel : Optional [ TextChannel ] = None , public_updates_channel : Optional [ TextChannel ] = None , ) -> Guild : \"\"\" Edits the guild. Parameters: **kwargs (Any): Options to pass to [lefi.HTTPClient.modify_guild][] Returns: The [Guild](./guild.md) after editing \"\"\" region = region . name if isinstance ( region , VoiceRegion ) else region notif = ( default_message_notifications . value if default_message_notifications else None ) data = await self . _state . http . modify_guild ( guild_id = self . id , name = name , description = description , icon = icon , banner = banner , splash = splash , discovery_splash = discovery_splash , region = region , afk_channel = afk_channel . id if afk_channel else None , owner_id = owner . id if owner else None , afk_timeout = afk_timeout , default_message_notifications = notif , verification_level = verification_level . value if verification_level else None , system_channel_id = system_channel . id if system_channel else None , rules_channel_id = rules_channel . id if rules_channel else None , public_updates_channel_id = public_updates_channel . id if public_updates_channel else None , preferred_locale = preferred_locale , features = features , system_channel_flags = system_channel_flags . value if system_channel_flags else None , ) self . _data = data return self","title":"edit()"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.create_text_channel","text":"Creates a new text channel in the guild. Parameters: Name Type Description Default name str The name of the channel. required topic str The topic of the channel. None position int The position of the channel. None nsfw bool Whether the channel is nsfw. None parent lefi.CategoryChannel The parent category of the channel. None Source code in lefi/objects/guild.py async def create_text_channel ( self , * , name : str , topic : Optional [ str ] = None , position : Optional [ int ] = None , nsfw : Optional [ bool ] = None , overwrites : Optional [ Dict [ Union [ Member , Role ], Permissions ]] = None , parent : Optional [ CategoryChannel ] = None , ) -> TextChannel : \"\"\" Creates a new text channel in the guild. Parameters: name (str): The name of the channel. topic (str): The topic of the channel. position (int): The position of the channel. nsfw (bool): Whether the channel is nsfw. parent (lefi.CategoryChannel): The parent category of the channel. \"\"\" data = await self . _create_channel ( name = name , type = ChannelType . TEXT , topic = topic , position = position , nsfw = nsfw , parent = parent , overwrites = overwrites , ) channel = self . _state . create_channel ( data , self ) return channel # type: ignore","title":"create_text_channel()"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.create_voice_channel","text":"Creates a new voice channel in the guild. Parameters: Name Type Description Default name str The name of the channel. required bitrate int The bitrate of the channel. None user_limit int The user limit of the channel. None position int The position of the channel. None parent lefi.CategoryChannel The parent category of the channel. None overwrites Dict[Union[lefi.Member, lefi.Role], lefi.Permissions] The overwrites of the channel. None Returns: Type Description VoiceChannel The newly created [lefi.VoiceChannel] instance. Source code in lefi/objects/guild.py async def create_voice_channel ( self , * , name : str , bitrate : Optional [ int ] = None , user_limit : Optional [ int ] = None , position : Optional [ int ] = None , overwrites : Optional [ Dict [ Union [ Member , Role ], Permissions ]] = None , parent : Optional [ CategoryChannel ] = None , ) -> VoiceChannel : \"\"\" Creates a new voice channel in the guild. Parameters: name (str): The name of the channel. bitrate (int): The bitrate of the channel. user_limit (int): The user limit of the channel. position (int): The position of the channel. parent (lefi.CategoryChannel): The parent category of the channel. overwrites (Dict[Union[lefi.Member, lefi.Role], lefi.Permissions]): The overwrites of the channel. Returns: The newly created [lefi.VoiceChannel] instance. \"\"\" data = await self . _create_channel ( name = name , type = ChannelType . VOICE , bitrate = bitrate , user_limit = user_limit , position = position , parent = parent , overwrites = overwrites , ) channel = self . _state . create_channel ( data , self ) return channel # type: ignore","title":"create_voice_channel()"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.create_category","text":"Creates a new category in the guild. Parameters: Name Type Description Default name str The name of the category. required position int The position of the category. None parent lefi.CategoryChannel The parent category of the category. required overwrites Dict[Union[lefi.Member, lefi.Role], lefi.Permissions] The overwrites of the category. None Returns: Type Description CategoryChannel The newly created [lefi.CategoryChannel] instance. Source code in lefi/objects/guild.py async def create_category ( self , * , name : str , position : Optional [ int ] = None , overwrites : Optional [ Dict [ Union [ Member , Role ], Permissions ]] = None , ) -> CategoryChannel : \"\"\" Creates a new category in the guild. Parameters: name (str): The name of the category. position (int): The position of the category. parent (lefi.CategoryChannel): The parent category of the category. overwrites (Dict[Union[lefi.Member, lefi.Role], lefi.Permissions]): The overwrites of the category. Returns: The newly created [lefi.CategoryChannel] instance. \"\"\" data = await self . _create_channel ( name = name , type = ChannelType . CATEGORY , position = position , overwrites = overwrites , ) channel = self . _state . create_channel ( data , self ) return channel # type: ignore","title":"create_category()"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.create_role","text":"Creates a new role in the guild. Parameters: Name Type Description Default name str The name of the role. required **kwargs Any Extra options to pass to lefi.HTTPClient.create_guild_role . {} Returns: Type Description Role The newly created lefi.Role instance. Source code in lefi/objects/guild.py async def create_role ( self , name : str , ** kwargs ) -> Role : \"\"\" Creates a new role in the guild. Parameters: name (str): The name of the role. **kwargs (Any): Extra options to pass to [lefi.HTTPClient.create_guild_role][]. Returns: The newly created [lefi.Role](./role.md) instance. \"\"\" data = await self . _state . http . create_guild_role ( self . id , name = name , ** kwargs ) role = Role ( self . _state , data , self ) self . _roles [ role . id ] = role return role","title":"create_role()"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.kick","text":"Kicks a member from the guild. Parameters: Name Type Description Default user lefi.User The user to kick. required Source code in lefi/objects/guild.py async def kick ( self , user : Snowflake ) -> None : \"\"\" Kicks a member from the guild. Parameters: user (lefi.User): The user to kick. \"\"\" await self . _state . http . remove_guild_member ( self . id , user . id )","title":"kick()"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.ban","text":"Bans a member from the guild. Parameters: Name Type Description Default member lefi.Member The member to ban. required delete_message_days int The number of days to delete messages for. 0 Source code in lefi/objects/guild.py async def ban ( self , user : Snowflake , * , delete_message_days : int = 0 ) -> None : \"\"\" Bans a member from the guild. Parameters: member (lefi.Member): The member to ban. delete_message_days (int): The number of days to delete messages for. \"\"\" await self . _state . http . create_guild_ban ( self . id , user . id , delete_message_days = delete_message_days )","title":"ban()"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.unban","text":"Unbans a member from the guild. Parameters: Name Type Description Default user lefi.User The user to unban. required Source code in lefi/objects/guild.py async def unban ( self , user : Snowflake ) -> None : \"\"\" Unbans a member from the guild. Parameters: user (lefi.User): The user to unban. \"\"\" await self . _state . http . remove_guild_ban ( self . id , user . id )","title":"unban()"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.fetch_bans","text":"Fetches the bans from the guild. Returns: Type Description List[BanEntry] A list of lefi.BanEntry instances. Source code in lefi/objects/guild.py async def fetch_bans ( self ) -> List [ BanEntry ]: \"\"\" Fetches the bans from the guild. Returns: A list of [lefi.BanEntry](./banentry.md) instances. \"\"\" data = await self . _state . http . get_guild_bans ( self . id ) return [ BanEntry ( User ( self . _state , payload [ \"user\" ]), payload [ \"reason\" ]) for payload in data ]","title":"fetch_bans()"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.fetch_ban","text":"Fetches the ban from the guild. Parameters: Name Type Description Default user lefi.User The user to fetch the ban for. required Returns: Type Description BanEntry The lefi.BanEntry instance. Source code in lefi/objects/guild.py async def fetch_ban ( self , user : Snowflake ) -> BanEntry : \"\"\" Fetches the ban from the guild. Parameters: user (lefi.User): The user to fetch the ban for. Returns: The [lefi.BanEntry](./banentry.md) instance. \"\"\" data = await self . _state . http . get_guild_ban ( self . id , user . id ) user = User ( self . _state , data [ \"user\" ]) return BanEntry ( user , data [ \"reason\" ])","title":"fetch_ban()"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.fetch_invites","text":"Fetches the guild's invites. Returns: Type Description List[Invite] A list of lefi.Invite instances. Source code in lefi/objects/guild.py async def fetch_invites ( self ) -> List [ Invite ]: \"\"\" Fetches the guild's invites. Returns: A list of [lefi.Invite](./invite.md) instances. \"\"\" data = await self . _state . http . get_guild_invites ( self . id ) return [ Invite ( self . _state , payload ) for payload in data ]","title":"fetch_invites()"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.fetch_integrations","text":"Fetches the guild's integrations. Returns: Type Description List[Integration] A list of lefi.Integration instances. Source code in lefi/objects/guild.py async def fetch_integrations ( self ) -> List [ Integration ]: \"\"\" Fetches the guild's integrations. Returns: A list of [lefi.Integration](./integration.md) instances. \"\"\" data = await self . _state . http . get_guild_integrations ( self . id ) return [ Integration ( self . _state , payload , self ) for payload in data ]","title":"fetch_integrations()"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.fetch_vanity_url","text":"Fetches the guild's vanity url. Returns: Type Description The vanity url. Source code in lefi/objects/guild.py async def fetch_vanity_url ( self ): \"\"\" Fetches the guild's vanity url. Returns: The vanity url. \"\"\" data = await self . _state . http . get_guild_vanity_url ( self . id ) return PartialInvite ( data )","title":"fetch_vanity_url()"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.fetch_templates","text":"Fetches the guild's templates. Returns: Type Description List[GuildTemplate] A list of lefi.GuildTemplate instances. Source code in lefi/objects/guild.py async def fetch_templates ( self ) -> List [ GuildTemplate ]: \"\"\" Fetches the guild's templates. Returns: A list of [lefi.GuildTemplate](./template.md) instances. \"\"\" data = await self . _state . http . get_guild_templates ( self . id ) return [ GuildTemplate ( self . _state , payload ) for payload in data ]","title":"fetch_templates()"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.fetch_member","text":"Fetches a member from the guild. Parameters: Name Type Description Default user_id int The id of the user to fetch. required Returns: Type Description Member The lefi.Member instance. Source code in lefi/objects/guild.py async def fetch_member ( self , user_id : int ) -> Member : \"\"\" Fetches a member from the guild. Parameters: user_id (int): The id of the user to fetch. Returns: The [lefi.Member](./member.md) instance. \"\"\" data = await self . _state . http . get_guild_member ( self . id , user_id ) return self . _state . create_member ( data , self )","title":"fetch_member()"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.fetch_members","text":"Fetches the guild's members. Parameters: Name Type Description Default limit int The number of members to fetch. 100 after int The id of the member to start at. None Returns: Type Description List[Member] A list of lefi.Member instances. Source code in lefi/objects/guild.py async def fetch_members ( self , * , limit : int = 100 , after : Optional [ int ] = None ) -> List [ Member ]: \"\"\" Fetches the guild's members. Parameters: limit (int): The number of members to fetch. after (int): The id of the member to start at. Returns: A list of [lefi.Member](./member.md) instances. \"\"\" data = await self . _state . http . list_guild_members ( self . id , limit = limit , after = after ) return [ self . _state . create_member ( payload , self ) for payload in data ]","title":"fetch_members()"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.fetch_roles","text":"Fetches the guild's roles. Returns: Type Description List[Role] A list of lefi.Role instances. Source code in lefi/objects/guild.py async def fetch_roles ( self ) -> List [ Role ]: \"\"\" Fetches the guild's roles. Returns: A list of [lefi.Role](./role.md) instances. \"\"\" data = await self . _state . http . get_guild_roles ( self . id ) return [ Role ( self . _state , payload , self ) for payload in data ]","title":"fetch_roles()"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.fetch_prune_count","text":"Fetches the number of members that would be pruned. Parameters: Name Type Description Default days int The number of days to prune for. 7 roles List[lefi.Role] The roles to include. None Returns: Type Description int The number of members that would be pruned. Source code in lefi/objects/guild.py async def fetch_prune_count ( self , * , days : int = 7 , roles : Optional [ List [ Role ]] = None ) -> int : \"\"\" Fetches the number of members that would be pruned. Parameters: days (int): The number of days to prune for. roles (List[lefi.Role]): The roles to include. Returns: The number of members that would be pruned. \"\"\" include_roles = [ r . id for r in roles ] if roles else None data = await self . _state . http . get_guild_prune_count ( guild_id = self . id , days = days , include_roles = include_roles ) return data [ \"pruned\" ]","title":"fetch_prune_count()"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.prune","text":"Prunes the guild. Parameters: Name Type Description Default days int The number of days to prune for. 7 roles List[lefi.Role] The roles to include. None Returns: Type Description Optional[int] The number of members that were pruned. Source code in lefi/objects/guild.py async def prune ( self , * , days : int = 7 , roles : Optional [ List [ Role ]] = None , compute_prune_count : bool = True , ) -> Optional [ int ]: \"\"\" Prunes the guild. Parameters: days (int): The number of days to prune for. roles (List[lefi.Role]): The roles to include. Returns: The number of members that were pruned. \"\"\" include_roles = [ r . id for r in roles ] if roles else None data = await self . _state . http . begin_guild_prune ( guild_id = self . id , days = days , include_roles = include_roles , compute_prune_count = compute_prune_count , ) if compute_prune_count : return data [ \"pruned\" ] return None","title":"prune()"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.fetch_voice_regions","text":"Fetches the guild's voice regions. Returns: Type Description List[VoiceRegion] A list of lefi.VoiceRegion instances. Source code in lefi/objects/guild.py async def fetch_voice_regions ( self ) -> List [ VoiceRegion ]: \"\"\" Fetches the guild's voice regions. Returns: A list of [lefi.VoiceRegion](./voiceregion.md) instances. \"\"\" data = await self . _state . http . get_guild_voice_regions ( self . id ) return [ VoiceRegion ( payload ) for payload in data ]","title":"fetch_voice_regions()"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.query","text":"Queries the guild for a specific string. Parameters: Name Type Description Default q str The query string. required limit int The maximum number of results to return. 1 Returns: Type Description MemberIterator A list of lefi.Member instances. Source code in lefi/objects/guild.py def query ( self , q : str , * , limit : int = 1 ) -> MemberIterator : \"\"\" Queries the guild for a specific string. Parameters: q (str): The query string. limit (int): The maximum number of results to return. Returns: A list of [lefi.Member](./member.md) instances. \"\"\" coro = self . _state . http . search_guild_members ( self . id , query = q , limit = limit ) return MemberIterator ( self . _state , self , coro )","title":"query()"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.audit_logs","text":"Returns an iterator for the guild's audit logs. Examples: async for entry in guild . audit_logs (): print ( f \"Action: { entry . action . name } . Target: { entry . target } . Reason: { entry . reason } \" ) for change in entry . changes : print ( f \"Change: { change . key } - { change . before } -> { change . after } \" ) Source code in lefi/objects/guild.py def audit_logs ( self , * , user : Optional [ Snowflake ] = None , action : Optional [ AuditLogsEvent ] = None , limit : Optional [ int ] = None , ) -> AuditLogIterator : \"\"\" Returns an iterator for the guild's audit logs. Example: ```py async for entry in guild.audit_logs(): print(f\"Action: {entry.action.name}. Target: {entry.target}. Reason: {entry.reason}\") for change in entry.changes: print(f\"Change: {change.key} - {change.before} -> {change.after}\") ``` \"\"\" user_id = user . id if user else None action_type = action . value if action else None coro = self . _state . http . get_guild_audit_log ( guild_id = self . id , user_id = user_id , action_type = action_type , limit = limit ) return AuditLogIterator ( self . _state , self , coro )","title":"audit_logs()"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.fetch_active_threads","text":"Fetches the guild's active threads. Returns: Type Description List[Thread] A list of lefi.Thread instances. Source code in lefi/objects/guild.py async def fetch_active_threads ( self ) -> List [ Thread ]: \"\"\" Fetches the guild's active threads. Returns: A list of [lefi.Thread](./thread.md) instances. \"\"\" data = await self . _state . http . list_active_threads ( self . id ) return self . _create_threads ( data )","title":"fetch_active_threads()"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.change_voice_state","text":"Changes the guild's voice state. Parameters: Name Type Description Default channel lefi.VoiceChannel The voice channel to move to. None self_mute bool Whether to mute the bot. False self_deaf bool Whether to deafen the bot. False Source code in lefi/objects/guild.py async def change_voice_state ( self , * , channel : Optional [ VoiceChannel ] = None , self_mute : bool = False , self_deaf : bool = False , ) -> None : \"\"\" Changes the guild's voice state. Parameters: channel (lefi.VoiceChannel): The voice channel to move to. self_mute (bool): Whether to mute the bot. self_deaf (bool): Whether to deafen the bot. \"\"\" ws = self . _state . get_websocket ( self . id ) await ws . change_guild_voice_state ( self . id , channel . id if channel else None , self_mute , self_deaf )","title":"change_voice_state()"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.get_member","text":"Gets a member from the guilds member cache. Parameters: Name Type Description Default member_id int The ID of the member. required Returns: Type Description Optional[Member] The lefi.Member instance corresponding to the ID if found. Source code in lefi/objects/guild.py def get_member ( self , member_id : int ) -> Optional [ Member ]: \"\"\" Gets a member from the guilds member cache. Parameters: member_id (int): The ID of the member. Returns: The [lefi.Member](./member.md) instance corresponding to the ID if found. \"\"\" return self . _members . get ( member_id )","title":"get_member()"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.get_channel","text":"Gets a channel from the guilds channel cache. Parameters: Name Type Description Default channel_id int The ID of the channel. required Returns: Type Description Optional[GuildChannels] The lefi.Channel instance corresponding to the ID if found. Source code in lefi/objects/guild.py def get_channel ( self , channel_id : int ) -> Optional [ GuildChannels ]: \"\"\" Gets a channel from the guilds channel cache. Parameters: channel_id (int): The ID of the channel. Returns: The [lefi.Channel](./channel.md) instance corresponding to the ID if found. \"\"\" return self . _channels . get ( channel_id )","title":"get_channel()"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.get_role","text":"Gets a role from the guilds role cache. Parameters: Name Type Description Default role_id int The ID of the role. required Returns: Type Description Optional[Role] The lefi.Role instance corresponding to the ID if found. Source code in lefi/objects/guild.py def get_role ( self , role_id : int ) -> Optional [ Role ]: \"\"\" Gets a role from the guilds role cache. Parameters: role_id (int): The ID of the role. Returns: The [lefi.Role](./role.md) instance corresponding to the ID if found. \"\"\" return self . _roles . get ( role_id )","title":"get_role()"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.get_emoji","text":"Gets an emoji from the guilds emoji cache. Parameters: Name Type Description Default emoji_id int The ID of the emoji. required Returns: Type Description Optional[Emoji] The lefi.Emoji instance corresponding to the ID if found. Source code in lefi/objects/guild.py def get_emoji ( self , emoji_id : int ) -> Optional [ Emoji ]: \"\"\" Gets an emoji from the guilds emoji cache. Parameters: emoji_id (int): The ID of the emoji. Returns: The [lefi.Emoji](./emoji.md) instance corresponding to the ID if found. \"\"\" return self . _emojis . get ( emoji_id )","title":"get_emoji()"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.get_voice_state","text":"Gets a voice state from the guilds voice state cache. Parameters: Name Type Description Default member_id int The ID of the member. required Returns: Type Description Optional[VoiceState] The lefi.VoiceState instance corresponding to the ID if found. Source code in lefi/objects/guild.py def get_voice_state ( self , member_id : int ) -> Optional [ VoiceState ]: \"\"\" Gets a voice state from the guilds voice state cache. Parameters: member_id (int): The ID of the member. Returns: The [lefi.VoiceState][] instance corresponding to the ID if found. \"\"\" return self . _voice_states . get ( member_id )","title":"get_voice_state()"},{"location":"API-Reference/guild/#lefi.objects.guild.Guild.get_thread","text":"Gets a thread from the guilds thread cache. Parameters: Name Type Description Default thread_id int The ID of the thread. required Returns: Type Description Optional[Thread] The lefi.Thread instance corresponding to the ID if found. Source code in lefi/objects/guild.py def get_thread ( self , thread_id : int ) -> Optional [ Thread ]: \"\"\" Gets a thread from the guilds thread cache. Parameters: thread_id (int): The ID of the thread. Returns: The [lefi.Thread](./thread.md) instance corresponding to the ID if found. \"\"\" return self . _threads . get ( thread_id )","title":"get_thread()"},{"location":"API-Reference/http/","text":"A class used to send and handle requests to the discord API. Attributes: Name Type Description token str The clients token, used for authorization. loop asyncio.AbstractEventLoop The asyncio.AbstractEventLoop being used. session aiohttp.ClientSession The aiohttp.ClientSession to use for sending requests. Danger This class is used internally, this is not intended to be called directly . __init__ ( self , token , loop ) special Parameters: Name Type Description Default token str The token to use for authorzation. required loop asyncio.AbstractEventLoop The asyncio.AbstractEventLoop to use. required session aiohttp.ClientSession The aiohttp.ClientSession to use for sending requests. required Source code in lefi/http.py def __init__ ( self , token : str , loop : asyncio . AbstractEventLoop ) -> None : \"\"\" Parameters: token (str): The token to use for authorzation. loop (asyncio.AbstractEventLoop): The [asyncio.AbstractEventLoop][] to use. session (aiohttp.ClientSession): The [aiohttp.ClientSession][] to use for sending requests. \"\"\" self . token : str = token self . loop : asyncio . AbstractEventLoop = loop self . session : aiohttp . ClientSession = None # type: ignore self . semaphores : Dict [ str , asyncio . Semaphore ] = {} close ( self ) async Closes the aiohttp.ClientSession instance. Source code in lefi/http.py async def close ( self ) -> None : \"\"\" Closes the [aiohttp.ClientSession][] instance. \"\"\" await self . session . close () request ( self , method , route , ** kwargs ) async Makes a request to the discord API. Parameters: Name Type Description Default method str The method for the request. required route lefi.Route The endpoint which to send the request to. required **kwargs Any Any extra options to pass to aiohttp.ClientSession.request {} Returns: Type Description Any The data returned from the request. Source code in lefi/http.py async def request ( self , method : str , route : Route , ** kwargs ) -> Any : \"\"\" Makes a request to the discord API. Parameters: method (str): The method for the request. route (lefi.Route): The endpoint which to send the request to. **kwargs (Any): Any extra options to pass to [aiohttp.ClientSession.request][] Returns: The data returned from the request. Raises: [lefi.errors.HTTPException][] if any error was received from the request. \"\"\" if self . session is None or self . session . closed : self . session = await self . _create_session () headers : Dict = { \"Authorization\" : f \"Bot { self . token } \" } if reason := kwargs . get ( \"reason\" ): headers [ \"X-Audit-Log-Reason\" ] = reason if form := kwargs . pop ( \"form\" , []): formdata = aiohttp . FormData () payload = kwargs . pop ( \"json\" , None ) if payload : formdata . add_field ( \"payload_json\" , value = json . dumps ( payload )) for params in form : formdata . add_field ( ** params ) kwargs [ \"data\" ] = formdata async with Ratelimiter ( self , route , method , ** kwargs , headers = headers ) as handler : return await handler . request () get_bot_gateway ( self ) async A method which gets the gateway url. Returns: Type Description Dict A dict which should contain the url. Source code in lefi/http.py async def get_bot_gateway ( self ) -> Dict : \"\"\" A method which gets the gateway url. Returns: A dict which should contain the url. \"\"\" return await self . request ( \"GET\" , Route ( \"/gateway/bot\" )) ws_connect ( self , url ) async A method which attempts to connect to the websocket. Returns: Type Description aiohttp.ClientWebSocketResponse A aiohttp.ClientWebSocketResponse instance. Source code in lefi/http.py async def ws_connect ( self , url : str ) -> aiohttp . ClientWebSocketResponse : \"\"\" A method which attempts to connect to the websocket. Returns: A [aiohttp.ClientWebSocketResponse][] instance. \"\"\" return await self . session . ws_connect ( url ) read_from_url ( self , url ) async A method which reads the data from a url. Parameters: Name Type Description Default url str The url to read from. required Returns: Type Description bytes The data read from the url. Source code in lefi/http.py async def read_from_url ( self , url : str ) -> bytes : \"\"\" A method which reads the data from a url. Parameters: url (str): The url to read from. Returns: The data read from the url. \"\"\" async with self . session . get ( url ) as resp : return await resp . read () login ( self ) async Checks to see if the token given is valid. Source code in lefi/http.py async def login ( self ) -> None : \"\"\" Checks to see if the token given is valid. Raises: ValueError if an invalid token was passed. \"\"\" try : await self . get_current_user () except ( Forbidden , Unauthorized ): raise ValueError ( \"Invalid token\" ) build_file_form ( self , file , index = None ) Builds a form for a file upload. Parameters: Name Type Description Default file lefi.File The file to upload. required index Optional[int] The index of the file. None Returns: Type Description Dict A dict which can be used as a form for a file upload. Source code in lefi/http.py def build_file_form ( self , file : File , index : Optional [ int ] = None ) -> Dict : \"\"\" Builds a form for a file upload. Parameters: file (lefi.File): The file to upload. index (Optional[int]): The index of the file. Returns: A dict which can be used as a form for a file upload. \"\"\" return { \"name\" : f \"file- { index } \" if index else \"file\" , \"value\" : file , \"filename\" : file . filename , \"content_type\" : \"application/octect-stream\" , } form_helper ( self , files = None ) A helper method which formats the files to be sent in a multipart/form-data request. Parameters: Name Type Description Default files Optional[List[lefi.File]] The files to send. None Returns: Type Description List[Dict] A list which should contain the files. Source code in lefi/http.py def form_helper ( self , files : Optional [ List [ Optional [ File ]]] = None ) -> List [ Dict ]: \"\"\" A helper method which formats the files to be sent in a multipart/form-data request. Parameters: files (Optional[List[lefi.File]]): The files to send. Returns: A list which should contain the files. \"\"\" form : List [ Dict ] = [] if not files : return form if len ( files ) == 1 : file = files [ 0 ] if not file : return form form . append ( self . build_file_form ( file )) return form for index , file in enumerate ( files ): if not file : continue param = self . build_file_form ( file , index ) form . append ( param ) return form get_channel ( self , channel_id ) async Makes an API call to get a channel. Parameters: Name Type Description Default channel_id int The channel's ID. required Returns: Type Description Dict[str, Any] A dict representing the channel. Source code in lefi/http.py async def get_channel ( self , channel_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a channel. Parameters: channel_id (int): The channel's ID. Returns: A dict representing the channel. \"\"\" return await self . request ( \"GET\" , Route ( f \"/channels/ { channel_id } \" , channel_id = channel_id ) ) edit_text_channel ( self , channel_id , * , name = None , type = None , position = None , topic = None , nsfw = None , rate_limit_per_user = None , permission_overwrites = None , default_auto_archive_duration = None ) async Makes an API call to edit a text channel. Parameters: Name Type Description Default channel_id int The channel id representing the channel to edit. required name Optional[str] The new name for the channel. None type Optional[int] The new type for the channel. None position Optional[int] The new position for the channel. None topic Optional[str] The new topic for the channel. None nsfw Optional[bool] Whether or not the channel should be NSFW. None rate_limit_per_user Optional[int] The new slowmode of the channel. None permissions_overwrites Optional[List[Dict[str, Any]]] The new permission overwrites for the channel. required default_auto_archive_duration Optional[List[Dict[str, Any]]] New time for threads to auto archive. None Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def edit_text_channel ( self , channel_id : int , * , name : Optional [ str ] = None , type : Optional [ int ] = None , position : Optional [ int ] = None , topic : Optional [ str ] = None , nsfw : Optional [ bool ] = None , rate_limit_per_user : Optional [ int ] = None , permission_overwrites : Optional [ List [ Dict [ str , Any ]]] = None , default_auto_archive_duration : Optional [ int ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to edit a text channel. Parameters: channel_id (int): The channel id representing the channel to edit. name (Optional[str]): The new name for the channel. type (Optional[int]): The new type for the channel. position (Optional[int]): The new position for the channel. topic (Optional[str]): The new topic for the channel. nsfw (Optional[bool]): Whether or not the channel should be NSFW. rate_limit_per_user (Optional[int]): The new slowmode of the channel. permissions_overwrites (Optional[List[Dict[str, Any]]]): The new permission overwrites for the channel. default_auto_archive_duration (Optional[List[Dict[str, Any]]]): New time for threads to auto archive. Returns: The data received from the API after making the call. \"\"\" payload = update_payload ( {}, name = name , type = type , position = position , topic = topic , nsfw = nsfw , rate_limit_per_user = rate_limit_per_user , permission_overwrites = permission_overwrites , default_auto_archive_duration = default_auto_archive_duration , ) return await self . request ( \"PATCH\" , Route ( f \"/channels/ { channel_id } \" , channel_id = channel_id ), json = payload , ) edit_voice_channel ( self , channel_id , * , name = None , position = None , bitrate = None , user_limit = None , rtc_region = None , video_quality_mode = None , sync_permissions = None , permission_overwrites = None ) async Makes an API call to edit a voice channel. Parameters: Name Type Description Default channel_id int The ID representing the voice channel to edit. required name Optional[str] The new name to give the channel. None position Optional[int] The new position of the channel. None bitrate Optional[int] The new bitrate of the channel. None user_limit Optional[int] The new user limit of the channel. None rtc_region Optional[str] The new rtc region of the channel. None video_quality_mode Optional[int] The new video quality of the channel. None sync_permissions Optional[bool] Whether or not to sync the permissions. None permissions_overwrites Optional[List[Dict[str, Any]]] The new permissions ovewrites for the channel. required Returns: Type Description Dict[str, Any] The data received from the API after the call. Source code in lefi/http.py async def edit_voice_channel ( self , channel_id : int , * , name : Optional [ str ] = None , position : Optional [ int ] = None , bitrate : Optional [ int ] = None , user_limit : Optional [ int ] = None , rtc_region : Optional [ str ] = None , video_quality_mode : Optional [ int ] = None , sync_permissions : Optional [ bool ] = None , permission_overwrites : Optional [ List [ Dict [ str , Any ]]] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to edit a voice channel. Parameters: channel_id (int): The ID representing the voice channel to edit. name (Optional[str]): The new name to give the channel. position (Optional[int]): The new position of the channel. bitrate (Optional[int]): The new bitrate of the channel. user_limit (Optional[int]): The new user limit of the channel. rtc_region (Optional[str]): The new rtc region of the channel. video_quality_mode (Optional[int]): The new video quality of the channel. sync_permissions (Optional[bool]): Whether or not to sync the permissions. permissions_overwrites (Optional[List[Dict[str, Any]]]): The new permissions ovewrites for the channel. Returns: The data received from the API after the call. \"\"\" payload = update_payload ( {}, name = name , position = position , bitrate = bitrate , user_limit = user_limit , rtc_region = rtc_region , video_quality_mode = video_quality_mode , sync_permissions = sync_permissions , permissions_overwrites = permission_overwrites , ) return await self . request ( \"PATCH\" , Route ( f \"/channels/ { channel_id } \" , channel_id = channel_id ), json = payload , ) delete_channel ( self , channel_id ) async Makes an API call to delete a channel. Parameters: Name Type Description Default channel_id int The ID representing the channel to delete. required Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def delete_channel ( self , channel_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to delete a channel. Parameters: channel_id (int): The ID representing the channel to delete. Returns: The data received from the API after making the call. \"\"\" return await self . request ( \"DELETE\" , Route ( f \"/channels/ { channel_id } \" , channel_id = channel_id ) ) get_channel_messages ( self , channel_id , * , around = None , before = None , after = None , limit = 50 ) async Makes an API call to get a list of messages in a channel. Only returns messages within the range of the parameters passed. Parameters: Name Type Description Default channel_id int The ID representing the channel. required around Optional[int] Gets messages around this message ID. None before Optional[int] Gets messages before this message ID. None after Optional[int] Gets messages after this message ID. None limit int THe amount of messages to grab. 50 Returns: Type Description List[Dict[str, Any]] The data received after making the call. Source code in lefi/http.py async def get_channel_messages ( self , channel_id : int , * , around : Optional [ int ] = None , before : Optional [ int ] = None , after : Optional [ int ] = None , limit : int = 50 , ) -> List [ Dict [ str , Any ]]: \"\"\" Makes an API call to get a list of messages in a channel. Only returns messages within the range of the parameters passed. Parameters: channel_id (int): The ID representing the channel. around (Optional[int]): Gets messages around this message ID. before (Optional[int]): Gets messages before this message ID. after (Optional[int]): Gets messages after this message ID. limit (int): THe amount of messages to grab. Returns: The data received after making the call. \"\"\" params = { \"limit\" : limit } update_payload ( params , around = around , before = before , after = after ) return await self . request ( \"GET\" , Route ( f \"/channels/ { channel_id } /messages\" , channel_id = channel_id ), params = params , ) get_channel_message ( self , channel_id , message_id ) async Makes an API call to get a specific message by ID. Parameters: Name Type Description Default channel_id int The channel ID which the message is in. required message_id int The messages ID. required Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def get_channel_message ( self , channel_id : int , message_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a specific message by ID. Parameters: channel_id (int): The channel ID which the message is in. message_id (int): The messages ID. Returns: The data received from the API after making the call. \"\"\" return await self . request ( \"GET\" , Route ( f \"/channels/ { channel_id } /messages/ { message_id } \" , channel_id = channel_id ), ) send_message ( self , channel_id , content = None , * , tts = False , embeds = None , allowed_mentions = None , message_reference = None , components = None , sticker_ids = None , files = None ) async Makes an API call to send a message. Parameters: Name Type Description Default channel_id int The ID of the channel which to send the message in. required content Optional[str] The content of the message. None tts bool Whether or not to send the message with text-to-speech. False embeds Optional[List[Dict[str, Any]]] The list of embeds to send. None message_reference Optional[Dict[str, Any]] The messages to reference when sending the message. None components Optional[List[Dict[str, Any]]] The components to attach to the message. None sticker_ids Optional[List[int]] The stickers to send with the message. None Note Max embeds that can sent at a time is 10. Source code in lefi/http.py async def send_message ( self , channel_id : int , content : Optional [ str ] = None , * , tts : bool = False , embeds : Optional [ List [ Dict [ str , Any ]]] = None , allowed_mentions : Optional [ Dict [ str , Any ]] = None , message_reference : Optional [ Dict [ str , Any ]] = None , components : Optional [ List [ Dict [ str , Any ]]] = None , sticker_ids : Optional [ List [ int ]] = None , files : Optional [ List [ File ]] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to send a message. Parameters: channel_id (int): The ID of the channel which to send the message in. content (Optional[str]): The content of the message. tts (bool): Whether or not to send the message with text-to-speech. embeds (Optional[List[Dict[str, Any]]]): The list of embeds to send. message_reference (Optional[Dict[str, Any]]): The messages to reference when sending the message. components (Optional[List[Dict[str, Any]]]): The components to attach to the message. sticker_ids (Optional[List[int]]): The stickers to send with the message. Note: Max embeds that can sent at a time is 10. \"\"\" payload = { \"tts\" : tts } form = self . form_helper ( files ) # type: ignore update_payload ( payload , content = content , embeds = embeds , allowed_mentions = allowed_mentions , message_reference = message_reference , components = components , sticker_ids = sticker_ids , ) return await self . request ( \"POST\" , Route ( f \"/channels/ { channel_id } /messages\" , channel_id = channel_id ), json = payload , form = form , ) crosspost_message ( self , channel_id , message_id ) async Makes an API call to crosspost a message. Parameters: Name Type Description Default channel_id int The ID of the channel to crosspost to. required message_id int The ID of the message which to crosspost. required Returns: Type Description Dict[str, Any] The data received after making the call. Source code in lefi/http.py async def crosspost_message ( self , channel_id : int , message_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to crosspost a message. Parameters: channel_id (int): The ID of the channel to crosspost to. message_id (int): The ID of the message which to crosspost. Returns: The data received after making the call. \"\"\" return await self . request ( \"POST\" , Route ( f \"/channels/ { channel_id } /messages/ { message_id } /crosspost\" , channel_id = channel_id , ), ) create_reaction ( self , channel_id , message_id , emoji ) async Makes an API call to add a reaction to a message. Parameters: Name Type Description Default channel_id int The ID of the channel which the target message is in. required message_id int The ID of the message which to add the reaction to. required emoji str The emoji which to add. required Returns: Type Description The data received from the API after making the call. Source code in lefi/http.py async def create_reaction ( self , channel_id : int , message_id : int , emoji : str ): \"\"\" Makes an API call to add a reaction to a message. Parameters: channel_id (int): The ID of the channel which the target message is in. message_id (int): The ID of the message which to add the reaction to. emoji (str): The emoji which to add. Returns: The data received from the API after making the call. \"\"\" return await self . request ( \"PUT\" , Route ( f \"/channels/ { channel_id } /messages/ { message_id } /reactions/ { emoji } /@me\" , channel_id = channel_id , ), ) delete_reaction ( self , channel_id , message_id , emoji , user_id = None ) async Makes an API call to delete a reaction. Parameters: Name Type Description Default channel_id int The ID of the channel which the target message is in. required message_id int The ID of the message. required emoji str The emoji to remove from the message's reactions. required user_id Optional[int] The ID of the user to remove from the reactions. None Returns: Type Description None The data received from the API after making the call. Note If no user_id is given it will delete the client's reaction. Source code in lefi/http.py async def delete_reaction ( self , channel_id : int , message_id : int , emoji : str , user_id : Optional [ int ] = None , ) -> None : \"\"\" Makes an API call to delete a reaction. Parameters: channel_id (int): The ID of the channel which the target message is in. message_id (int): The ID of the message. emoji (str): The emoji to remove from the message's reactions. user_id (Optional[int]): The ID of the user to remove from the reactions. Returns: The data received from the API after making the call. Note: If no user_id is given it will delete the client's reaction. \"\"\" if user_id is not None : path = f \"/channels/ { channel_id } /messages/ { message_id } /reactions/ { emoji } / { user_id } \" else : path = f \"/channels/ { channel_id } /messages/ { message_id } /reactions/ { emoji } /@me\" await self . request ( \"DELETE\" , Route ( path , channel_id = channel_id )) get_reactions ( self , channel_id , message_id , emoji , * , after = None , limit = 25 ) async Makes an API call to get a list of users who reacted to a message.. Parameters: Name Type Description Default channel_id int The ID of the channel which the target message is in. required message_id int The ID of the message. required emoji str The emoji from which to grab users from. required after int Grab users after this user ID. None limit int The max amount of users to grab. 25 Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def get_reactions ( self , channel_id : int , message_id : int , emoji : str , * , after : Optional [ int ] = None , limit : int = 25 , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a list of users who reacted to a message.. Parameters: channel_id (int): The ID of the channel which the target message is in. message_id (int): The ID of the message. emoji (str): The emoji from which to grab users from. after (int): Grab users after this user ID. limit (int): The max amount of users to grab. Returns: The data received from the API after making the call. \"\"\" params = { \"limit\" : limit } update_payload ( params , after = after ) return await self . request ( \"GET\" , Route ( f \"/channels/ { channel_id } /messages/ { message_id } /reactions/ { emoji } \" , channel_id = channel_id , ), params = params , ) delete_all_reactions ( self , channel_id , message_id , emoji ) async Makes an API call to remove all reactions of a message. Parameters: Name Type Description Default channel_id int The channel which the target message is in. required message_id int The ID of the message. required emoji str The reaction to remove. required Returns: Type Description Dict[str, Any] The data received from the API After making the call. Source code in lefi/http.py async def delete_all_reactions ( self , channel_id : int , message_id : int , emoji : str ) -> Dict [ str , Any ]: \"\"\" Makes an API call to remove all reactions of a message. Parameters: channel_id (int): The channel which the target message is in. message_id (int): The ID of the message. emoji (str): The reaction to remove. Returns: The data received from the API After making the call. \"\"\" return await self . request ( \"DELETE\" , Route ( f \"/channels/ { channel_id } /messages/ { message_id } /reactions/ { emoji } \" , channel_id = channel_id , ), ) edit_message ( self , channel_id , message_id , * , content = None , embeds = None , flags = None , allowed_mentions = None , attachments = None , components = None ) async Makes an API call to edit a message. Parameters: Name Type Description Default channel_id int The ID of the channel which the target message is in. required message_id int The ID of the message. required content Optional[str] The new content of the message. None embeds Optional[List[Dict[str, Any]]] The new embeds of the message. None flags Optional[int] The new flags of the message. None allowed_mentions Optional[int] The new allowed mentions of the message. None attachments Optional[List[Dict[str, Any]]] The new attachments of the message. None components Optional[List[Dict[str, Any]]] The new components of the message. None Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def edit_message ( self , channel_id : int , message_id : int , * , content : Optional [ str ] = None , embeds : Optional [ List [ Dict [ str , Any ]]] = None , flags : Optional [ int ] = None , allowed_mentions : Optional [ Dict [ str , Any ]] = None , attachments : Optional [ List [ Dict [ str , Any ]]] = None , components : Optional [ List [ Dict [ str , Any ]]] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to edit a message. Parameters: channel_id (int): The ID of the channel which the target message is in. message_id (int): The ID of the message. content (Optional[str]): The new content of the message. embeds (Optional[List[Dict[str, Any]]]): The new embeds of the message. flags (Optional[int]): The new flags of the message. allowed_mentions (Optional[int]): The new allowed mentions of the message. attachments (Optional[List[Dict[str, Any]]]): The new attachments of the message. components (Optional[List[Dict[str, Any]]]): The new components of the message. Returns: The data received from the API after making the call. \"\"\" payload : dict = {} update_payload ( payload , content = content , embeds = embeds , flags = flags , allowed_mentions = allowed_mentions , attachments = attachments , components = components , ) return await self . request ( \"PATCH\" , Route ( f \"/channels/ { channel_id } /messages/ { message_id } \" , channel_id = channel_id ), json = payload , ) delete_message ( self , channel_id , message_id ) async Makes an API call to delete a message. Parameters: Name Type Description Default channel_id int The ID of the channel which the message is in. required message_id int The ID Of the message. required Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def delete_message ( self , channel_id : int , message_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to delete a message. Parameters: channel_id (int): The ID of the channel which the message is in. message_id (int): The ID Of the message. Returns: The data received from the API after making the call. \"\"\" return await self . request ( \"DELETE\" , Route ( f \"/channels/ { channel_id } /messages/ { message_id } \" , channel_id = channel_id ), ) bulk_delete_messages ( self , channel_id , message_ids ) async Makes an API call to delete multiple messages. Parameters: Name Type Description Default channel_id int The ID of the channel which the message is in. required message_ids List[int] The list of ID's representing messages of which to delete. required Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def bulk_delete_messages ( self , channel_id : int , message_ids : List [ int ] ) -> Dict [ str , Any ]: \"\"\" Makes an API call to delete multiple messages. Parameters: channel_id (int): The ID of the channel which the message is in. message_ids (List[int]): The list of ID's representing messages of which to delete. Returns: The data received from the API after making the call. \"\"\" payload = { \"messages\" : message_ids } return await self . request ( \"POST\" , Route ( f \"/channels/ { channel_id } /messages/bulk-delete\" , channel_id = channel_id ), json = payload , ) edit_channel_permissions ( self , channel_id , overwrite_id , * , allow = None , deny = None , type = None ) async Makes an API call to edit a channels permissions. Parameters: Name Type Description Default channel_id int The ID of the channel. required overwrite_id int The ID of the overwrite. required allow Optional[int] The bitwise value of all allowed permissions. None deny Optional[int] The bitwise value of all denied permissison. None type Optional[int] The type, 0 being a role and 1 being a member. None Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def edit_channel_permissions ( self , channel_id : int , overwrite_id : int , * , allow : Optional [ int ] = None , deny : Optional [ int ] = None , type : Optional [ int ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to edit a channels permissions. Parameters: channel_id (int): The ID of the channel. overwrite_id (int): The ID of the overwrite. allow (Optional[int]): The bitwise value of all allowed permissions. deny (Optional[int]): The bitwise value of all denied permissison. type (Optional[int]): The type, 0 being a role and 1 being a member. Returns: The data received from the API after making the call. \"\"\" payload : dict = {} update_payload ( payload , allow = allow , deny = deny , type = type ) return await self . request ( \"PUT\" , Route ( f \"/channels/ { channel_id } /permissions/ { overwrite_id } \" , channel_id = channel_id , ), json = payload , ) delete_channel_permissions ( self , channel_id , overwrite_id ) async Makes an API call to delete an overwrite from a channel. Parameters: Name Type Description Default channel_id int The ID of the channel. required overwrite_id int The ID of the overwrite. required Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def delete_channel_permissions ( self , channel_id : int , overwrite_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to delete an overwrite from a channel. Parameters: channel_id (int): The ID of the channel. overwrite_id (int): The ID of the overwrite. Returns: The data received from the API after making the call. \"\"\" return await self . request ( \"DELETE\" , Route ( f \"/channels/ { channel_id } /permissions/ { overwrite_id } \" , channel_id = channel_id , ), ) get_channel_invites ( self , channel_id ) async Makes an API call to get a channels invites. Parameters: Name Type Description Default channel_id int The ID of the channel. required Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def get_channel_invites ( self , channel_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a channels invites. Parameters: channel_id (int): The ID of the channel. Returns: The data received from the API after making the call. \"\"\" return await self . request ( \"GET\" , Route ( f \"/channels/ { channel_id } /invites\" , channel_id = channel_id ) ) create_channel_invite ( self , channel_id , * , max_age = 86400 , max_uses = 0 , temporary = False , unique = False , target_type = None , target_user_id = None , target_application_id = None ) async Makes an API call to create an invite. Parameters: Name Type Description Default channel_id int The ID of the channel. required max_age int The max age of the invite. 86400 max_uses int The max uses of the invite. 0 if unlimited. 0 temporary bool Whether or not the invite is temporary. False unique bool Whether or not the invite is unique. False target_type Optional[int] The type of the invite. For voice channels. None target_user_id Optional[int] The ID of the user whose stream to invite to. For voice channels. None target_application_id Optional[int] The ID of embedded application to invite from. For target type 2. None Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def create_channel_invite ( self , channel_id : int , * , max_age : int = 86400 , max_uses : int = 0 , temporary : bool = False , unique : bool = False , target_type : Optional [ int ] = None , target_user_id : Optional [ int ] = None , target_application_id : Optional [ int ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to create an invite. Parameters: channel_id (int): The ID of the channel. max_age (int): The max age of the invite. max_uses (int): The max uses of the invite. 0 if unlimited. temporary (bool): Whether or not the invite is temporary. unique (bool): Whether or not the invite is unique. target_type (Optional[int]): The type of the invite. For voice channels. target_user_id (Optional[int]): The ID of the user whose stream to invite to. For voice channels. target_application_id (Optional[int]): The ID of embedded application to invite from. For target type 2. Returns: The data received from the API after making the call. \"\"\" payload = { \"max_age\" : max_age , \"max_uses\" : max_uses , \"temporary\" : temporary , \"unique\" : unique , } update_payload ( payload , target_type = target_type , target_user_id = target_user_id , target_application_id = target_application_id , ) return await self . request ( \"POST\" , Route ( f \"/channels/ { channel_id } /invites\" , channel_id = channel_id ), json = payload , ) follow_news_channel ( self , channel_id , webhook_channel_id ) async Makes an API call to follow a news channel to send messages to a target channel. Parameters: Name Type Description Default channel_id int The ID Of the channel. required webhook_channel_id int The target channel. required Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def follow_news_channel ( self , channel_id : int , webhook_channel_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to follow a news channel to send messages to a target channel. Parameters: channel_id (int): The ID Of the channel. webhook_channel_id (int): The target channel. Returns: The data received from the API after making the call. \"\"\" payload = { \"webhook_channel_id\" : webhook_channel_id } return await self . request ( \"PUT\" , Route ( f \"/channels/ { channel_id } /followers/@me\" , channel_id = channel_id ), json = payload , ) trigger_typing ( self , channel_id ) async Makes an API call to trigger typing. Parameters: Name Type Description Default channel_id int The ID of the channel which to trigger typing in. required Returns: Type Description Dict[str, Any] The data received from the API After making the call. Source code in lefi/http.py async def trigger_typing ( self , channel_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to trigger typing. Parameters: channel_id (int): The ID of the channel which to trigger typing in. Returns: The data received from the API After making the call. \"\"\" return await self . request ( \"POST\" , Route ( f \"/channels/ { channel_id } /typing\" , channel_id = channel_id ) ) get_pinned_messages ( self , channel_id ) async Makes an API call to get the pinned messages of a channel. Parameters: Name Type Description Default channel_id int The ID of the channel which to grab pinned messages from. required Returns: Type Description List[Dict[str, Any]] The data received from the API after making the call. Source code in lefi/http.py async def get_pinned_messages ( self , channel_id : int ) -> List [ Dict [ str , Any ]]: \"\"\" Makes an API call to get the pinned messages of a channel. Parameters: channel_id (int): The ID of the channel which to grab pinned messages from. Returns: The data received from the API after making the call. \"\"\" return await self . request ( \"GET\" , Route ( f \"/channels/ { channel_id } /pins\" , channel_id = channel_id ) ) pin_message ( self , channel_id , message_id ) async Makes an API call to pin a message. Parameters: Name Type Description Default channel_id int The ID of the channel where the message is. required message_id int The ID of the message. required Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def pin_message ( self , channel_id : int , message_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to pin a message. Parameters: channel_id (int): The ID of the channel where the message is. message_id (int): The ID of the message. Returns: The data received from the API after making the call. \"\"\" return await self . request ( \"PUT\" , Route ( f \"/channels/ { channel_id } /pins/ { message_id } \" , channel_id = channel_id ), ) unpin_message ( self , channel_id , message_id ) async Makes an API call to unpin a message. Parameters: Name Type Description Default channel_id int The ID Of the channel where the message is. required message_id int The ID of the message. required Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def unpin_message ( self , channel_id : int , message_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to unpin a message. Parameters: channel_id (int): The ID Of the channel where the message is. message_id (int): The ID of the message. Returns: The data received from the API after making the call. \"\"\" return await self . request ( \"DELETE\" , Route ( f \"/channels/ { channel_id } /pins/ { message_id } \" , channel_id = channel_id ), ) start_thread_with_message ( self , channel_id , message_id , * , name , auto_archive_duration = None ) async Makes an API call to start a thread with a message. Parameters: Name Type Description Default channel_id int The ID of the channel which the message is in. required message_id int The ID Of the message. required name str The name of the thread. required auto_archive_duration int The time it takes to auto archive the thread. None Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def start_thread_with_message ( self , channel_id : int , message_id : int , * , name : str , auto_archive_duration : Optional [ int ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to start a thread with a message. Parameters: channel_id (int): The ID of the channel which the message is in. message_id (int): The ID Of the message. name (str): The name of the thread. auto_archive_duration (int): The time it takes to auto archive the thread. Returns: The data received from the API after making the call. \"\"\" payload = update_payload ( {}, name = name , auto_archive_duration = auto_archive_duration ) return await self . request ( \"POST\" , Route ( f \"/channels/ { channel_id } /messages/ { message_id } /threads\" , channel_id = channel_id , ), json = payload , ) start_thread_without_message ( self , channel_id , * , name , auto_archive_duration = None , type = None , invitable = None ) async Makes an API call to start a thread without a message. Parameters: Name Type Description Default channel_id int The ID of the channel where the thread will be created. required name str The name of the thread. required auto_archive_duration int The time it takes to auto archive the thread. None type int The type of the thread to create. None invitable bool Whether or not members can invite other members to the thread. Only in private threads. None Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def start_thread_without_message ( self , channel_id : int , * , name : str , auto_archive_duration : Optional [ int ] = None , type : Optional [ int ] = None , invitable : Optional [ bool ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to start a thread without a message. Parameters: channel_id (int): The ID of the channel where the thread will be created. name (str): The name of the thread. auto_archive_duration (int): The time it takes to auto archive the thread. type (int): The type of the thread to create. invitable (bool): Whether or not members can invite other members to the thread. Only in private threads. Returns: The data received from the API after making the call. \"\"\" payload = update_payload ( {}, name = name , auto_archive_duration = auto_archive_duration , type = type , invitable = invitable , ) return await self . request ( \"POST\" , Route ( f \"/channels/ { channel_id } /threads\" , channel_id = channel_id ), json = payload , ) join_thread ( self , channel_id ) async Makes an API call which makes the client join the given thread. Parameters: Name Type Description Default channel_id int The ID of the thread. required Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def join_thread ( self , channel_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call which makes the client join the given thread. Parameters: channel_id (int): The ID of the thread. Returns: The data received from the API after making the call. \"\"\" return await self . request ( \"PUT\" , Route ( f \"/channels/ { channel_id } /thread-members/@me\" , channel_id = channel_id ), ) add_thread_member ( self , channel_id , user_id ) async Makes an API call which adds another member to the thread. Parameters: Name Type Description Default channel_id int The ID of the thread. required user_id int The ID of the user to add. required Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def add_thread_member ( self , channel_id : int , user_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call which adds another member to the thread. Parameters: channel_id (int): The ID of the thread. user_id (int): The ID of the user to add. Returns: The data received from the API after making the call. \"\"\" return await self . request ( \"PUT\" , Route ( f \"/channels/ { channel_id } /thread-members/ { user_id } \" , channel_id = channel_id , ), ) leave_thread ( self , channel_id ) async Makes an API call which makes the client leave the thread. Parameters: Name Type Description Default channel_id int The ID of the thread. required Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def leave_thread ( self , channel_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call which makes the client leave the thread. Parameters: channel_id (int): The ID of the thread. Returns: The data received from the API after making the call. \"\"\" return await self . request ( \"DELETE\" , Route ( f \"/channels/ { channel_id } /thread-members/@me\" , channel_id = channel_id ), ) remove_thread_member ( self , channel_id , user_id ) async Makes an API call which removes a member from the thread. Parameters: Name Type Description Default channel_id int The ID of the thread. required user_id int The ID of the user to remove. required Returns: Type Description Dict[str, Any] The data received from the API after making the call Source code in lefi/http.py async def remove_thread_member ( self , channel_id : int , user_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call which removes a member from the thread. Parameters: channel_id (int): The ID of the thread. user_id (int): The ID of the user to remove. Returns: The data received from the API after making the call \"\"\" return await self . request ( \"DELETE\" , Route ( f \"/channels/ { channel_id } /thread-members/ { user_id } \" , channel_id = channel_id , ), ) list_thread_members ( self , channel_id ) async Makes an API call to get all of the members of a thread. Parameters: Name Type Description Default channel_id int The ID of the thread. required Returns: Type Description List[Dict[str, Any]] The data received from the API after making the call Source code in lefi/http.py async def list_thread_members ( self , channel_id : int ) -> List [ Dict [ str , Any ]]: \"\"\" Makes an API call to get all of the members of a thread. Parameters: channel_id (int): The ID of the thread. Returns: The data received from the API after making the call \"\"\" return await self . request ( \"GET\" , Route ( f \"/channels/ { channel_id } /thread-members\" , channel_id = channel_id ), ) list_public_archived_threads ( self , channel_id , * , before = None , limit = None ) async Makes an API call which list all the public archived threads in the channel. Parameters: Name Type Description Default channel_id int The ID of the channel which the threads are inside of. required before Optional[int] Grab threads before this time. None limit Optional[int] The amount of threads to grab. None Returns: Type Description Dict[str, Any] The data received from the API after making the call Source code in lefi/http.py async def list_public_archived_threads ( self , channel_id : int , * , before : Optional [ int ] = None , limit : Optional [ int ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call which list all the public archived threads in the channel. Parameters: channel_id (int): The ID of the channel which the threads are inside of. before (Optional[int]): Grab threads before this time. limit (Optional[int]): The amount of threads to grab. Returns: The data received from the API after making the call \"\"\" params = update_payload ({}, before = before , limit = limit ) return await self . request ( \"GET\" , Route ( f \"/channels/ { channel_id } /threads/archived/public\" , channel_id = channel_id ), params = params , ) list_private_archived_threads ( self , channel_id , * , before = None , limit = None ) async Makes an API call which list all the private archived threads in the channel. Parameters: Name Type Description Default channel_id int The ID of the channel which the threads are inside of. required before Optional[int] Grab threads before this time. None limit Optional[int] The amount of threads to grab. None Returns: Type Description Dict[str, Any] The data received from the API after making the call Source code in lefi/http.py async def list_private_archived_threads ( self , channel_id : int , * , before : Optional [ int ] = None , limit : Optional [ int ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call which list all the private archived threads in the channel. Parameters: channel_id (int): The ID of the channel which the threads are inside of. before (Optional[int]): Grab threads before this time. limit (Optional[int]): The amount of threads to grab. Returns: The data received from the API after making the call \"\"\" params = update_payload ({}, before = before , limit = limit ) return await self . request ( \"GET\" , Route ( f \"/channels/ { channel_id } /threads/archived/private\" , channel_id = channel_id , ), params = params , ) list_joined_private_archived_threads ( self , channel_id , * , before = None , limit = None ) async Makes an API call which list all the private archived threads in the channel which the client has joined. Parameters: Name Type Description Default channel_id int The ID of the channel which the threads are inside of. required before Optional[int] Grab threads before this time. None limit Optional[int] The amount of threads to grab. None Returns: Type Description Dict[str, Any] The data received from the API after making the call Source code in lefi/http.py async def list_joined_private_archived_threads ( self , channel_id : int , * , before : Optional [ int ] = None , limit : Optional [ int ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call which list all the private archived threads in the channel which the client has joined. Parameters: channel_id (int): The ID of the channel which the threads are inside of. before (Optional[int]): Grab threads before this time. limit (Optional[int]): The amount of threads to grab. Returns: The data received from the API after making the call \"\"\" params = update_payload ({}, before = before , limit = limit ) return await self . request ( \"GET\" , Route ( f \"/channels/ { channel_id } /users/@me/threads/archived/private\" , channel_id = channel_id , ), params = params , ) list_guild_emojis ( self , guild_id ) async Makes an API call to get a list of the guilds emojis. Parameters: Name Type Description Default guild_id int The ID of the guild to grab from. required Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def list_guild_emojis ( self , guild_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a list of the guilds emojis. Parameters: guild_id (int): The ID of the guild to grab from. Returns: The data received from the API after making the call. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /emojis\" , guild_id = guild_id ) ) get_guild_emoji ( self , guild_id , emoji_id ) async Makes an API call to get an emoji from the guild. Parameters: Name Type Description Default guild_id int The ID of the guild to grab from. required emoji_id int The ID of the emoji to get. required Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def get_guild_emoji ( self , guild_id : int , emoji_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get an emoji from the guild. Parameters: guild_id (int): The ID of the guild to grab from. emoji_id (int): The ID of the emoji to get. Returns: The data received from the API after making the call. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /emojis/ { emoji_id } \" , guild_id = guild_id ) ) create_guild_emoji ( self , guild_id , * , name , image , roles = None ) async Makes an API call to create an emoji. Parameters: Name Type Description Default guild_id int The ID of the guild to create the emoji in. required name str The name of the emoji. required image str The image of the emoji. required roles Optional[List[int]] The list of roles that can use this emoji. None Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def create_guild_emoji ( self , guild_id : int , * , name : str , image : bytes , roles : Optional [ List [ int ]] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to create an emoji. Parameters: guild_id (int): The ID of the guild to create the emoji in. name (str): The name of the emoji. image (str): The image of the emoji. roles (Optional[List[int]]): The list of roles that can use this emoji. Returns: The data received from the API after making the call. \"\"\" payload = { \"name\" : name , \"image\" : bytes_to_data_uri ( image ), \"roles\" : [] if roles is None else roles , } return await self . request ( \"POST\" , Route ( f \"/guilds/ { guild_id } /emojis\" , guild_id = guild_id ), json = payload , ) modify_guild_emoji ( self , guild_id , emoji_id , * , name , roles = None ) async Makes an API call to edit an emoji. Parameters: Name Type Description Default guild_id int The ID of the guild where the emoji is. required emoji_id int The ID of the emoji. required name str The new name of the emoji. required roles Optional[List[int]] The new list of roles that can use this emoji. None Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def modify_guild_emoji ( self , guild_id : int , emoji_id : int , * , name : str , roles : Optional [ List [ int ]] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to edit an emoji. Parameters: guild_id (int): The ID of the guild where the emoji is. emoji_id (int): The ID of the emoji. name (str): The new name of the emoji. roles (Optional[List[int]]): The new list of roles that can use this emoji. Returns: The data received from the API after making the call. \"\"\" payload = { \"name\" : name } update_payload ( payload , roles = roles ) return await self . request ( \"PATCH\" , Route ( f \"/guilds/ { guild_id } /emojis/ { emoji_id } \" , guild_id = guild_id ), json = payload , ) delete_guild_emoji ( self , guild_id , emoji_id ) async Makes an API call which deletes an emoji. Parameters: Name Type Description Default guild_id int The ID of the guild where the emoji is in. required emoji_id int The ID of the emoji to delete. required Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def delete_guild_emoji ( self , guild_id : int , emoji_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call which deletes an emoji. Parameters: guild_id (int): The ID of the guild where the emoji is in. emoji_id (int): The ID of the emoji to delete. Returns: The data received from the API after making the call. \"\"\" return await self . request ( \"DELETE\" , Route ( f \"/guilds/ { guild_id } /emojis/ { emoji_id } \" , guild_id = guild_id ) ) create_guild ( self , name , * , region = None , icon = None , verification_level = None , default_message_notifications = None , explicit_content_filter = None , roles = None , channels = None , afk_channel = None , afk_timeout = None , system_channel_id = None , system_channel_flags = None ) async Makes an API call to create a guild. Parameters: Name Type Description Default name str The name of the guild. required region Optional[str] The region of the guild. None icon Optional[str] The icon of the guild. None verification_level Optional[int] The verification level of the guild. None default_message_notifications Optional[int] The default message notifications of the guild. None explicit_content_filter Optional[int] The explicit content filter of the guild. None roles Optional[List[Dict[str, Any]]] The list of roles to create. None channels Optional[List[Dict[str, Any]]]] The list of channels to create. None afk_channel Optional[int] The ID of the AFK channel. None afk_timeout Optional[int] The AFK timeout of the guild. None system_channel_id Optional[int] The ID of the system channel. None system_channel_flags Optional[int] The flags of the system channel. None Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def create_guild ( self , name : str , * , region : Optional [ str ] = None , icon : Optional [ bytes ] = None , verification_level : Optional [ int ] = None , default_message_notifications : Optional [ int ] = None , explicit_content_filter : Optional [ int ] = None , roles : Optional [ List [ Dict [ str , Any ]]] = None , channels : Optional [ List [ Dict [ str , Any ]]] = None , afk_channel : Optional [ int ] = None , afk_timeout : Optional [ int ] = None , system_channel_id : Optional [ int ] = None , system_channel_flags : Optional [ int ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to create a guild. Parameters: name (str): The name of the guild. region (Optional[str]): The region of the guild. icon (Optional[str]): The icon of the guild. verification_level (Optional[int]): The verification level of the guild. default_message_notifications (Optional[int]): The default message notifications of the guild. explicit_content_filter (Optional[int]): The explicit content filter of the guild. roles (Optional[List[Dict[str, Any]]]): The list of roles to create. channels (Optional[List[Dict[str, Any]]]]): The list of channels to create. afk_channel (Optional[int]): The ID of the AFK channel. afk_timeout (Optional[int]): The AFK timeout of the guild. system_channel_id (Optional[int]): The ID of the system channel. system_channel_flags (Optional[int]): The flags of the system channel. Returns: The data received from the API after making the call. \"\"\" payload = update_payload ( {}, name = name , region = region , icon = icon , verification_level = verification_level , default_message_notifications = default_message_notifications , explicit_content_filter = explicit_content_filter , roles = roles , channels = channels , afk_channel = afk_channel , afk_timeout = afk_timeout , system_channel_id = system_channel_id , system_channel_flags = system_channel_flags , ) if \"icon\" in payload : payload [ \"icon\" ] = bytes_to_data_uri ( payload [ \"icon\" ]) return await self . request ( \"POST\" , Route ( \"/guilds\" ), json = payload ) get_guild ( self , guild_id , * , with_counts = False ) async Makes an API call to get a guild. Parameters: Name Type Description Default guild_id int The ID of the guild to get. required Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def get_guild ( self , guild_id : int , * , with_counts : bool = False ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a guild. Parameters: guild_id (int): The ID of the guild to get. Returns: The data received from the API after making the call. \"\"\" params = { \"with_counts\" : with_counts } return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } \" , guild_id = guild_id ), params = params ) get_guild_preview ( self , guild_id ) async Makes an API call to get a guild's preview. Parameters: Name Type Description Default guild_id int The ID of the guild. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_guild_preview ( self , guild_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a guild's preview. Parameters: guild_id (int): The ID of the guild. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /preview\" , guild_id = guild_id ) ) modify_guild ( self , guild_id , * , name = None , region = None , verification_level = None , default_message_notifications = None , afk_channel = None , afk_timeout = None , icon = None , owner_id = None , splash = None , discovery_splash = None , banner = None , system_channel_id = None , system_channel_flags = None , rules_channel_id = None , public_updates_channel_id = None , preferred_locale = None , features = None , description = None ) async Makes an API call to modify a guild. Parameters guild_id (int): The ID of the guild to edit. name (Optional[str]): The name of the guild. region (Optional[str]): The region of the guild. verification_level (Optional[int]): The verification level of the guild. default_message_notifications (Optional[int]): The default message notifications of the guild. afk_channel (Optional[int]): The AFK channel of the guild. afk_timeout (Optional[int]): The AFK timeout of the guild. icon (Optional[str]): The icon of the guild. owner_id (Optional[int]): The ID of the owner of the guild. splash (Optional[str]): The splash of the guild. discovery_splash (Optional[str]): The discovery splash of the guild. banner (Optional[str]): The banner of the guild. system_channel_id (Optional[int]): The ID of the system channel of the guild. system_channel_flags (Optional[int]): The flags of the system channel of the guild. rules_channel_id (Optional[int]): The ID of the rules channel of the guild. public_updates_channel_id (Optional[int]): The ID of the public updates channel of the guild. preferred_locale (Optional[str]): The preferred locale of the guild. features (Optional[List[str]]): The features of the guild. description (Optional[str]): The description of the guild. Returns: Type Description The data returned from the API. Source code in lefi/http.py async def modify_guild ( self , guild_id : int , * , name : Optional [ str ] = None , region : Optional [ str ] = None , verification_level : Optional [ int ] = None , default_message_notifications : Optional [ int ] = None , afk_channel : Optional [ int ] = None , afk_timeout : Optional [ int ] = None , icon : Optional [ bytes ] = None , owner_id : Optional [ int ] = None , splash : Optional [ bytes ] = None , discovery_splash : Optional [ bytes ] = None , banner : Optional [ bytes ] = None , system_channel_id : Optional [ int ] = None , system_channel_flags : Optional [ int ] = None , rules_channel_id : Optional [ int ] = None , public_updates_channel_id : Optional [ int ] = None , preferred_locale : Optional [ str ] = None , features : Optional [ List [ str ]] = None , description : Optional [ str ] = None , ): \"\"\" Makes an API call to modify a guild. Parameters guild_id (int): The ID of the guild to edit. name (Optional[str]): The name of the guild. region (Optional[str]): The region of the guild. verification_level (Optional[int]): The verification level of the guild. default_message_notifications (Optional[int]): The default message notifications of the guild. afk_channel (Optional[int]): The AFK channel of the guild. afk_timeout (Optional[int]): The AFK timeout of the guild. icon (Optional[str]): The icon of the guild. owner_id (Optional[int]): The ID of the owner of the guild. splash (Optional[str]): The splash of the guild. discovery_splash (Optional[str]): The discovery splash of the guild. banner (Optional[str]): The banner of the guild. system_channel_id (Optional[int]): The ID of the system channel of the guild. system_channel_flags (Optional[int]): The flags of the system channel of the guild. rules_channel_id (Optional[int]): The ID of the rules channel of the guild. public_updates_channel_id (Optional[int]): The ID of the public updates channel of the guild. preferred_locale (Optional[str]): The preferred locale of the guild. features (Optional[List[str]]): The features of the guild. description (Optional[str]): The description of the guild. Returns: The data returned from the API. \"\"\" payload = update_payload ( {}, name = name , region = region , verification_level = verification_level , default_message_notifications = default_message_notifications , afk_channel = afk_channel , afk_timeout = afk_timeout , icon = icon , owner_id = owner_id , splash = splash , discovery_splash = discovery_splash , banner = banner , system_channel_id = system_channel_id , system_channel_flags = system_channel_flags , rules_channel_id = rules_channel_id , public_updates_channel_id = public_updates_channel_id , preferred_locale = preferred_locale , features = features , description = description , ) if \"icon\" in payload : payload [ \"icon\" ] = bytes_to_data_uri ( payload [ \"icon\" ]) if \"splash\" in payload : payload [ \"splash\" ] = bytes_to_data_uri ( payload [ \"splash\" ]) if \"discovery_splash\" in payload : payload [ \"discovery_splash\" ] = bytes_to_data_uri ( payload [ \"discovery_splash\" ]) if \"banner\" in payload : payload [ \"banner\" ] = bytes_to_data_uri ( payload [ \"banner\" ]) return await self . request ( \"PATCH\" , Route ( f \"/guilds/ { guild_id } \" , guild_id = guild_id ), json = payload ) delete_guild ( self , guild_id ) async Makes an API call to delete a guild. Parameters: Name Type Description Default guild_id int The ID of the guild to delete. required Source code in lefi/http.py async def delete_guild ( self , guild_id : int ): \"\"\" Makes an API call to delete a guild. Parameters: guild_id (int): The ID of the guild to delete. \"\"\" await self . request ( \"DELETE\" , Route ( f \"/guilds/ { guild_id } \" , guild_id = guild_id )) get_guild_channels ( self , guild_id ) async Makes an API call to get a guild's channels. Parameters: Name Type Description Default guild_id int The ID of the guild. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_guild_channels ( self , guild_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a guild's channels. Parameters: guild_id (int): The ID of the guild. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /channels\" , guild_id = guild_id ) ) create_guild_channel ( self , guild_id , name , * , type = None , topic = None , bitrate = None , user_limit = None , position = None , permission_overwrites = None , parent_id = None , nsfw = None ) async Makes an API call to create a channel in a guild. Parameters guild_id (int): The ID of the guild. name (str): The name of the channel. type (Optional[int]): The type of the channel. topic (Optional[str]): The topic of the channel. bitrate (Optional[int]): The bitrate of the channel. user_limit (Optional[int]): The user limit of the channel. position (Optional[int]): The position of the channel. permission_overwrites (Optional[List[Dict[str, Any]]]): The permission overwrites of the channel. parent_id (Optional[int]): The ID of the parent of the channel. nsfw (Optional[bool]): Whether the channel is NSFW. Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def create_guild_channel ( self , guild_id : int , name : str , * , type : Optional [ int ] = None , topic : Optional [ str ] = None , bitrate : Optional [ int ] = None , user_limit : Optional [ int ] = None , position : Optional [ int ] = None , permission_overwrites : Optional [ List [ Dict [ str , Any ]]] = None , parent_id : Optional [ int ] = None , nsfw : Optional [ bool ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to create a channel in a guild. Parameters guild_id (int): The ID of the guild. name (str): The name of the channel. type (Optional[int]): The type of the channel. topic (Optional[str]): The topic of the channel. bitrate (Optional[int]): The bitrate of the channel. user_limit (Optional[int]): The user limit of the channel. position (Optional[int]): The position of the channel. permission_overwrites (Optional[List[Dict[str, Any]]]): The permission overwrites of the channel. parent_id (Optional[int]): The ID of the parent of the channel. nsfw (Optional[bool]): Whether the channel is NSFW. Returns: The data returned from the API. \"\"\" payload = update_payload ( {}, name = name , type = type , topic = topic , bitrate = bitrate , user_limit = user_limit , position = position , permission_overwrites = permission_overwrites , parent_id = parent_id , nsfw = nsfw , ) return await self . request ( \"POST\" , Route ( f \"/guilds/ { guild_id } /channels\" , guild_id = guild_id ), json = payload , ) list_active_threads ( self , guild_id ) async Makes an API call to get a guild's active threads. Parameters: Name Type Description Default guild_id int The ID of the guild. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def list_active_threads ( self , guild_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a guild's active threads. Parameters: guild_id (int): The ID of the guild. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /threads/active\" , guild_id = guild_id ) ) get_guild_member ( self , guild_id , member_id ) async Makes an API call to get a guild member. Parameters: Name Type Description Default guild_id int The ID of the guild. required member_id int The ID of the member. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_guild_member ( self , guild_id : int , member_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a guild member. Parameters: guild_id (int): The ID of the guild. member_id (int): The ID of the member. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /members/ { member_id } \" , guild_id = guild_id ) ) list_guild_members ( self , guild_id , * , limit = 1 , after = None ) async Makes an API call to get a guild's members. Parameters: Name Type Description Default guild_id int The ID of the guild. required Returns: Type Description List[Dict[str, Any]] The data returned from the API. Source code in lefi/http.py async def list_guild_members ( self , guild_id : int , * , limit : int = 1 , after : Optional [ int ] = None ) -> List [ Dict [ str , Any ]]: \"\"\" Makes an API call to get a guild's members. Parameters: guild_id (int): The ID of the guild. Returns: The data returned from the API. \"\"\" params = update_payload ({}, limit = limit , after = after ) return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /members\" , guild_id = guild_id ), params = params , ) search_guild_members ( self , guild_id , * , query , limit = 1 ) async Makes an API call to search a guild's members. Parameters: Name Type Description Default guild_id int The ID of the guild. required query str The query to search for. required limit Optional[int] The number of members to return. 1 Returns: Type Description List[Dict[str, Any]] The data returned from the API. Source code in lefi/http.py async def search_guild_members ( self , guild_id : int , * , query : str , limit : int = 1 ) -> List [ Dict [ str , Any ]]: \"\"\" Makes an API call to search a guild's members. Parameters: guild_id (int): The ID of the guild. query (str): The query to search for. limit (Optional[int]): The number of members to return. Returns: The data returned from the API. \"\"\" params = { \"limit\" : limit , \"query\" : query } return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /members/search\" , guild_id = guild_id ), params = params , ) add_guild_member ( self , guild_id , member_id , access_token , * , nick = None , roles = None , mute = None , deaf = None ) async Makes an API call to add a member to a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required member_id int The ID of the member. required access_token str An oauth2 access token. required nick Optional[str] The nickname of the member. None roles Optional[List[int]] The roles of the member. None mute Optional[bool] Whether the member is muted. None deaf Optional[bool] Whether the member is deafened. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def add_guild_member ( self , guild_id : int , member_id : int , access_token : str , * , nick : Optional [ str ] = None , roles : Optional [ List [ int ]] = None , mute : Optional [ bool ] = None , deaf : Optional [ bool ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to add a member to a guild. Parameters: guild_id (int): The ID of the guild. member_id (int): The ID of the member. access_token (str): An oauth2 access token. nick (Optional[str]): The nickname of the member. roles (Optional[List[int]]): The roles of the member. mute (Optional[bool]): Whether the member is muted. deaf (Optional[bool]): Whether the member is deafened. Returns: The data returned from the API. \"\"\" payload = update_payload ( {}, access_token = access_token , nick = nick , roles = roles , mute = mute , deaf = deaf ) return await self . request ( \"PUT\" , Route ( f \"/guilds/ { guild_id } /members/ { member_id } \" , guild_id = guild_id ), json = payload , ) edit_guild_member ( self , guild_id , member_id , * , nick = None , roles = None , mute = None , deaf = None , channel_id = None ) async Makes an API call to edit a member in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required member_id int The ID of the member. required nick Optional[str] The nickname of the member. None roles Optional[List[int]] The roles of the member. None mute Optional[bool] Whether the member is muted. None deaf Optional[bool] Whether the member is deafened. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def edit_guild_member ( self , guild_id : int , member_id : int , * , nick : Optional [ str ] = None , roles : Optional [ List [ int ]] = None , mute : Optional [ bool ] = None , deaf : Optional [ bool ] = None , channel_id : Optional [ int ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to edit a member in a guild. Parameters: guild_id (int): The ID of the guild. member_id (int): The ID of the member. nick (Optional[str]): The nickname of the member. roles (Optional[List[int]]): The roles of the member. mute (Optional[bool]): Whether the member is muted. deaf (Optional[bool]): Whether the member is deafened. Returns: The data returned from the API. \"\"\" payload = update_payload ( {}, nick = nick , roles = roles , mute = mute , deaf = deaf , channel_id = channel_id ) return await self . request ( \"PATCH\" , Route ( f \"/guilds/ { guild_id } /members/ { member_id } \" , guild_id = guild_id ), json = payload , ) edit_current_member ( self , guild_id , * , nick = None ) async Makes an API call to edit the current userin a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required nick Optional[str] The nickname of the member. None Returns: Type Description The data returned from the API. Source code in lefi/http.py async def edit_current_member ( self , guild_id : int , * , nick : Optional [ str ] = None ): \"\"\" Makes an API call to edit the current userin a guild. Parameters: guild_id (int): The ID of the guild. nick (Optional[str]): The nickname of the member. Returns: The data returned from the API. \"\"\" payload = update_payload ({}, nick = nick ) return await self . request ( \"PATCH\" , Route ( f \"/users/@me/guilds/ { guild_id } \" , guild_id = guild_id ), json = payload , ) add_guild_member_role ( self , guild_id , member_id , role_id ) async Makes an API call to add a role to a member in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required member_id int The ID of the member. required role_id int The ID of the role. required Returns: Type Description The data returned from the API. Source code in lefi/http.py async def add_guild_member_role ( self , guild_id : int , member_id : int , role_id : int ): \"\"\" Makes an API call to add a role to a member in a guild. Parameters: guild_id (int): The ID of the guild. member_id (int): The ID of the member. role_id (int): The ID of the role. Returns: The data returned from the API. \"\"\" return await self . request ( \"PUT\" , Route ( f \"/guilds/ { guild_id } /members/ { member_id } /roles/ { role_id } \" , guild_id = guild_id , ), ) remove_guild_member_role ( self , guild_id , member_id , role_id ) async Makes an API call to remove a role from a member in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required member_id int The ID of the member. required role_id int The ID of the role. required Returns: Type Description The data returned from the API. Source code in lefi/http.py async def remove_guild_member_role ( self , guild_id : int , member_id : int , role_id : int ): \"\"\" Makes an API call to remove a role from a member in a guild. Parameters: guild_id (int): The ID of the guild. member_id (int): The ID of the member. role_id (int): The ID of the role. Returns: The data returned from the API. \"\"\" return await self . request ( \"DELETE\" , Route ( f \"/guilds/ { guild_id } /members/ { member_id } /roles/ { role_id } \" , guild_id = guild_id , ), ) remove_guild_member ( self , guild_id , member_id ) async Makes an API call to remove a member from a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required member_id int The ID of the member. required Returns: Type Description The data returned from the API. Source code in lefi/http.py async def remove_guild_member ( self , guild_id : int , member_id : int ): \"\"\" Makes an API call to remove a member from a guild. Parameters: guild_id (int): The ID of the guild. member_id (int): The ID of the member. Returns: The data returned from the API. \"\"\" return await self . request ( \"DELETE\" , Route ( f \"/guilds/ { guild_id } /members/ { member_id } \" ), guild_id = guild_id , ) get_guild_bans ( self , guild_id ) async Makes an API call to get the bans of a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required Returns: Type Description List[Dict[str, Any]] The data returned from the API. Source code in lefi/http.py async def get_guild_bans ( self , guild_id : int ) -> List [ Dict [ str , Any ]]: \"\"\" Makes an API call to get the bans of a guild. Parameters: guild_id (int): The ID of the guild. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /bans\" ), guild_id = guild_id ) get_guild_ban ( self , guild_id , user_id ) async Makes an API call to get the ban of a user in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required user_id int The ID of the user. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_guild_ban ( self , guild_id : int , user_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get the ban of a user in a guild. Parameters: guild_id (int): The ID of the guild. user_id (int): The ID of the user. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /bans/ { user_id } \" ), guild_id = guild_id ) create_guild_ban ( self , guild_id , user_id , * , delete_message_days = 0 ) async Makes an API call to ban a user in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required user_id int The ID of the user. required delete_message_days int The number of days to delete messages for. 0 Returns: Type Description The data returned from the API. Source code in lefi/http.py async def create_guild_ban ( self , guild_id : int , user_id : int , * , delete_message_days : int = 0 ): \"\"\" Makes an API call to ban a user in a guild. Parameters: guild_id (int): The ID of the guild. user_id (int): The ID of the user. delete_message_days (int): The number of days to delete messages for. Returns: The data returned from the API. \"\"\" payload = { \"delete_message_days\" : delete_message_days } return await self . request ( \"PUT\" , Route ( f \"/guilds/ { guild_id } /bans/ { user_id } \" , guild_id = guild_id ), json = payload , ) remove_guild_ban ( self , guild_id , user_id ) async Makes an API call to unban a user in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required user_id int The ID of the user. required Returns: Type Description The data returned from the API. Source code in lefi/http.py async def remove_guild_ban ( self , guild_id : int , user_id : int ): \"\"\" Makes an API call to unban a user in a guild. Parameters: guild_id (int): The ID of the guild. user_id (int): The ID of the user. Returns: The data returned from the API. \"\"\" return await self . request ( \"DELETE\" , Route ( f \"/guilds/ { guild_id } /bans/ { user_id } \" ), guild_id = guild_id ) get_guild_roles ( self , guild_id ) async Makes an API call to get the roles of a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required Returns: Type Description List[Dict[str, Any]] The data returned from the API. Source code in lefi/http.py async def get_guild_roles ( self , guild_id : int ) -> List [ Dict [ str , Any ]]: \"\"\" Makes an API call to get the roles of a guild. Parameters: guild_id (int): The ID of the guild. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /roles\" ), guild_id = guild_id ) create_guild_role ( self , guild_id , * , name = None , permissions = None , color = None , hoist = False , mentionable = False , icon = None , unicode_emoji = None ) async Makes an API call to create a role in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required name Optional[str] The name of the role. None permissions Optional[int] The permissions of the role. None color Optional[int] The color of the role. None hoist bool Whether the role is hoisted. False mentionable bool Whether the role is mentionable. False icon Optional[str] The icon of the role. None unicode_emoji Optional[str] The unicode emoji of the role. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def create_guild_role ( self , guild_id : int , * , name : Optional [ str ] = None , permissions : Optional [ int ] = None , color : Optional [ int ] = None , hoist : bool = False , mentionable : bool = False , icon : Optional [ bytes ] = None , unicode_emoji : Optional [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to create a role in a guild. Parameters: guild_id (int): The ID of the guild. name (Optional[str]): The name of the role. permissions (Optional[int]): The permissions of the role. color (Optional[int]): The color of the role. hoist (bool): Whether the role is hoisted. mentionable (bool): Whether the role is mentionable. icon (Optional[str]): The icon of the role. unicode_emoji (Optional[str]): The unicode emoji of the role. Returns: The data returned from the API. \"\"\" payload = update_payload ( {}, name = name , permissions = permissions , color = color , hoist = hoist , mentionable = mentionable , icon = icon , unicode_emoji = unicode_emoji , ) if \"icon\" in payload : payload [ \"icon\" ] = bytes_to_data_uri ( payload [ \"icon\" ]) return await self . request ( \"POST\" , Route ( f \"/guilds/ { guild_id } /roles\" , guild_id = guild_id ), json = payload ) modify_guild_role ( self , guild_id , role_id , * , name = None , permissions = None , color = None , hoist = None , mentionable = None , icon = None , unicode_emoji = None ) async Makes an API call to modify a role in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required role_id int The ID of the role. required name Optional[str] The name of the role. None permissions Optional[int] The permissions of the role. None color Optional[int] The color of the role. None hoist Optional[bool] Whether the role is hoisted. None mentionable Optional[bool] Whether the role is mentionable. None icon Optional[str] The icon of the role. None unicode_emoji Optional[str] The unicode emoji of the role. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def modify_guild_role ( self , guild_id : int , role_id : int , * , name : Optional [ str ] = None , permissions : Optional [ int ] = None , color : Optional [ int ] = None , hoist : Optional [ bool ] = None , mentionable : Optional [ bool ] = None , icon : Optional [ bytes ] = None , unicode_emoji : Optional [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to modify a role in a guild. Parameters: guild_id (int): The ID of the guild. role_id (int): The ID of the role. name (Optional[str]): The name of the role. permissions (Optional[int]): The permissions of the role. color (Optional[int]): The color of the role. hoist (Optional[bool]): Whether the role is hoisted. mentionable (Optional[bool]): Whether the role is mentionable. icon (Optional[str]): The icon of the role. unicode_emoji (Optional[str]): The unicode emoji of the role. Returns: The data returned from the API. \"\"\" payload = update_payload ( {}, name = name , permissions = permissions , color = color , hoist = hoist , mentionable = mentionable , icon = icon , unicode_emoji = unicode_emoji , ) if \"icon\" in payload : payload [ \"icon\" ] = bytes_to_data_uri ( payload [ \"icon\" ]) return await self . request ( \"PATCH\" , Route ( f \"/guilds/ { guild_id } /roles/ { role_id } \" , guild_id = guild_id ), json = payload , ) delete_guild_role ( self , guild_id , role_id ) async Makes an API call to delete a role in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required role_id int The ID of the role. required Returns: Type Description The data returned from the API. Source code in lefi/http.py async def delete_guild_role ( self , guild_id : int , role_id : int ): \"\"\" Makes an API call to delete a role in a guild. Parameters: guild_id (int): The ID of the guild. role_id (int): The ID of the role. Returns: The data returned from the API. \"\"\" return await self . request ( \"DELETE\" , Route ( f \"/guilds/ { guild_id } /roles/ { role_id } \" ), guild_id = guild_id ) get_guild_prune_count ( self , guild_id , * , days = 7 , include_roles = None ) async Makes an API call to get the number of members to prune in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required days int The number of days to count. 7 include_roles Optional[List[int]] The IDs of the roles to include. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_guild_prune_count ( self , guild_id : int , * , days : int = 7 , include_roles : Optional [ List [ int ]] = None ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get the number of members to prune in a guild. Parameters: guild_id (int): The ID of the guild. days (int): The number of days to count. include_roles (Optional[List[int]]): The IDs of the roles to include. Returns: The data returned from the API. \"\"\" payload = { \"days\" : str ( days )} if include_roles is not None : payload [ \"include_roles\" ] = \",\" . join ( map ( str , include_roles )) return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /prune\" , guild_id = guild_id ), json = payload ) begin_guild_prune ( self , guild_id , * , days = 7 , compute_prune_count = True , include_roles = None ) async Makes an API call to begin pruning a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required days int The number of days to count. 7 compute_prune_count bool Whether to compute the prune count. True include_roles Optional[List[int]] The IDs of the roles to include. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def begin_guild_prune ( self , guild_id : int , * , days : int = 7 , compute_prune_count : bool = True , include_roles : Optional [ List [ int ]] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to begin pruning a guild. Parameters: guild_id (int): The ID of the guild. days (int): The number of days to count. compute_prune_count (bool): Whether to compute the prune count. include_roles (Optional[List[int]]): The IDs of the roles to include. Returns: The data returned from the API. \"\"\" payload = { \"days\" : str ( days ), \"compute_prune_count\" : compute_prune_count } if include_roles is not None : payload [ \"include_roles\" ] = \",\" . join ( map ( str , include_roles )) return await self . request ( \"POST\" , Route ( f \"/guilds/ { guild_id } /prune\" , guild_id = guild_id ), json = payload ) get_guild_voice_regions ( self , guild_id ) async Makes an API call to get the voice regions in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required Returns: Type Description List[Dict[str, Any]] The data returned from the API. Source code in lefi/http.py async def get_guild_voice_regions ( self , guild_id : int ) -> List [ Dict [ str , Any ]]: \"\"\" Makes an API call to get the voice regions in a guild. Parameters: guild_id (int): The ID of the guild. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /regions\" ), guild_id = guild_id ) get_guild_invites ( self , guild_id ) async Makes an API call to get the invites in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required Returns: Type Description List[Dict[str, Any]] The data returned from the API. Source code in lefi/http.py async def get_guild_invites ( self , guild_id : int ) -> List [ Dict [ str , Any ]]: \"\"\" Makes an API call to get the invites in a guild. Parameters: guild_id (int): The ID of the guild. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /invites\" ), guild_id = guild_id ) get_guild_integrations ( self , guild_id ) async Makes an API call to get the integrations in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required Returns: Type Description List[Dict[str, Any]] The data returned from the API. Source code in lefi/http.py async def get_guild_integrations ( self , guild_id : int ) -> List [ Dict [ str , Any ]]: \"\"\" Makes an API call to get the integrations in a guild. Parameters: guild_id (int): The ID of the guild. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /integrations\" ), guild_id = guild_id ) delete_guild_integration ( self , guild_id , integration_id ) async Makes an API call to delete an integration in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required integration_id int The ID of the integration. required Source code in lefi/http.py async def delete_guild_integration ( self , guild_id : int , integration_id : int ): \"\"\" Makes an API call to delete an integration in a guild. Parameters: guild_id (int): The ID of the guild. integration_id (int): The ID of the integration. \"\"\" return await self . request ( \"DELETE\" , Route ( f \"/guilds/ { guild_id } /integrations/ { integration_id } \" , guild_id = guild_id ), ) get_guild_widget_settings ( self , guild_id ) async Makes an API call to get the widget settings in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_guild_widget_settings ( self , guild_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get the widget settings in a guild. Parameters: guild_id (int): The ID of the guild. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /widget\" ), guild_id = guild_id ) get_guild_widget ( self , guild_id ) async Makes an API call to get the widget in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_guild_widget ( self , guild_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get the widget in a guild. Parameters: guild_id (int): The ID of the guild. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /widget.json\" ), guild_id = guild_id ) get_guild_vanity_url ( self , guild_id ) async Makes an API call to get the vanity URL in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_guild_vanity_url ( self , guild_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get the vanity URL in a guild. Parameters: guild_id (int): The ID of the guild. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /vanity-url\" ), guild_id = guild_id ) get_guild_widget_image ( self , guild_id , * , style = None ) async Makes an API call to get the widget image in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required style Optional[str] The style of the image. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_guild_widget_image ( self , guild_id : int , * , style : Optional [ str ] = None ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get the widget image in a guild. Parameters: guild_id (int): The ID of the guild. style (Optional[str]): The style of the image. Returns: The data returned from the API. \"\"\" payload = { \"style\" : style or \"shield\" } return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /widget.png\" , guild_id = guild_id ), json = payload , ) get_guild_welcome_screen ( self , guild_id ) async Makes an API call to get the welcome screen in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_guild_welcome_screen ( self , guild_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get the welcome screen in a guild. Parameters: guild_id (int): The ID of the guild. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /welcome-screen\" ), guild_id = guild_id ) modify_guild_welcome_screen ( self , guild_id , * , enabled = None , description = None , welcome_channels = None ) async Makes an API call to modify the welcome screen in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required enabled Optional[bool] Whether the welcome screen is enabled. None description Optional[str] The welcome screen description. None welcome_channels Optional[List[int]] The IDs of the welcome channels. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def modify_guild_welcome_screen ( self , guild_id : int , * , enabled : Optional [ bool ] = None , description : Optional [ str ] = None , welcome_channels : Optional [ List [ int ]] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to modify the welcome screen in a guild. Parameters: guild_id (int): The ID of the guild. enabled (Optional[bool]): Whether the welcome screen is enabled. description (Optional[str]): The welcome screen description. welcome_channels (Optional[List[int]]): The IDs of the welcome channels. Returns: The data returned from the API. \"\"\" payload = update_payload ( {}, enabled = enabled , description = description , welcome_channels = welcome_channels , ) return await self . request ( \"PATCH\" , Route ( f \"/guilds/ { guild_id } /welcome-screen\" , guild_id = guild_id ), json = payload , ) get_guild_template ( self , code ) async Makes an API call to get a guild template. Parameters: Name Type Description Default code str The code of the template. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_guild_template ( self , code : str ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a guild template. Parameters: code (str): The code of the template. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/templates/ { code } \" )) create_guild_from_template ( self , code , * , name , icon = None ) async Makes an API call to create a guild from a template. Parameters: Name Type Description Default code str The code of the template. required name str The name of the guild. required icon Optional[str] The icon of the guild. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def create_guild_from_template ( self , code : str , * , name : str , icon : Optional [ bytes ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to create a guild from a template. Parameters: code (str): The code of the template. name (str): The name of the guild. icon (Optional[str]): The icon of the guild. Returns: The data returned from the API. \"\"\" payload = update_payload ({}, name = name , icon = icon ) if \"icon\" in payload : payload [ \"icon\" ] = bytes_to_data_uri ( payload [ \"icon\" ]) return await self . request ( \"POST\" , Route ( f \"/guilds/templates/ { code } \" ), json = payload ) get_guild_templates ( self , guild_id ) async Makes an API call to get the templates in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required Returns: Type Description List[Dict[str, Any]] The data returned from the API. Source code in lefi/http.py async def get_guild_templates ( self , guild_id : int ) -> List [ Dict [ str , Any ]]: \"\"\" Makes an API call to get the templates in a guild. Parameters: guild_id (int): The ID of the guild. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /templates\" , guild_id = guild_id ) ) create_guild_template ( self , guild_id , * , name , description = None ) async Makes an API call to create a template for a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required name str The name of the template. required description Optional[str] The description of the template. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def create_guild_template ( self , guild_id : int , * , name : str , description : Optional [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to create a template for a guild. Parameters: guild_id (int): The ID of the guild. name (str): The name of the template. description (Optional[str]): The description of the template. Returns: The data returned from the API. \"\"\" payload = update_payload ({}, name = name , description = description ) return await self . request ( \"POST\" , Route ( f \"/guilds/ { guild_id } /templates\" , guild_id = guild_id ), json = payload , ) sync_guild_template ( self , guild_id , code ) async Makes an API call to sync a template for a guild guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required code str The code of the template. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def sync_guild_template ( self , guild_id : int , code : str ) -> Dict [ str , Any ]: \"\"\" Makes an API call to sync a template for a guild guild. Parameters: guild_id (int): The ID of the guild. code (str): The code of the template. Returns: The data returned from the API. \"\"\" return await self . request ( \"POST\" , Route ( f \"/guilds/ { guild_id } /templates/ { code } /sync\" , guild_id = guild_id ), ) modify_guild_template ( self , guild_id , code , * , name = None , description = None ) async Makes an API call to modify a template for a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required code str The code of the template. required name Optional[str] The name of the template. None description Optional[str] The description of the template. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def modify_guild_template ( self , guild_id : int , code : str , * , name : Optional [ str ] = None , description : Optional [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to modify a template for a guild. Parameters: guild_id (int): The ID of the guild. code (str): The code of the template. name (Optional[str]): The name of the template. description (Optional[str]): The description of the template. Returns: The data returned from the API. \"\"\" payload = update_payload ({}, name = name , description = description ) return await self . request ( \"PATCH\" , Route ( f \"/guilds/ { guild_id } /templates/ { code } \" , guild_id = guild_id ), json = payload , ) delete_guild_template ( self , guild_id , code ) async Makes an API call to delete a template for a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required code str The code of the template. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def delete_guild_template ( self , guild_id : int , code : str ) -> Dict [ str , Any ]: \"\"\" Makes an API call to delete a template for a guild. Parameters: guild_id (int): The ID of the guild. code (str): The code of the template. Returns: The data returned from the API. \"\"\" return await self . request ( \"DELETE\" , Route ( f \"/guilds/ { guild_id } /templates/ { code } \" , guild_id = guild_id ) ) get_invite ( self , code , * , with_counts = False , with_expiration = False ) async Makes an API call to get an invite. Parameters: Name Type Description Default code str The code of the invite. required with_counts bool Whether to include the invite counts. False with_expiration bool Whether to include the invite expiration. False Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_invite ( self , code : str , * , with_counts : bool = False , with_expiration : bool = False ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get an invite. Parameters: code (str): The code of the invite. with_counts (bool): Whether to include the invite counts. with_expiration (bool): Whether to include the invite expiration. Returns: The data returned from the API. \"\"\" params = { \"with_counts\" : with_counts , \"with_expiration\" : with_expiration } return await self . request ( \"GET\" , Route ( f \"/invites/ { code } \" ), params = params ) delete_invite ( self , code ) async Makes an API call to delete an invite. Parameters: Name Type Description Default code str The code of the invite. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def delete_invite ( self , code : str ) -> Dict [ str , Any ]: \"\"\" Makes an API call to delete an invite. Parameters: code (str): The code of the invite. Returns: The data returned from the API. \"\"\" return await self . request ( \"DELETE\" , Route ( f \"/invites/ { code } \" )) create_stage_instance ( self , * , channel_id , topic , privacy_level = None ) async Makes an API call to create a stage instance. Parameters: Name Type Description Default channel_id int The ID of the channel. required topic str The topic of the stage instance. required privacy_level Optional[int] The privacy level of the stage instance. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def create_stage_instance ( self , * , channel_id : int , topic : str , privacy_level : Optional [ int ] = None ) -> Dict [ str , Any ]: \"\"\" Makes an API call to create a stage instance. Parameters: channel_id (int): The ID of the channel. topic (str): The topic of the stage instance. privacy_level (Optional[int]): The privacy level of the stage instance. Returns: The data returned from the API. \"\"\" payload = update_payload ( {}, channel_id = channel_id , topic = topic , privacy_level = privacy_level ) return await self . request ( \"POST\" , Route ( \"/stage-instances\" , channel_id = channel_id ), json = payload ) get_stage_instance ( self , channel_id ) async Makes an API call to get a stage instance. Parameters: Name Type Description Default channel_id int The ID of the channel. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_stage_instance ( self , channel_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a stage instance. Parameters: channel_id (int): The ID of the channel. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/stage-instances/ { channel_id } \" , channel_id = channel_id ) ) modify_stage_instance ( self , channel_id , * , topic = None , privacy_level = None ) async Makes an API call to modify a stage instance. Parameters: Name Type Description Default channel_id int The ID of the channel. required topic Optional[str] The topic of the stage instance. None privacy_level Optional[int] The privacy level of the stage instance. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def modify_stage_instance ( self , channel_id : int , * , topic : Optional [ str ] = None , privacy_level : Optional [ int ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to modify a stage instance. Parameters: channel_id (int): The ID of the channel. topic (Optional[str]): The topic of the stage instance. privacy_level (Optional[int]): The privacy level of the stage instance. Returns: The data returned from the API. \"\"\" payload = update_payload ({}, topic = topic , privacy_level = privacy_level ) return await self . request ( \"PATCH\" , Route ( f \"/stage-instances/ { channel_id } \" , channel_id = channel_id ), json = payload , ) delete_stage_instance ( self , channel_id ) async Makes an API call to delete a stage instance. Parameters: Name Type Description Default channel_id int The ID of the channel. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def delete_stage_instance ( self , channel_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to delete a stage instance. Parameters: channel_id (int): The ID of the channel. Returns: The data returned from the API. \"\"\" return await self . request ( \"DELETE\" , Route ( f \"/stage-instances/ { channel_id } \" ), channel_id = channel_id ) get_sticker ( self , sticker_id ) async Makes an API call to get a sticker. Parameters: Name Type Description Default sticker_id int The ID of the sticker. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_sticker ( self , sticker_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a sticker. Parameters: sticker_id (int): The ID of the sticker. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/stickers/ { sticker_id } \" )) list_nitro_sticker_packs ( self ) async Makes an API call to list nitro sticker packs. Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def list_nitro_sticker_packs ( self ) -> Dict [ str , Any ]: \"\"\" Makes an API call to list nitro sticker packs. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( \"/sticker-packs\" )) list_guild_stickers ( self , guild_id ) async Makes an API call to list stickers for a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def list_guild_stickers ( self , guild_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to list stickers for a guild. Parameters: guild_id (int): The ID of the guild. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /stickers\" , guild_id = guild_id ) ) get_guild_sticker ( self , guild_id , sticker_id ) async Makes an API call to get a sticker for a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required sticker_id int The ID of the sticker. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_guild_sticker ( self , guild_id : int , sticker_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a sticker for a guild. Parameters: guild_id (int): The ID of the guild. sticker_id (int): The ID of the sticker. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /stickers/ { sticker_id } \" , guild_id = guild_id ) ) modify_guild_sticker ( self , guild_id , sticker_id , * , name = None , description = None , tags = None ) async Makes an API call to modify a sticker for a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required sticker_id int The ID of the sticker. required name Optional[str] The name of the sticker. None description Optional[str] The description of the sticker. None tags Optional[str] The tags of the sticker. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def modify_guild_sticker ( self , guild_id : int , sticker_id : int , * , name : Optional [ str ] = None , description : Optional [ str ] = None , tags : Optional [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to modify a sticker for a guild. Parameters: guild_id (int): The ID of the guild. sticker_id (int): The ID of the sticker. name (Optional[str]): The name of the sticker. description (Optional[str]): The description of the sticker. tags (Optional[str]): The tags of the sticker. Returns: The data returned from the API. \"\"\" payload = update_payload ({}, name = name , description = description , tags = tags ) return await self . request ( \"PATCH\" , Route ( f \"/guilds/ { guild_id } /stickers/ { sticker_id } \" , guild_id = guild_id ), json = payload , ) delete_guild_sticker ( self , guild_id , sticker_id ) async Makes an API call to delete a sticker for a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required sticker_id int The ID of the sticker. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def delete_guild_sticker ( self , guild_id : int , sticker_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to delete a sticker for a guild. Parameters: guild_id (int): The ID of the guild. sticker_id (int): The ID of the sticker. Returns: The data returned from the API. \"\"\" return await self . request ( \"DELETE\" , Route ( f \"/guilds/ { guild_id } /stickers/ { sticker_id } \" , guild_id = guild_id ), ) get_current_user ( self ) async Makes an API call to get the current user. Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_current_user ( self ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get the current user. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( \"/users/@me\" )) modify_current_user ( self , * , username = None , avatar = None ) async Makes an API call to modify the current user. Parameters: Name Type Description Default username Optional[str] The username of the user. None avatar Optional[str] The avatar of the user. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def modify_current_user ( self , * , username : Optional [ str ] = None , avatar : Optional [ bytes ] = None ) -> Dict [ str , Any ]: \"\"\" Makes an API call to modify the current user. Parameters: username (Optional[str]): The username of the user. avatar (Optional[str]): The avatar of the user. Returns: The data returned from the API. \"\"\" payload = update_payload ({}, username = username , avatar = avatar ) if \"avatar\" in payload : payload [ \"avatar\" ] = bytes_to_data_uri ( payload [ \"avatar\" ]) return await self . request ( \"PATCH\" , Route ( \"/users/@me\" ), json = payload ) get_current_user_guilds ( self ) async Makes an API call to get the current user's guilds. Returns: Type Description List[Dict[str, Any]] The data returned from the API. Source code in lefi/http.py async def get_current_user_guilds ( self ) -> List [ Dict [ str , Any ]]: \"\"\" Makes an API call to get the current user's guilds. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( \"/users/@me/guilds\" )) leave_guild ( self , guild_id ) async Makes an API call to leave a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required Source code in lefi/http.py async def leave_guild ( self , guild_id : int ): \"\"\" Makes an API call to leave a guild. Parameters: guild_id (int): The ID of the guild. \"\"\" await self . request ( \"DELETE\" , Route ( f \"/users/@me/guilds/ { guild_id } \" , guild_id = guild_id ) ) create_dm_channel ( self , recipient_id ) async Makes an API call which creates a DM channel to a user. Parameters: Name Type Description Default recipient_id int The ID of the user which to open the DM channel to. required Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def create_dm_channel ( self , recipient_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call which creates a DM channel to a user. Parameters: recipient_id (int): The ID of the user which to open the DM channel to. Returns: The data received from the API after making the call. \"\"\" payload = { \"recipient_id\" : recipient_id } return await self . request ( \"POST\" , Route ( \"/users/@me/channels\" ), json = payload ) list_voice_regions ( self ) async Makes an API call to list voice regions. Returns: Type Description List[Dict[str, Any]] The data returned from the API. Source code in lefi/http.py async def list_voice_regions ( self ) -> List [ Dict [ str , Any ]]: \"\"\" Makes an API call to list voice regions. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( \"/voice/regions\" )) create_webhook ( self , channel_id , * , name , avatar = None ) async Makes an API call to create a webhook. Parameters: Name Type Description Default channel_id int The ID of the channel to create the webhook in. required name str The name of the webhook. required avatar Optional[bytes] The avatar of the webhook. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def create_webhook ( self , channel_id : int , * , name : str , avatar : Optional [ bytes ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to create a webhook. Parameters: channel_id (int): The ID of the channel to create the webhook in. name (str): The name of the webhook. avatar (Optional[bytes]): The avatar of the webhook. Returns: The data returned from the API. \"\"\" payload = { \"name\" : name , \"avatar\" : bytes_to_data_uri ( avatar ) if avatar else None , } return await self . request ( \"POST\" , Route ( f \"/channels/ { channel_id } /webhooks\" , channel_id = channel_id ), json = payload , ) get_channel_webhooks ( self , channel_id ) async Makes an API call to get the webhooks for a channel. Parameters: Name Type Description Default channel_id int The ID of the channel. required Returns: Type Description List[Dict[str, Any]] The data returned from the API. Source code in lefi/http.py async def get_channel_webhooks ( self , channel_id : int ) -> List [ Dict [ str , Any ]]: \"\"\" Makes an API call to get the webhooks for a channel. Parameters: channel_id (int): The ID of the channel. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/channels/ { channel_id } /webhooks\" , channel_id = channel_id ) ) get_guild_webhooks ( self , guild_id ) async Makes an API call to get the webhooks for a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required Returns: Type Description List[Dict[str, Any]] The data returned from the API. Source code in lefi/http.py async def get_guild_webhooks ( self , guild_id : int ) -> List [ Dict [ str , Any ]]: \"\"\" Makes an API call to get the webhooks for a guild. Parameters: guild_id (int): The ID of the guild. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /webhooks\" , guild_id = guild_id ) ) get_webhook ( self , webhook_id ) async Makes an API call to get a webhook. Parameters: Name Type Description Default webhook_id int The ID of the webhook. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_webhook ( self , webhook_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a webhook. Parameters: webhook_id (int): The ID of the webhook. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/webhooks/ { webhook_id } \" , webhook_id = webhook_id ) ) get_webhook_with_token ( self , webhook_id , webhook_token ) async Makes an API call to get a webhook with a token. Parameters: Name Type Description Default webhook_id int The ID of the webhook. required webhook_token str The token of the webhook. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_webhook_with_token ( self , webhook_id : int , webhook_token : str ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a webhook with a token. Parameters: webhook_id (int): The ID of the webhook. webhook_token (str): The token of the webhook. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/webhooks/ { webhook_id } / { webhook_token } \" , webhook_id = webhook_id , webhookd_token = webhook_token , ), ) modify_webhook ( self , webhook_id , * , name = None , avatar = None , channel_id = None ) async Makes an API call to modify a webhook. Parameters: Name Type Description Default webhook_id int The ID of the webhook. required name Optional[str] The name of the webhook. None avatar Optional[bytes] The avatar of the webhook. None channel_id Optional[int] The ID of the channel to move the webhook to. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def modify_webhook ( self , webhook_id : int , * , name : Optional [ str ] = None , avatar : Optional [ bytes ] = None , channel_id : Optional [ int ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to modify a webhook. Parameters: webhook_id (int): The ID of the webhook. name (Optional[str]): The name of the webhook. avatar (Optional[bytes]): The avatar of the webhook. channel_id (Optional[int]): The ID of the channel to move the webhook to. Returns: The data returned from the API. \"\"\" payload = update_payload ({}, name = name , avatar = avatar , channel_id = channel_id ) if \"avatar\" in payload : payload [ \"avatar\" ] = bytes_to_data_uri ( payload [ \"avatar\" ]) return await self . request ( \"PATCH\" , Route ( f \"/webhooks/ { webhook_id } \" , webhook_id = webhook_id ), json = payload , ) modify_webhook_with_token ( self , webhook_id , webhook_token , * , name = None , avatar = None ) async Makes an API call to modify a webhook with a token. Parameters: Name Type Description Default webhook_id int The ID of the webhook. required webhook_token str The token of the webhook. required name Optional[str] The name of the webhook. None avatar Optional[bytes] The avatar of the webhook. None Source code in lefi/http.py async def modify_webhook_with_token ( self , webhook_id : int , webhook_token : str , * , name : Optional [ str ] = None , avatar : Optional [ bytes ] = None , ): \"\"\" Makes an API call to modify a webhook with a token. Parameters: webhook_id (int): The ID of the webhook. webhook_token (str): The token of the webhook. name (Optional[str]): The name of the webhook. avatar (Optional[bytes]): The avatar of the webhook. \"\"\" payload = update_payload ( {}, name = name , avatar = avatar , ) if \"avatar\" in payload : payload [ \"avatar\" ] = bytes_to_data_uri ( payload [ \"avatar\" ]) await self . request ( \"PATCH\" , Route ( f \"/webhooks/ { webhook_id } / { webhook_token } \" , webhook_id = webhook_id , webhook_token = webhook_token , ), json = payload , ) delete_webhook ( self , webhook_id ) async Makes an API call to delete a webhook. Parameters: Name Type Description Default webhook_id int The ID of the webhook. required Source code in lefi/http.py async def delete_webhook ( self , webhook_id : int ) -> None : \"\"\" Makes an API call to delete a webhook. Parameters: webhook_id (int): The ID of the webhook. \"\"\" await self . request ( \"DELETE\" , Route ( f \"/webhooks/ { webhook_id } \" , webhook_id = webhook_id ) ) delete_webhook_with_token ( self , webhook_id , webhook_token ) async Makes an API call to delete a webhook with a token. Parameters: Name Type Description Default webhook_id int The ID of the webhook. required webhook_token str The token of the webhook. required Source code in lefi/http.py async def delete_webhook_with_token ( self , webhook_id : int , webhook_token : str ) -> None : \"\"\" Makes an API call to delete a webhook with a token. Parameters: webhook_id (int): The ID of the webhook. webhook_token (str): The token of the webhook. \"\"\" await self . request ( \"DELETE\" , Route ( f \"/webhooks/ { webhook_id } / { webhook_token } \" , webhook_id = webhook_id , webhook_token = webhook_token , ), ) execute_webhook ( self , webhook_id , webhook_token , * , content = None , username = None , avatar_url = None , tts = None , file = None , embeds = None , allowed_mentions = None , componenets = None , wait = None , thread_id = None ) async Makes an API call to execute a webhook. Parameters: Name Type Description Default webhook_id int The ID of the webhook. required webhook_token str The token of the webhook. required content Optional[str] The content of the message. None username Optional[str] The username of the webhook. None avatar_url Optional[str] The avatar url of the webhook. None tts Optional[bool] Whether the message should be TTS. None file Optional[File] The file to upload. None embeds Optional[List[Dict[str, Any]]] The embeds to send. None allowed_mentions Optional[Dict[str, Any]] The allowed mentions. None componenets Optional[List[Dict[str, Any]]] The components to send. None wait Optional[bool] Whether to wait for server confirmation before response. None thread_id Optional[int] The ID of the thread to post to. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def execute_webhook ( self , webhook_id : int , webhook_token : str , * , content : Optional [ str ] = None , username : Optional [ str ] = None , avatar_url : Optional [ str ] = None , tts : Optional [ bool ] = None , file : Optional [ File ] = None , embeds : Optional [ List [ Dict [ str , Any ]]] = None , allowed_mentions : Optional [ Dict [ str , Any ]] = None , componenets : Optional [ List [ Dict [ str , Any ]]] = None , wait : Optional [ bool ] = None , thread_id : Optional [ int ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to execute a webhook. Parameters: webhook_id (int): The ID of the webhook. webhook_token (str): The token of the webhook. content (Optional[str]): The content of the message. username (Optional[str]): The username of the webhook. avatar_url (Optional[str]): The avatar url of the webhook. tts (Optional[bool]): Whether the message should be TTS. file (Optional[File]): The file to upload. embeds (Optional[List[Dict[str, Any]]]): The embeds to send. allowed_mentions (Optional[Dict[str, Any]]): The allowed mentions. componenets (Optional[List[Dict[str, Any]]]): The components to send. wait (Optional[bool]): Whether to wait for server confirmation before response. thread_id (Optional[int]): The ID of the thread to post to. Returns: The data returned from the API. \"\"\" form = self . form_helper ([ file ]) payload = update_payload ( {}, content = content , username = username , avatar_url = avatar_url , tts = tts , embeds = embeds , allowed_mentions = allowed_mentions , componenets = componenets , ) params = update_payload ({}, wait = wait , thread_id = thread_id ) return await self . request ( \"POST\" , Route ( f \"/webhooks/ { webhook_id } / { webhook_token } \" , webhook_id = webhook_id , webhook_token = webhook_token , ), json = payload , form = form , params = params , ) get_webhook_message ( self , webhook_id , webhook_token , message_id ) async Makes an API call to get a webhook message. Parameters: Name Type Description Default webhook_id int The ID of the webhook. required webhook_token str The token of the webhook. required message_id int The ID of the message. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_webhook_message ( self , webhook_id : int , webhook_token : str , message_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a webhook message. Parameters: webhook_id (int): The ID of the webhook. webhook_token (str): The token of the webhook. message_id (int): The ID of the message. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/webhooks/ { webhook_id } / { webhook_token } /messages/ { message_id } \" , webhook_id = webhook_id , webhook_token = webhook_token , ), ) edit_webhook_message ( self , webhook_id , webhook_token , message_id , * , content = None , embeds = None , file = None , allowed_mentions = None , componenets = None , attachments = None ) async Makes an API call to edit a webhook message. Parameters: Name Type Description Default webhook_id int The ID of the webhook. required webhook_token str The token of the webhook. required message_id int The ID of the message. required content Optional[str] The content of the message. None embeds Optional[List[Dict[str, Any]]] The embeds to send. None file Optional[File] The file to upload. None allowed_mentions Optional[Dict[str, Any]] The allowed mentions. None componenets Optional[List[Dict[str, Any]]] The components to send. None attachments Optional[List[Dict[str, Any]]] The attachments to send. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def edit_webhook_message ( self , webhook_id : int , webhook_token : str , message_id : int , * , content : Optional [ str ] = None , embeds : Optional [ List [ Dict [ str , Any ]]] = None , file : Optional [ File ] = None , allowed_mentions : Optional [ Dict [ str , Any ]] = None , componenets : Optional [ List [ Dict [ str , Any ]]] = None , attachments : Optional [ List [ Dict [ str , Any ]]] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to edit a webhook message. Parameters: webhook_id (int): The ID of the webhook. webhook_token (str): The token of the webhook. message_id (int): The ID of the message. content (Optional[str]): The content of the message. embeds (Optional[List[Dict[str, Any]]]): The embeds to send. file (Optional[File]): The file to upload. allowed_mentions (Optional[Dict[str, Any]]): The allowed mentions. componenets (Optional[List[Dict[str, Any]]]): The components to send. attachments (Optional[List[Dict[str, Any]]]): The attachments to send. Returns: The data returned from the API. \"\"\" form = self . form_helper ([ file ]) payload = update_payload ( {}, content = content , embeds = embeds , allowed_mentions = allowed_mentions , componenets = componenets , attachments = attachments , ) return await self . request ( \"PATCH\" , Route ( f \"/webhooks/ { webhook_id } / { webhook_token } /messages/ { message_id } \" , webhook_id = webhook_id , webhook_token = webhook_token , ), json = payload , form = form , ) delete_webhook_message ( self , webhook_id , webhook_token , message_id ) async Makes an API call to delete a webhook message. Parameters: Name Type Description Default webhook_id int The ID of the webhook. required webhook_token str The token of the webhook. required message_id int The ID of the message. required Returns: Type Description The data returned from the API. Source code in lefi/http.py async def delete_webhook_message ( self , webhook_id : int , webhook_token : str , message_id : int ): \"\"\" Makes an API call to delete a webhook message. Parameters: webhook_id (int): The ID of the webhook. webhook_token (str): The token of the webhook. message_id (int): The ID of the message. Returns: The data returned from the API. \"\"\" return await self . request ( \"DELETE\" , Route ( f \"/webhooks/ { webhook_id } / { webhook_token } /messages/ { message_id } \" , webhook_id = webhook_id , webhook_token = webhook_token , ), ) get_global_application_commands ( self , application_id ) async Makes an API call to get global application commands. Parameters: Name Type Description Default application_id int The ID of the application. required Returns: Type Description List[Dict[str, Any]] The data returned from the API. Source code in lefi/http.py async def get_global_application_commands ( self , application_id : int ) -> List [ Dict [ str , Any ]]: \"\"\" Makes an API call to get global application commands. Parameters: application_id (int): The ID of the application. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/applications/ { application_id } /commands\" ) ) create_global_application_command ( self , application_id , * , name , description , options = None , default_permission = True , type = 1 ) async Makes an API call to create a global application command. Parameters: Name Type Description Default application_id int The ID of the application. required name str The name of the command. required description str The description of the command. required options Optional[List[Dict[str, Any]]] The options of the command. None default_permission bool Whether the command is enabled by default. True type int The type of the command. 1 Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def create_global_application_command ( self , application_id : int , * , name : str , description : str , options : Optional [ List [ Dict [ str , Any ]]] = None , default_permission : bool = True , type : int = 1 , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to create a global application command. Parameters: application_id (int): The ID of the application. name (str): The name of the command. description (str): The description of the command. options (Optional[List[Dict[str, Any]]]): The options of the command. default_permission (bool): Whether the command is enabled by default. type (int): The type of the command. Returns: The data returned from the API. \"\"\" payload = update_payload ( {}, name = name , description = description , options = options , default_permission = default_permission , type = type , ) return await self . request ( \"POST\" , Route ( f \"/applications/ { application_id } /commands\" ), json = payload ) get_global_application_command ( self , application_id , command_id ) async Makes an API call to get a global application command. Parameters: Name Type Description Default application_id int The ID of the application. required command_id int The ID of the command. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_global_application_command ( self , application_id : int , command_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a global application command. Parameters: application_id (int): The ID of the application. command_id (int): The ID of the command. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/applications/ { application_id } /commands/ { command_id } \" ) ) edit_global_application_command ( self , application_id , command_id , * , name = None , description = None , options = None , default_permission = None ) async Makes an API call to edit a global application command. Parameters: Name Type Description Default application_id int The ID of the application. required command_id int The ID of the command. required name Optional[str] The name of the command. None description Optional[str] The description of the command. None options Optional[List[Dict[str, Any]]] The options of the command. None default_permission Optional[bool] Whether the command is enabled by default. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def edit_global_application_command ( self , application_id : int , command_id : int , * , name : Optional [ str ] = None , description : Optional [ str ] = None , options : Optional [ List [ Dict [ str , Any ]]] = None , default_permission : Optional [ bool ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to edit a global application command. Parameters: application_id (int): The ID of the application. command_id (int): The ID of the command. name (Optional[str]): The name of the command. description (Optional[str]): The description of the command. options (Optional[List[Dict[str, Any]]]): The options of the command. default_permission (Optional[bool]): Whether the command is enabled by default. Returns: The data returned from the API. \"\"\" payload = update_payload ( {}, name = name , description = description , options = options , default_permission = default_permission , ) return await self . request ( \"PATCH\" , Route ( f \"/applications/ { application_id } /commands/ { command_id } \" ), json = payload , ) delete_global_application_command ( self , application_id , command_id ) async Makes an API call to delete a global application command. Parameters: Name Type Description Default application_id int The ID of the application. required command_id int The ID of the command. required Source code in lefi/http.py async def delete_global_application_command ( self , application_id : int , command_id : int ) -> None : \"\"\" Makes an API call to delete a global application command. Parameters: application_id (int): The ID of the application. command_id (int): The ID of the command. \"\"\" await self . request ( \"DELETE\" , Route ( f \"/applications/ { application_id } /commands/ { command_id } \" ) ) bulk_overwrite_global_application_commands ( self , application_id , * , commands ) async Makes an API call to bulk overwrite global application commands. Parameters: Name Type Description Default application_id int The ID of the application. required commands List[Dict[str, Any]] The commands to overwrite. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def bulk_overwrite_global_application_commands ( self , application_id : int , * , commands : List [ Dict [ str , Any ]] ) -> Dict [ str , Any ]: \"\"\" Makes an API call to bulk overwrite global application commands. Parameters: application_id (int): The ID of the application. commands (List[Dict[str, Any]]): The commands to overwrite. Returns: The data returned from the API. \"\"\" return await self . request ( \"PUT\" , Route ( f \"/applications/ { application_id } /commands\" ), json = commands ) get_guild_application_commands ( self , application_id , guild_id ) async Makes an API call to get guild application commands. Parameters: Name Type Description Default application_id int The ID of the application. required guild_id int The ID of the guild. required Returns: Type Description List[Dict[str, Any]] The data returned from the API. Source code in lefi/http.py async def get_guild_application_commands ( self , application_id : int , guild_id : int ) -> List [ Dict [ str , Any ]]: \"\"\" Makes an API call to get guild application commands. Parameters: application_id (int): The ID of the application. guild_id (int): The ID of the guild. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/applications/ { application_id } /guilds/ { guild_id } /commands\" , guild_id = guild_id , ), ) create_guild_application_command ( self , application_id , guild_id , * , name , description , options = None , default_permission = True , type = 1 ) async Makes an API call to create a guild application command. Parameters: Name Type Description Default application_id int The ID of the application. required name str The name of the command. required description str The description of the command. required options Optional[List[Dict[str, Any]]] The options of the command. None default_permission bool Whether the command is enabled by default. True type int The type of the command. 1 Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def create_guild_application_command ( self , application_id : int , guild_id : int , * , name : str , description : str , options : Optional [ List [ Dict [ str , Any ]]] = None , default_permission : bool = True , type : int = 1 , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to create a guild application command. Parameters: application_id (int): The ID of the application. name (str): The name of the command. description (str): The description of the command. options (Optional[List[Dict[str, Any]]]): The options of the command. default_permission (bool): Whether the command is enabled by default. type (int): The type of the command. Returns: The data returned from the API. \"\"\" payload = update_payload ( {}, name = name , description = description , options = options , default_permission = default_permission , type = type , ) return await self . request ( \"POST\" , Route ( f \"/applications/ { application_id } /guilds/ { guild_id } /commands\" , guild_id = guild_id , ), json = payload , ) get_guild_application_command ( self , application_id , guild_id , command_id ) async Makes an API call to get a guild application command. Parameters: Name Type Description Default application_id int The ID of the application. required guild_id int The ID of the guild. required command_id int The ID of the command. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_guild_application_command ( self , application_id : int , guild_id : int , command_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a guild application command. Parameters: application_id (int): The ID of the application. guild_id (int): The ID of the guild. command_id (int): The ID of the command. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/applications/ { application_id } /guilds/ { guild_id } /commands/ { command_id } \" , guild_id = guild_id , ), ) edit_guild_application_command ( self , application_id , guild_id , command_id , * , name = None , description = None , options = None , default_permission = None ) async Makes an API call to edit a guild application command. Parameters: Name Type Description Default application_id int The ID of the application. required guild_id int The ID of the guild. required command_id int The ID of the command. required name Optional[str] The name of the command. None description Optional[str] The description of the command. None options Optional[List[Dict[str, Any]]] The options of the command. None default_permission Optional[bool] Whether the command is enabled by default. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def edit_guild_application_command ( self , application_id : int , guild_id : int , command_id : int , * , name : Optional [ str ] = None , description : Optional [ str ] = None , options : Optional [ List [ Dict [ str , Any ]]] = None , default_permission : Optional [ bool ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to edit a guild application command. Parameters: application_id (int): The ID of the application. guild_id (int): The ID of the guild. command_id (int): The ID of the command. name (Optional[str]): The name of the command. description (Optional[str]): The description of the command. options (Optional[List[Dict[str, Any]]]): The options of the command. default_permission (Optional[bool]): Whether the command is enabled by default. Returns: The data returned from the API. \"\"\" payload = update_payload ( {}, name = name , description = description , options = options , default_permission = default_permission , ) return await self . request ( \"PATCH\" , Route ( f \"/applications/ { application_id } /guilds/ { guild_id } /commands/ { command_id } \" , guild_id = guild_id , ), json = payload , ) delete_guild_application_command ( self , application_id , guild_id , command_id ) async Makes an API call to delete a guild application command. Parameters: Name Type Description Default application_id int The ID of the application. required guild_id int The ID of the guild. required command_id int The ID of the command. required Source code in lefi/http.py async def delete_guild_application_command ( self , application_id : int , guild_id : int , command_id : int ): \"\"\" Makes an API call to delete a guild application command. Parameters: application_id (int): The ID of the application. guild_id (int): The ID of the guild. command_id (int): The ID of the command. \"\"\" await self . request ( \"DELETE\" , Route ( f \"/applications/ { application_id } /guilds/ { guild_id } /commands/ { command_id } \" , guild_id = guild_id , ), ) bulk_overwrite_guild_application_commands ( self , application_id , guild_id , * , commands ) async Makes an API call to bulk overwrite guild application commands. Parameters: Name Type Description Default application_id int The ID of the application. required guild_id int The ID of the guild. required commands List[Dict[str, Any]] The commands to overwrite. required Returns: Type Description List[Dict[str, Any]] The data returned from the API. Source code in lefi/http.py async def bulk_overwrite_guild_application_commands ( self , application_id : int , guild_id : int , * , commands : List [ Dict [ str , Any ]] ) -> List [ Dict [ str , Any ]]: \"\"\" Makes an API call to bulk overwrite guild application commands. Parameters: application_id (int): The ID of the application. guild_id (int): The ID of the guild. commands (List[Dict[str, Any]]): The commands to overwrite. Returns: The data returned from the API. \"\"\" return await self . request ( \"PUT\" , Route ( f \"/applications/ { application_id } /guilds/ { guild_id } /commands\" , guild_id = guild_id , ), json = commands , ) get_guild_application_command_permissions ( self , application_id , guild_id ) async Makes an API call to get guild application command permissions. Parameters: Name Type Description Default application_id int The ID of the application. required guild_id int The ID of the guild. required command_id int The ID of the command. required Returns: Type Description List[Dict[str, Any]] The data returned from the API. Source code in lefi/http.py async def get_guild_application_command_permissions ( self , application_id : int , guild_id : int ) -> List [ Dict [ str , Any ]]: \"\"\" Makes an API call to get guild application command permissions. Parameters: application_id (int): The ID of the application. guild_id (int): The ID of the guild. command_id (int): The ID of the command. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/applications/ { application_id } /guilds/ { guild_id } /commands/permissions\" , guild_id = guild_id , ), ) get_application_command_permissions ( self , application_id , guild_id , command_id ) async Makes an API call to get application command permissions. Parameters: Name Type Description Default application_id int The ID of the application. required guild_id int The ID of the guild. required command_id int The ID of the command. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_application_command_permissions ( self , application_id : int , guild_id : int , command_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get application command permissions. Parameters: application_id (int): The ID of the application. guild_id (int): The ID of the guild. command_id (int): The ID of the command. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/applications/ { application_id } /guilds/ { guild_id } /commands/ { command_id } /permissions\" , guild_id = guild_id , ), ) edit_application_command_permissions ( self , application_id , guild_id , command_id , * , permissions ) async Makes an API call to edit application command permissions. Parameters: Name Type Description Default application_id int The ID of the application. required guild_id int The ID of the guild. required command_id int The ID of the command. required permissions List[Dict[str, Any]] The permissions to edit. required Returns: Type Description The data returned from the API. Source code in lefi/http.py async def edit_application_command_permissions ( self , application_id : int , guild_id : int , command_id : int , * , permissions : List [ Dict [ str , Any ]], ): \"\"\" Makes an API call to edit application command permissions. Parameters: application_id (int): The ID of the application. guild_id (int): The ID of the guild. command_id (int): The ID of the command. permissions (List[Dict[str, Any]]): The permissions to edit. Returns: The data returned from the API. \"\"\" payload = { \"permissions\" : permissions } return await self . request ( \"PATCH\" , Route ( f \"/applications/ { application_id } /guilds/ { guild_id } /commands/ { command_id } /permissions\" , guild_id = guild_id , ), json = payload , ) batch_edit_application_command_permissions ( self , application_id , guild_id , * , permissions ) async Makes an API call to batch edit application command permissions. Parameters: Name Type Description Default application_id int The ID of the application. required guild_id int The ID of the guild. required permissions List[Dict[str, Any]] The permissions to edit. required Returns: Type Description The data returned from the API. Source code in lefi/http.py async def batch_edit_application_command_permissions ( self , application_id : int , guild_id : int , * , permissions : List [ Dict [ str , Any ]] ): \"\"\" Makes an API call to batch edit application command permissions. Parameters: application_id (int): The ID of the application. guild_id (int): The ID of the guild. permissions (List[Dict[str, Any]]): The permissions to edit. Returns: The data returned from the API. \"\"\" return await self . request ( \"PATCH\" , Route ( f \"/applications/ { application_id } /guilds/ { guild_id } /commands/permissions\" , guild_id = guild_id , ), json = permissions , ) create_interaction_response ( self , interaction_id , interaction_token , * , type , data = None ) async Makes an API call to create an interaction response. Parameters: Name Type Description Default interaction_id int The ID of the interaction. required interaction_token str The token of the interaction. required type int The type of the response. required data Optional[Dict[str, Any]] The data of the response. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def create_interaction_response ( self , interaction_id : int , interaction_token : str , * , type : int , data : Optional [ Dict [ str , Any ]] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to create an interaction response. Parameters: interaction_id (int): The ID of the interaction. interaction_token (str): The token of the interaction. type (int): The type of the response. data (Optional[Dict[str, Any]]): The data of the response. Returns: The data returned from the API. \"\"\" payload = update_payload ({}, type = type , data = data ) return await self . request ( \"POST\" , Route ( f \"/interactions/ { interaction_id } / { interaction_token } /callback\" ), json = payload , ) get_original_interaction_response ( self , application_id , interaction_token ) async Makes an API call to get the original interaction response. Parameters: Name Type Description Default application_id int The ID of the application. required interaction_token str The token of the interaction. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_original_interaction_response ( self , application_id : int , interaction_token : str ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get the original interaction response. Parameters: application_id (int): The ID of the application. interaction_token (str): The token of the interaction. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/webhooks/ { application_id } / { interaction_token } /messages/@original\" ), ) edit_original_interaction_response ( self , application_id , interaction_token , * , content = None , embeds = None , file = None , allowed_mentions = None , componenets = None , attachments = None ) async Makes an API call to edit the original interaction response. Parameters: Name Type Description Default application_id int The ID of the application. required interaction_token str The token of the interaction. required content Optional[str] The content of the response. None embeds Optional[List[Dict[str, Any]]] The embeds of the response. None file Optional[File] The file of the response. None allowed_mentions Optional[Dict[str, Any]] The allowed mentions of the response. None componenets Optional[List[Dict[str, Any]]] The components of the response. None attachments Optional[List[Dict[str, Any]]] The attachments of the response. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def edit_original_interaction_response ( self , application_id : int , interaction_token : str , * , content : Optional [ str ] = None , embeds : Optional [ List [ Dict [ str , Any ]]] = None , file : Optional [ File ] = None , allowed_mentions : Optional [ Dict [ str , Any ]] = None , componenets : Optional [ List [ Dict [ str , Any ]]] = None , attachments : Optional [ List [ Dict [ str , Any ]]] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to edit the original interaction response. Parameters: application_id (int): The ID of the application. interaction_token (str): The token of the interaction. content (Optional[str]): The content of the response. embeds (Optional[List[Dict[str, Any]]]): The embeds of the response. file (Optional[File]): The file of the response. allowed_mentions (Optional[Dict[str, Any]]): The allowed mentions of the response. componenets (Optional[List[Dict[str, Any]]]): The components of the response. attachments (Optional[List[Dict[str, Any]]]): The attachments of the response. Returns: The data returned from the API. \"\"\" form = self . form_helper ([ file ]) payload = update_payload ( {}, content = content , embeds = embeds , allowed_mentions = allowed_mentions , componenets = componenets , attachments = attachments , ) return await self . request ( \"PATCH\" , Route ( f \"/webhooks/ { application_id } / { interaction_token } /messages/@original\" ), json = payload , form = form , ) delete_original_interaction_response ( self , application_id , interaction_token ) async Makes an API call to delete the original interaction response. Parameters: Name Type Description Default application_id int The ID of the application. required interaction_token str The token of the interaction. required Returns: Type Description The data returned from the API. Source code in lefi/http.py async def delete_original_interaction_response ( self , application_id : int , interaction_token : str ): \"\"\" Makes an API call to delete the original interaction response. Parameters: application_id (int): The ID of the application. interaction_token (str): The token of the interaction. Returns: The data returned from the API. \"\"\" await self . request ( \"DELETE\" , Route ( f \"/webhooks/ { application_id } / { interaction_token } /messages/@original\" ), ) create_followup_message ( self , application_id , interaction_token , * , content = None , embeds = None , file = None , allowed_mentions = None , componenets = None , attachments = None , flags = None ) async Makes an API call to create a followup message. Parameters: Name Type Description Default application_id int The ID of the application. required interaction_token str The token of the interaction. required content Optional[str] The content of the response. None embeds Optional[List[Dict[str, Any]]] The embeds of the response. None file Optional[File] The file of the response. None allowed_mentions Optional[Dict[str, Any]] The allowed mentions of the response. None componenets Optional[List[Dict[str, Any]]] The components of the response. None attachments Optional[List[Dict[str, Any]]] The attachments of the response. None flags Optional[int] The flags of the response. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def create_followup_message ( self , application_id : int , interaction_token : str , * , content : Optional [ str ] = None , embeds : Optional [ List [ Dict [ str , Any ]]] = None , file : Optional [ File ] = None , allowed_mentions : Optional [ Dict [ str , Any ]] = None , componenets : Optional [ List [ Dict [ str , Any ]]] = None , attachments : Optional [ List [ Dict [ str , Any ]]] = None , flags : Optional [ int ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to create a followup message. Parameters: application_id (int): The ID of the application. interaction_token (str): The token of the interaction. content (Optional[str]): The content of the response. embeds (Optional[List[Dict[str, Any]]]): The embeds of the response. file (Optional[File]): The file of the response. allowed_mentions (Optional[Dict[str, Any]]): The allowed mentions of the response. componenets (Optional[List[Dict[str, Any]]]): The components of the response. attachments (Optional[List[Dict[str, Any]]]): The attachments of the response. flags (Optional[int]): The flags of the response. Returns: The data returned from the API. \"\"\" form = self . form_helper ([ file ]) payload = update_payload ( {}, content = content , embeds = embeds , allowed_mentions = allowed_mentions , componenets = componenets , attachments = attachments , flags = flags , ) return await self . request ( \"POST\" , Route ( f \"/webhooks/ { application_id } / { interaction_token } /messages\" ), json = payload , form = form , ) get_followup_message ( self , application_id , interaction_token , message_id ) async Makes an API call to get a followup message. Parameters: Name Type Description Default application_id int The ID of the application. required interaction_token str The token of the interaction. required message_id int The ID of the message. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_followup_message ( self , application_id : int , interaction_token : str , message_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a followup message. Parameters: application_id (int): The ID of the application. interaction_token (str): The token of the interaction. message_id (int): The ID of the message. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/webhooks/ { application_id } / { interaction_token } /messages/ { message_id } \" ), ) edit_followup_message ( self , application_id , interaction_token , message_id , * , content = None , embeds = None , file = None , allowed_mentions = None , componenets = None , attachments = None ) async Makes an API call to edit a followup message. Parameters: Name Type Description Default application_id int The ID of the application. required interaction_token str The token of the interaction. required message_id int The ID of the message. required content Optional[str] The content of the response. None embeds Optional[List[Dict[str, Any]]] The embeds of the response. None file Optional[File] The file of the response. None allowed_mentions Optional[Dict[str, Any]] The allowed mentions of the response. None componenets Optional[List[Dict[str, Any]]] The components of the response. None attachments Optional[List[Dict[str, Any]]] The attachments of the response. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def edit_followup_message ( self , application_id : int , interaction_token : str , message_id : int , * , content : Optional [ str ] = None , embeds : Optional [ List [ Dict [ str , Any ]]] = None , file : Optional [ File ] = None , allowed_mentions : Optional [ Dict [ str , Any ]] = None , componenets : Optional [ List [ Dict [ str , Any ]]] = None , attachments : Optional [ List [ Dict [ str , Any ]]] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to edit a followup message. Parameters: application_id (int): The ID of the application. interaction_token (str): The token of the interaction. message_id (int): The ID of the message. content (Optional[str]): The content of the response. embeds (Optional[List[Dict[str, Any]]]): The embeds of the response. file (Optional[File]): The file of the response. allowed_mentions (Optional[Dict[str, Any]]): The allowed mentions of the response. componenets (Optional[List[Dict[str, Any]]]): The components of the response. attachments (Optional[List[Dict[str, Any]]]): The attachments of the response. Returns: The data returned from the API. \"\"\" form = self . form_helper ([ file ]) payload = update_payload ( {}, content = content , embeds = embeds , allowed_mentions = allowed_mentions , componenets = componenets , attachments = attachments , ) return await self . request ( \"PATCH\" , Route ( f \"/webhooks/ { application_id } / { interaction_token } /messages/ { message_id } \" ), json = payload , form = form , ) delete_followup_message ( self , application_id , interaction_token , message_id ) async Makes an API call to delete a followup message. Parameters: Name Type Description Default application_id int The ID of the application. required interaction_token str The token of the interaction. required message_id int The ID of the message. required Source code in lefi/http.py async def delete_followup_message ( self , application_id : int , interaction_token : str , message_id : int ): \"\"\" Makes an API call to delete a followup message. Parameters: application_id (int): The ID of the application. interaction_token (str): The token of the interaction. message_id (int): The ID of the message. \"\"\" await self . request ( \"DELETE\" , Route ( f \"/webhooks/ { application_id } / { interaction_token } /messages/ { message_id } \" ), )","title":"HTTPClient"},{"location":"API-Reference/http/#lefi.http.HTTPClient.__init__","text":"Parameters: Name Type Description Default token str The token to use for authorzation. required loop asyncio.AbstractEventLoop The asyncio.AbstractEventLoop to use. required session aiohttp.ClientSession The aiohttp.ClientSession to use for sending requests. required Source code in lefi/http.py def __init__ ( self , token : str , loop : asyncio . AbstractEventLoop ) -> None : \"\"\" Parameters: token (str): The token to use for authorzation. loop (asyncio.AbstractEventLoop): The [asyncio.AbstractEventLoop][] to use. session (aiohttp.ClientSession): The [aiohttp.ClientSession][] to use for sending requests. \"\"\" self . token : str = token self . loop : asyncio . AbstractEventLoop = loop self . session : aiohttp . ClientSession = None # type: ignore self . semaphores : Dict [ str , asyncio . Semaphore ] = {}","title":"__init__()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.close","text":"Closes the aiohttp.ClientSession instance. Source code in lefi/http.py async def close ( self ) -> None : \"\"\" Closes the [aiohttp.ClientSession][] instance. \"\"\" await self . session . close ()","title":"close()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.request","text":"Makes a request to the discord API. Parameters: Name Type Description Default method str The method for the request. required route lefi.Route The endpoint which to send the request to. required **kwargs Any Any extra options to pass to aiohttp.ClientSession.request {} Returns: Type Description Any The data returned from the request. Source code in lefi/http.py async def request ( self , method : str , route : Route , ** kwargs ) -> Any : \"\"\" Makes a request to the discord API. Parameters: method (str): The method for the request. route (lefi.Route): The endpoint which to send the request to. **kwargs (Any): Any extra options to pass to [aiohttp.ClientSession.request][] Returns: The data returned from the request. Raises: [lefi.errors.HTTPException][] if any error was received from the request. \"\"\" if self . session is None or self . session . closed : self . session = await self . _create_session () headers : Dict = { \"Authorization\" : f \"Bot { self . token } \" } if reason := kwargs . get ( \"reason\" ): headers [ \"X-Audit-Log-Reason\" ] = reason if form := kwargs . pop ( \"form\" , []): formdata = aiohttp . FormData () payload = kwargs . pop ( \"json\" , None ) if payload : formdata . add_field ( \"payload_json\" , value = json . dumps ( payload )) for params in form : formdata . add_field ( ** params ) kwargs [ \"data\" ] = formdata async with Ratelimiter ( self , route , method , ** kwargs , headers = headers ) as handler : return await handler . request ()","title":"request()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_bot_gateway","text":"A method which gets the gateway url. Returns: Type Description Dict A dict which should contain the url. Source code in lefi/http.py async def get_bot_gateway ( self ) -> Dict : \"\"\" A method which gets the gateway url. Returns: A dict which should contain the url. \"\"\" return await self . request ( \"GET\" , Route ( \"/gateway/bot\" ))","title":"get_bot_gateway()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.ws_connect","text":"A method which attempts to connect to the websocket. Returns: Type Description aiohttp.ClientWebSocketResponse A aiohttp.ClientWebSocketResponse instance. Source code in lefi/http.py async def ws_connect ( self , url : str ) -> aiohttp . ClientWebSocketResponse : \"\"\" A method which attempts to connect to the websocket. Returns: A [aiohttp.ClientWebSocketResponse][] instance. \"\"\" return await self . session . ws_connect ( url )","title":"ws_connect()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.read_from_url","text":"A method which reads the data from a url. Parameters: Name Type Description Default url str The url to read from. required Returns: Type Description bytes The data read from the url. Source code in lefi/http.py async def read_from_url ( self , url : str ) -> bytes : \"\"\" A method which reads the data from a url. Parameters: url (str): The url to read from. Returns: The data read from the url. \"\"\" async with self . session . get ( url ) as resp : return await resp . read ()","title":"read_from_url()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.login","text":"Checks to see if the token given is valid. Source code in lefi/http.py async def login ( self ) -> None : \"\"\" Checks to see if the token given is valid. Raises: ValueError if an invalid token was passed. \"\"\" try : await self . get_current_user () except ( Forbidden , Unauthorized ): raise ValueError ( \"Invalid token\" )","title":"login()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.build_file_form","text":"Builds a form for a file upload. Parameters: Name Type Description Default file lefi.File The file to upload. required index Optional[int] The index of the file. None Returns: Type Description Dict A dict which can be used as a form for a file upload. Source code in lefi/http.py def build_file_form ( self , file : File , index : Optional [ int ] = None ) -> Dict : \"\"\" Builds a form for a file upload. Parameters: file (lefi.File): The file to upload. index (Optional[int]): The index of the file. Returns: A dict which can be used as a form for a file upload. \"\"\" return { \"name\" : f \"file- { index } \" if index else \"file\" , \"value\" : file , \"filename\" : file . filename , \"content_type\" : \"application/octect-stream\" , }","title":"build_file_form()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.form_helper","text":"A helper method which formats the files to be sent in a multipart/form-data request. Parameters: Name Type Description Default files Optional[List[lefi.File]] The files to send. None Returns: Type Description List[Dict] A list which should contain the files. Source code in lefi/http.py def form_helper ( self , files : Optional [ List [ Optional [ File ]]] = None ) -> List [ Dict ]: \"\"\" A helper method which formats the files to be sent in a multipart/form-data request. Parameters: files (Optional[List[lefi.File]]): The files to send. Returns: A list which should contain the files. \"\"\" form : List [ Dict ] = [] if not files : return form if len ( files ) == 1 : file = files [ 0 ] if not file : return form form . append ( self . build_file_form ( file )) return form for index , file in enumerate ( files ): if not file : continue param = self . build_file_form ( file , index ) form . append ( param ) return form","title":"form_helper()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_channel","text":"Makes an API call to get a channel. Parameters: Name Type Description Default channel_id int The channel's ID. required Returns: Type Description Dict[str, Any] A dict representing the channel. Source code in lefi/http.py async def get_channel ( self , channel_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a channel. Parameters: channel_id (int): The channel's ID. Returns: A dict representing the channel. \"\"\" return await self . request ( \"GET\" , Route ( f \"/channels/ { channel_id } \" , channel_id = channel_id ) )","title":"get_channel()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.edit_text_channel","text":"Makes an API call to edit a text channel. Parameters: Name Type Description Default channel_id int The channel id representing the channel to edit. required name Optional[str] The new name for the channel. None type Optional[int] The new type for the channel. None position Optional[int] The new position for the channel. None topic Optional[str] The new topic for the channel. None nsfw Optional[bool] Whether or not the channel should be NSFW. None rate_limit_per_user Optional[int] The new slowmode of the channel. None permissions_overwrites Optional[List[Dict[str, Any]]] The new permission overwrites for the channel. required default_auto_archive_duration Optional[List[Dict[str, Any]]] New time for threads to auto archive. None Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def edit_text_channel ( self , channel_id : int , * , name : Optional [ str ] = None , type : Optional [ int ] = None , position : Optional [ int ] = None , topic : Optional [ str ] = None , nsfw : Optional [ bool ] = None , rate_limit_per_user : Optional [ int ] = None , permission_overwrites : Optional [ List [ Dict [ str , Any ]]] = None , default_auto_archive_duration : Optional [ int ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to edit a text channel. Parameters: channel_id (int): The channel id representing the channel to edit. name (Optional[str]): The new name for the channel. type (Optional[int]): The new type for the channel. position (Optional[int]): The new position for the channel. topic (Optional[str]): The new topic for the channel. nsfw (Optional[bool]): Whether or not the channel should be NSFW. rate_limit_per_user (Optional[int]): The new slowmode of the channel. permissions_overwrites (Optional[List[Dict[str, Any]]]): The new permission overwrites for the channel. default_auto_archive_duration (Optional[List[Dict[str, Any]]]): New time for threads to auto archive. Returns: The data received from the API after making the call. \"\"\" payload = update_payload ( {}, name = name , type = type , position = position , topic = topic , nsfw = nsfw , rate_limit_per_user = rate_limit_per_user , permission_overwrites = permission_overwrites , default_auto_archive_duration = default_auto_archive_duration , ) return await self . request ( \"PATCH\" , Route ( f \"/channels/ { channel_id } \" , channel_id = channel_id ), json = payload , )","title":"edit_text_channel()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.edit_voice_channel","text":"Makes an API call to edit a voice channel. Parameters: Name Type Description Default channel_id int The ID representing the voice channel to edit. required name Optional[str] The new name to give the channel. None position Optional[int] The new position of the channel. None bitrate Optional[int] The new bitrate of the channel. None user_limit Optional[int] The new user limit of the channel. None rtc_region Optional[str] The new rtc region of the channel. None video_quality_mode Optional[int] The new video quality of the channel. None sync_permissions Optional[bool] Whether or not to sync the permissions. None permissions_overwrites Optional[List[Dict[str, Any]]] The new permissions ovewrites for the channel. required Returns: Type Description Dict[str, Any] The data received from the API after the call. Source code in lefi/http.py async def edit_voice_channel ( self , channel_id : int , * , name : Optional [ str ] = None , position : Optional [ int ] = None , bitrate : Optional [ int ] = None , user_limit : Optional [ int ] = None , rtc_region : Optional [ str ] = None , video_quality_mode : Optional [ int ] = None , sync_permissions : Optional [ bool ] = None , permission_overwrites : Optional [ List [ Dict [ str , Any ]]] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to edit a voice channel. Parameters: channel_id (int): The ID representing the voice channel to edit. name (Optional[str]): The new name to give the channel. position (Optional[int]): The new position of the channel. bitrate (Optional[int]): The new bitrate of the channel. user_limit (Optional[int]): The new user limit of the channel. rtc_region (Optional[str]): The new rtc region of the channel. video_quality_mode (Optional[int]): The new video quality of the channel. sync_permissions (Optional[bool]): Whether or not to sync the permissions. permissions_overwrites (Optional[List[Dict[str, Any]]]): The new permissions ovewrites for the channel. Returns: The data received from the API after the call. \"\"\" payload = update_payload ( {}, name = name , position = position , bitrate = bitrate , user_limit = user_limit , rtc_region = rtc_region , video_quality_mode = video_quality_mode , sync_permissions = sync_permissions , permissions_overwrites = permission_overwrites , ) return await self . request ( \"PATCH\" , Route ( f \"/channels/ { channel_id } \" , channel_id = channel_id ), json = payload , )","title":"edit_voice_channel()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.delete_channel","text":"Makes an API call to delete a channel. Parameters: Name Type Description Default channel_id int The ID representing the channel to delete. required Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def delete_channel ( self , channel_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to delete a channel. Parameters: channel_id (int): The ID representing the channel to delete. Returns: The data received from the API after making the call. \"\"\" return await self . request ( \"DELETE\" , Route ( f \"/channels/ { channel_id } \" , channel_id = channel_id ) )","title":"delete_channel()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_channel_messages","text":"Makes an API call to get a list of messages in a channel. Only returns messages within the range of the parameters passed. Parameters: Name Type Description Default channel_id int The ID representing the channel. required around Optional[int] Gets messages around this message ID. None before Optional[int] Gets messages before this message ID. None after Optional[int] Gets messages after this message ID. None limit int THe amount of messages to grab. 50 Returns: Type Description List[Dict[str, Any]] The data received after making the call. Source code in lefi/http.py async def get_channel_messages ( self , channel_id : int , * , around : Optional [ int ] = None , before : Optional [ int ] = None , after : Optional [ int ] = None , limit : int = 50 , ) -> List [ Dict [ str , Any ]]: \"\"\" Makes an API call to get a list of messages in a channel. Only returns messages within the range of the parameters passed. Parameters: channel_id (int): The ID representing the channel. around (Optional[int]): Gets messages around this message ID. before (Optional[int]): Gets messages before this message ID. after (Optional[int]): Gets messages after this message ID. limit (int): THe amount of messages to grab. Returns: The data received after making the call. \"\"\" params = { \"limit\" : limit } update_payload ( params , around = around , before = before , after = after ) return await self . request ( \"GET\" , Route ( f \"/channels/ { channel_id } /messages\" , channel_id = channel_id ), params = params , )","title":"get_channel_messages()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_channel_message","text":"Makes an API call to get a specific message by ID. Parameters: Name Type Description Default channel_id int The channel ID which the message is in. required message_id int The messages ID. required Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def get_channel_message ( self , channel_id : int , message_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a specific message by ID. Parameters: channel_id (int): The channel ID which the message is in. message_id (int): The messages ID. Returns: The data received from the API after making the call. \"\"\" return await self . request ( \"GET\" , Route ( f \"/channels/ { channel_id } /messages/ { message_id } \" , channel_id = channel_id ), )","title":"get_channel_message()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.send_message","text":"Makes an API call to send a message. Parameters: Name Type Description Default channel_id int The ID of the channel which to send the message in. required content Optional[str] The content of the message. None tts bool Whether or not to send the message with text-to-speech. False embeds Optional[List[Dict[str, Any]]] The list of embeds to send. None message_reference Optional[Dict[str, Any]] The messages to reference when sending the message. None components Optional[List[Dict[str, Any]]] The components to attach to the message. None sticker_ids Optional[List[int]] The stickers to send with the message. None Note Max embeds that can sent at a time is 10. Source code in lefi/http.py async def send_message ( self , channel_id : int , content : Optional [ str ] = None , * , tts : bool = False , embeds : Optional [ List [ Dict [ str , Any ]]] = None , allowed_mentions : Optional [ Dict [ str , Any ]] = None , message_reference : Optional [ Dict [ str , Any ]] = None , components : Optional [ List [ Dict [ str , Any ]]] = None , sticker_ids : Optional [ List [ int ]] = None , files : Optional [ List [ File ]] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to send a message. Parameters: channel_id (int): The ID of the channel which to send the message in. content (Optional[str]): The content of the message. tts (bool): Whether or not to send the message with text-to-speech. embeds (Optional[List[Dict[str, Any]]]): The list of embeds to send. message_reference (Optional[Dict[str, Any]]): The messages to reference when sending the message. components (Optional[List[Dict[str, Any]]]): The components to attach to the message. sticker_ids (Optional[List[int]]): The stickers to send with the message. Note: Max embeds that can sent at a time is 10. \"\"\" payload = { \"tts\" : tts } form = self . form_helper ( files ) # type: ignore update_payload ( payload , content = content , embeds = embeds , allowed_mentions = allowed_mentions , message_reference = message_reference , components = components , sticker_ids = sticker_ids , ) return await self . request ( \"POST\" , Route ( f \"/channels/ { channel_id } /messages\" , channel_id = channel_id ), json = payload , form = form , )","title":"send_message()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.crosspost_message","text":"Makes an API call to crosspost a message. Parameters: Name Type Description Default channel_id int The ID of the channel to crosspost to. required message_id int The ID of the message which to crosspost. required Returns: Type Description Dict[str, Any] The data received after making the call. Source code in lefi/http.py async def crosspost_message ( self , channel_id : int , message_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to crosspost a message. Parameters: channel_id (int): The ID of the channel to crosspost to. message_id (int): The ID of the message which to crosspost. Returns: The data received after making the call. \"\"\" return await self . request ( \"POST\" , Route ( f \"/channels/ { channel_id } /messages/ { message_id } /crosspost\" , channel_id = channel_id , ), )","title":"crosspost_message()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.create_reaction","text":"Makes an API call to add a reaction to a message. Parameters: Name Type Description Default channel_id int The ID of the channel which the target message is in. required message_id int The ID of the message which to add the reaction to. required emoji str The emoji which to add. required Returns: Type Description The data received from the API after making the call. Source code in lefi/http.py async def create_reaction ( self , channel_id : int , message_id : int , emoji : str ): \"\"\" Makes an API call to add a reaction to a message. Parameters: channel_id (int): The ID of the channel which the target message is in. message_id (int): The ID of the message which to add the reaction to. emoji (str): The emoji which to add. Returns: The data received from the API after making the call. \"\"\" return await self . request ( \"PUT\" , Route ( f \"/channels/ { channel_id } /messages/ { message_id } /reactions/ { emoji } /@me\" , channel_id = channel_id , ), )","title":"create_reaction()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.delete_reaction","text":"Makes an API call to delete a reaction. Parameters: Name Type Description Default channel_id int The ID of the channel which the target message is in. required message_id int The ID of the message. required emoji str The emoji to remove from the message's reactions. required user_id Optional[int] The ID of the user to remove from the reactions. None Returns: Type Description None The data received from the API after making the call. Note If no user_id is given it will delete the client's reaction. Source code in lefi/http.py async def delete_reaction ( self , channel_id : int , message_id : int , emoji : str , user_id : Optional [ int ] = None , ) -> None : \"\"\" Makes an API call to delete a reaction. Parameters: channel_id (int): The ID of the channel which the target message is in. message_id (int): The ID of the message. emoji (str): The emoji to remove from the message's reactions. user_id (Optional[int]): The ID of the user to remove from the reactions. Returns: The data received from the API after making the call. Note: If no user_id is given it will delete the client's reaction. \"\"\" if user_id is not None : path = f \"/channels/ { channel_id } /messages/ { message_id } /reactions/ { emoji } / { user_id } \" else : path = f \"/channels/ { channel_id } /messages/ { message_id } /reactions/ { emoji } /@me\" await self . request ( \"DELETE\" , Route ( path , channel_id = channel_id ))","title":"delete_reaction()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_reactions","text":"Makes an API call to get a list of users who reacted to a message.. Parameters: Name Type Description Default channel_id int The ID of the channel which the target message is in. required message_id int The ID of the message. required emoji str The emoji from which to grab users from. required after int Grab users after this user ID. None limit int The max amount of users to grab. 25 Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def get_reactions ( self , channel_id : int , message_id : int , emoji : str , * , after : Optional [ int ] = None , limit : int = 25 , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a list of users who reacted to a message.. Parameters: channel_id (int): The ID of the channel which the target message is in. message_id (int): The ID of the message. emoji (str): The emoji from which to grab users from. after (int): Grab users after this user ID. limit (int): The max amount of users to grab. Returns: The data received from the API after making the call. \"\"\" params = { \"limit\" : limit } update_payload ( params , after = after ) return await self . request ( \"GET\" , Route ( f \"/channels/ { channel_id } /messages/ { message_id } /reactions/ { emoji } \" , channel_id = channel_id , ), params = params , )","title":"get_reactions()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.delete_all_reactions","text":"Makes an API call to remove all reactions of a message. Parameters: Name Type Description Default channel_id int The channel which the target message is in. required message_id int The ID of the message. required emoji str The reaction to remove. required Returns: Type Description Dict[str, Any] The data received from the API After making the call. Source code in lefi/http.py async def delete_all_reactions ( self , channel_id : int , message_id : int , emoji : str ) -> Dict [ str , Any ]: \"\"\" Makes an API call to remove all reactions of a message. Parameters: channel_id (int): The channel which the target message is in. message_id (int): The ID of the message. emoji (str): The reaction to remove. Returns: The data received from the API After making the call. \"\"\" return await self . request ( \"DELETE\" , Route ( f \"/channels/ { channel_id } /messages/ { message_id } /reactions/ { emoji } \" , channel_id = channel_id , ), )","title":"delete_all_reactions()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.edit_message","text":"Makes an API call to edit a message. Parameters: Name Type Description Default channel_id int The ID of the channel which the target message is in. required message_id int The ID of the message. required content Optional[str] The new content of the message. None embeds Optional[List[Dict[str, Any]]] The new embeds of the message. None flags Optional[int] The new flags of the message. None allowed_mentions Optional[int] The new allowed mentions of the message. None attachments Optional[List[Dict[str, Any]]] The new attachments of the message. None components Optional[List[Dict[str, Any]]] The new components of the message. None Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def edit_message ( self , channel_id : int , message_id : int , * , content : Optional [ str ] = None , embeds : Optional [ List [ Dict [ str , Any ]]] = None , flags : Optional [ int ] = None , allowed_mentions : Optional [ Dict [ str , Any ]] = None , attachments : Optional [ List [ Dict [ str , Any ]]] = None , components : Optional [ List [ Dict [ str , Any ]]] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to edit a message. Parameters: channel_id (int): The ID of the channel which the target message is in. message_id (int): The ID of the message. content (Optional[str]): The new content of the message. embeds (Optional[List[Dict[str, Any]]]): The new embeds of the message. flags (Optional[int]): The new flags of the message. allowed_mentions (Optional[int]): The new allowed mentions of the message. attachments (Optional[List[Dict[str, Any]]]): The new attachments of the message. components (Optional[List[Dict[str, Any]]]): The new components of the message. Returns: The data received from the API after making the call. \"\"\" payload : dict = {} update_payload ( payload , content = content , embeds = embeds , flags = flags , allowed_mentions = allowed_mentions , attachments = attachments , components = components , ) return await self . request ( \"PATCH\" , Route ( f \"/channels/ { channel_id } /messages/ { message_id } \" , channel_id = channel_id ), json = payload , )","title":"edit_message()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.delete_message","text":"Makes an API call to delete a message. Parameters: Name Type Description Default channel_id int The ID of the channel which the message is in. required message_id int The ID Of the message. required Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def delete_message ( self , channel_id : int , message_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to delete a message. Parameters: channel_id (int): The ID of the channel which the message is in. message_id (int): The ID Of the message. Returns: The data received from the API after making the call. \"\"\" return await self . request ( \"DELETE\" , Route ( f \"/channels/ { channel_id } /messages/ { message_id } \" , channel_id = channel_id ), )","title":"delete_message()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.bulk_delete_messages","text":"Makes an API call to delete multiple messages. Parameters: Name Type Description Default channel_id int The ID of the channel which the message is in. required message_ids List[int] The list of ID's representing messages of which to delete. required Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def bulk_delete_messages ( self , channel_id : int , message_ids : List [ int ] ) -> Dict [ str , Any ]: \"\"\" Makes an API call to delete multiple messages. Parameters: channel_id (int): The ID of the channel which the message is in. message_ids (List[int]): The list of ID's representing messages of which to delete. Returns: The data received from the API after making the call. \"\"\" payload = { \"messages\" : message_ids } return await self . request ( \"POST\" , Route ( f \"/channels/ { channel_id } /messages/bulk-delete\" , channel_id = channel_id ), json = payload , )","title":"bulk_delete_messages()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.edit_channel_permissions","text":"Makes an API call to edit a channels permissions. Parameters: Name Type Description Default channel_id int The ID of the channel. required overwrite_id int The ID of the overwrite. required allow Optional[int] The bitwise value of all allowed permissions. None deny Optional[int] The bitwise value of all denied permissison. None type Optional[int] The type, 0 being a role and 1 being a member. None Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def edit_channel_permissions ( self , channel_id : int , overwrite_id : int , * , allow : Optional [ int ] = None , deny : Optional [ int ] = None , type : Optional [ int ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to edit a channels permissions. Parameters: channel_id (int): The ID of the channel. overwrite_id (int): The ID of the overwrite. allow (Optional[int]): The bitwise value of all allowed permissions. deny (Optional[int]): The bitwise value of all denied permissison. type (Optional[int]): The type, 0 being a role and 1 being a member. Returns: The data received from the API after making the call. \"\"\" payload : dict = {} update_payload ( payload , allow = allow , deny = deny , type = type ) return await self . request ( \"PUT\" , Route ( f \"/channels/ { channel_id } /permissions/ { overwrite_id } \" , channel_id = channel_id , ), json = payload , )","title":"edit_channel_permissions()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.delete_channel_permissions","text":"Makes an API call to delete an overwrite from a channel. Parameters: Name Type Description Default channel_id int The ID of the channel. required overwrite_id int The ID of the overwrite. required Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def delete_channel_permissions ( self , channel_id : int , overwrite_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to delete an overwrite from a channel. Parameters: channel_id (int): The ID of the channel. overwrite_id (int): The ID of the overwrite. Returns: The data received from the API after making the call. \"\"\" return await self . request ( \"DELETE\" , Route ( f \"/channels/ { channel_id } /permissions/ { overwrite_id } \" , channel_id = channel_id , ), )","title":"delete_channel_permissions()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_channel_invites","text":"Makes an API call to get a channels invites. Parameters: Name Type Description Default channel_id int The ID of the channel. required Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def get_channel_invites ( self , channel_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a channels invites. Parameters: channel_id (int): The ID of the channel. Returns: The data received from the API after making the call. \"\"\" return await self . request ( \"GET\" , Route ( f \"/channels/ { channel_id } /invites\" , channel_id = channel_id ) )","title":"get_channel_invites()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.create_channel_invite","text":"Makes an API call to create an invite. Parameters: Name Type Description Default channel_id int The ID of the channel. required max_age int The max age of the invite. 86400 max_uses int The max uses of the invite. 0 if unlimited. 0 temporary bool Whether or not the invite is temporary. False unique bool Whether or not the invite is unique. False target_type Optional[int] The type of the invite. For voice channels. None target_user_id Optional[int] The ID of the user whose stream to invite to. For voice channels. None target_application_id Optional[int] The ID of embedded application to invite from. For target type 2. None Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def create_channel_invite ( self , channel_id : int , * , max_age : int = 86400 , max_uses : int = 0 , temporary : bool = False , unique : bool = False , target_type : Optional [ int ] = None , target_user_id : Optional [ int ] = None , target_application_id : Optional [ int ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to create an invite. Parameters: channel_id (int): The ID of the channel. max_age (int): The max age of the invite. max_uses (int): The max uses of the invite. 0 if unlimited. temporary (bool): Whether or not the invite is temporary. unique (bool): Whether or not the invite is unique. target_type (Optional[int]): The type of the invite. For voice channels. target_user_id (Optional[int]): The ID of the user whose stream to invite to. For voice channels. target_application_id (Optional[int]): The ID of embedded application to invite from. For target type 2. Returns: The data received from the API after making the call. \"\"\" payload = { \"max_age\" : max_age , \"max_uses\" : max_uses , \"temporary\" : temporary , \"unique\" : unique , } update_payload ( payload , target_type = target_type , target_user_id = target_user_id , target_application_id = target_application_id , ) return await self . request ( \"POST\" , Route ( f \"/channels/ { channel_id } /invites\" , channel_id = channel_id ), json = payload , )","title":"create_channel_invite()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.follow_news_channel","text":"Makes an API call to follow a news channel to send messages to a target channel. Parameters: Name Type Description Default channel_id int The ID Of the channel. required webhook_channel_id int The target channel. required Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def follow_news_channel ( self , channel_id : int , webhook_channel_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to follow a news channel to send messages to a target channel. Parameters: channel_id (int): The ID Of the channel. webhook_channel_id (int): The target channel. Returns: The data received from the API after making the call. \"\"\" payload = { \"webhook_channel_id\" : webhook_channel_id } return await self . request ( \"PUT\" , Route ( f \"/channels/ { channel_id } /followers/@me\" , channel_id = channel_id ), json = payload , )","title":"follow_news_channel()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.trigger_typing","text":"Makes an API call to trigger typing. Parameters: Name Type Description Default channel_id int The ID of the channel which to trigger typing in. required Returns: Type Description Dict[str, Any] The data received from the API After making the call. Source code in lefi/http.py async def trigger_typing ( self , channel_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to trigger typing. Parameters: channel_id (int): The ID of the channel which to trigger typing in. Returns: The data received from the API After making the call. \"\"\" return await self . request ( \"POST\" , Route ( f \"/channels/ { channel_id } /typing\" , channel_id = channel_id ) )","title":"trigger_typing()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_pinned_messages","text":"Makes an API call to get the pinned messages of a channel. Parameters: Name Type Description Default channel_id int The ID of the channel which to grab pinned messages from. required Returns: Type Description List[Dict[str, Any]] The data received from the API after making the call. Source code in lefi/http.py async def get_pinned_messages ( self , channel_id : int ) -> List [ Dict [ str , Any ]]: \"\"\" Makes an API call to get the pinned messages of a channel. Parameters: channel_id (int): The ID of the channel which to grab pinned messages from. Returns: The data received from the API after making the call. \"\"\" return await self . request ( \"GET\" , Route ( f \"/channels/ { channel_id } /pins\" , channel_id = channel_id ) )","title":"get_pinned_messages()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.pin_message","text":"Makes an API call to pin a message. Parameters: Name Type Description Default channel_id int The ID of the channel where the message is. required message_id int The ID of the message. required Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def pin_message ( self , channel_id : int , message_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to pin a message. Parameters: channel_id (int): The ID of the channel where the message is. message_id (int): The ID of the message. Returns: The data received from the API after making the call. \"\"\" return await self . request ( \"PUT\" , Route ( f \"/channels/ { channel_id } /pins/ { message_id } \" , channel_id = channel_id ), )","title":"pin_message()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.unpin_message","text":"Makes an API call to unpin a message. Parameters: Name Type Description Default channel_id int The ID Of the channel where the message is. required message_id int The ID of the message. required Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def unpin_message ( self , channel_id : int , message_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to unpin a message. Parameters: channel_id (int): The ID Of the channel where the message is. message_id (int): The ID of the message. Returns: The data received from the API after making the call. \"\"\" return await self . request ( \"DELETE\" , Route ( f \"/channels/ { channel_id } /pins/ { message_id } \" , channel_id = channel_id ), )","title":"unpin_message()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.start_thread_with_message","text":"Makes an API call to start a thread with a message. Parameters: Name Type Description Default channel_id int The ID of the channel which the message is in. required message_id int The ID Of the message. required name str The name of the thread. required auto_archive_duration int The time it takes to auto archive the thread. None Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def start_thread_with_message ( self , channel_id : int , message_id : int , * , name : str , auto_archive_duration : Optional [ int ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to start a thread with a message. Parameters: channel_id (int): The ID of the channel which the message is in. message_id (int): The ID Of the message. name (str): The name of the thread. auto_archive_duration (int): The time it takes to auto archive the thread. Returns: The data received from the API after making the call. \"\"\" payload = update_payload ( {}, name = name , auto_archive_duration = auto_archive_duration ) return await self . request ( \"POST\" , Route ( f \"/channels/ { channel_id } /messages/ { message_id } /threads\" , channel_id = channel_id , ), json = payload , )","title":"start_thread_with_message()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.start_thread_without_message","text":"Makes an API call to start a thread without a message. Parameters: Name Type Description Default channel_id int The ID of the channel where the thread will be created. required name str The name of the thread. required auto_archive_duration int The time it takes to auto archive the thread. None type int The type of the thread to create. None invitable bool Whether or not members can invite other members to the thread. Only in private threads. None Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def start_thread_without_message ( self , channel_id : int , * , name : str , auto_archive_duration : Optional [ int ] = None , type : Optional [ int ] = None , invitable : Optional [ bool ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to start a thread without a message. Parameters: channel_id (int): The ID of the channel where the thread will be created. name (str): The name of the thread. auto_archive_duration (int): The time it takes to auto archive the thread. type (int): The type of the thread to create. invitable (bool): Whether or not members can invite other members to the thread. Only in private threads. Returns: The data received from the API after making the call. \"\"\" payload = update_payload ( {}, name = name , auto_archive_duration = auto_archive_duration , type = type , invitable = invitable , ) return await self . request ( \"POST\" , Route ( f \"/channels/ { channel_id } /threads\" , channel_id = channel_id ), json = payload , )","title":"start_thread_without_message()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.join_thread","text":"Makes an API call which makes the client join the given thread. Parameters: Name Type Description Default channel_id int The ID of the thread. required Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def join_thread ( self , channel_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call which makes the client join the given thread. Parameters: channel_id (int): The ID of the thread. Returns: The data received from the API after making the call. \"\"\" return await self . request ( \"PUT\" , Route ( f \"/channels/ { channel_id } /thread-members/@me\" , channel_id = channel_id ), )","title":"join_thread()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.add_thread_member","text":"Makes an API call which adds another member to the thread. Parameters: Name Type Description Default channel_id int The ID of the thread. required user_id int The ID of the user to add. required Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def add_thread_member ( self , channel_id : int , user_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call which adds another member to the thread. Parameters: channel_id (int): The ID of the thread. user_id (int): The ID of the user to add. Returns: The data received from the API after making the call. \"\"\" return await self . request ( \"PUT\" , Route ( f \"/channels/ { channel_id } /thread-members/ { user_id } \" , channel_id = channel_id , ), )","title":"add_thread_member()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.leave_thread","text":"Makes an API call which makes the client leave the thread. Parameters: Name Type Description Default channel_id int The ID of the thread. required Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def leave_thread ( self , channel_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call which makes the client leave the thread. Parameters: channel_id (int): The ID of the thread. Returns: The data received from the API after making the call. \"\"\" return await self . request ( \"DELETE\" , Route ( f \"/channels/ { channel_id } /thread-members/@me\" , channel_id = channel_id ), )","title":"leave_thread()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.remove_thread_member","text":"Makes an API call which removes a member from the thread. Parameters: Name Type Description Default channel_id int The ID of the thread. required user_id int The ID of the user to remove. required Returns: Type Description Dict[str, Any] The data received from the API after making the call Source code in lefi/http.py async def remove_thread_member ( self , channel_id : int , user_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call which removes a member from the thread. Parameters: channel_id (int): The ID of the thread. user_id (int): The ID of the user to remove. Returns: The data received from the API after making the call \"\"\" return await self . request ( \"DELETE\" , Route ( f \"/channels/ { channel_id } /thread-members/ { user_id } \" , channel_id = channel_id , ), )","title":"remove_thread_member()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.list_thread_members","text":"Makes an API call to get all of the members of a thread. Parameters: Name Type Description Default channel_id int The ID of the thread. required Returns: Type Description List[Dict[str, Any]] The data received from the API after making the call Source code in lefi/http.py async def list_thread_members ( self , channel_id : int ) -> List [ Dict [ str , Any ]]: \"\"\" Makes an API call to get all of the members of a thread. Parameters: channel_id (int): The ID of the thread. Returns: The data received from the API after making the call \"\"\" return await self . request ( \"GET\" , Route ( f \"/channels/ { channel_id } /thread-members\" , channel_id = channel_id ), )","title":"list_thread_members()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.list_public_archived_threads","text":"Makes an API call which list all the public archived threads in the channel. Parameters: Name Type Description Default channel_id int The ID of the channel which the threads are inside of. required before Optional[int] Grab threads before this time. None limit Optional[int] The amount of threads to grab. None Returns: Type Description Dict[str, Any] The data received from the API after making the call Source code in lefi/http.py async def list_public_archived_threads ( self , channel_id : int , * , before : Optional [ int ] = None , limit : Optional [ int ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call which list all the public archived threads in the channel. Parameters: channel_id (int): The ID of the channel which the threads are inside of. before (Optional[int]): Grab threads before this time. limit (Optional[int]): The amount of threads to grab. Returns: The data received from the API after making the call \"\"\" params = update_payload ({}, before = before , limit = limit ) return await self . request ( \"GET\" , Route ( f \"/channels/ { channel_id } /threads/archived/public\" , channel_id = channel_id ), params = params , )","title":"list_public_archived_threads()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.list_private_archived_threads","text":"Makes an API call which list all the private archived threads in the channel. Parameters: Name Type Description Default channel_id int The ID of the channel which the threads are inside of. required before Optional[int] Grab threads before this time. None limit Optional[int] The amount of threads to grab. None Returns: Type Description Dict[str, Any] The data received from the API after making the call Source code in lefi/http.py async def list_private_archived_threads ( self , channel_id : int , * , before : Optional [ int ] = None , limit : Optional [ int ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call which list all the private archived threads in the channel. Parameters: channel_id (int): The ID of the channel which the threads are inside of. before (Optional[int]): Grab threads before this time. limit (Optional[int]): The amount of threads to grab. Returns: The data received from the API after making the call \"\"\" params = update_payload ({}, before = before , limit = limit ) return await self . request ( \"GET\" , Route ( f \"/channels/ { channel_id } /threads/archived/private\" , channel_id = channel_id , ), params = params , )","title":"list_private_archived_threads()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.list_joined_private_archived_threads","text":"Makes an API call which list all the private archived threads in the channel which the client has joined. Parameters: Name Type Description Default channel_id int The ID of the channel which the threads are inside of. required before Optional[int] Grab threads before this time. None limit Optional[int] The amount of threads to grab. None Returns: Type Description Dict[str, Any] The data received from the API after making the call Source code in lefi/http.py async def list_joined_private_archived_threads ( self , channel_id : int , * , before : Optional [ int ] = None , limit : Optional [ int ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call which list all the private archived threads in the channel which the client has joined. Parameters: channel_id (int): The ID of the channel which the threads are inside of. before (Optional[int]): Grab threads before this time. limit (Optional[int]): The amount of threads to grab. Returns: The data received from the API after making the call \"\"\" params = update_payload ({}, before = before , limit = limit ) return await self . request ( \"GET\" , Route ( f \"/channels/ { channel_id } /users/@me/threads/archived/private\" , channel_id = channel_id , ), params = params , )","title":"list_joined_private_archived_threads()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.list_guild_emojis","text":"Makes an API call to get a list of the guilds emojis. Parameters: Name Type Description Default guild_id int The ID of the guild to grab from. required Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def list_guild_emojis ( self , guild_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a list of the guilds emojis. Parameters: guild_id (int): The ID of the guild to grab from. Returns: The data received from the API after making the call. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /emojis\" , guild_id = guild_id ) )","title":"list_guild_emojis()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_guild_emoji","text":"Makes an API call to get an emoji from the guild. Parameters: Name Type Description Default guild_id int The ID of the guild to grab from. required emoji_id int The ID of the emoji to get. required Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def get_guild_emoji ( self , guild_id : int , emoji_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get an emoji from the guild. Parameters: guild_id (int): The ID of the guild to grab from. emoji_id (int): The ID of the emoji to get. Returns: The data received from the API after making the call. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /emojis/ { emoji_id } \" , guild_id = guild_id ) )","title":"get_guild_emoji()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.create_guild_emoji","text":"Makes an API call to create an emoji. Parameters: Name Type Description Default guild_id int The ID of the guild to create the emoji in. required name str The name of the emoji. required image str The image of the emoji. required roles Optional[List[int]] The list of roles that can use this emoji. None Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def create_guild_emoji ( self , guild_id : int , * , name : str , image : bytes , roles : Optional [ List [ int ]] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to create an emoji. Parameters: guild_id (int): The ID of the guild to create the emoji in. name (str): The name of the emoji. image (str): The image of the emoji. roles (Optional[List[int]]): The list of roles that can use this emoji. Returns: The data received from the API after making the call. \"\"\" payload = { \"name\" : name , \"image\" : bytes_to_data_uri ( image ), \"roles\" : [] if roles is None else roles , } return await self . request ( \"POST\" , Route ( f \"/guilds/ { guild_id } /emojis\" , guild_id = guild_id ), json = payload , )","title":"create_guild_emoji()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.modify_guild_emoji","text":"Makes an API call to edit an emoji. Parameters: Name Type Description Default guild_id int The ID of the guild where the emoji is. required emoji_id int The ID of the emoji. required name str The new name of the emoji. required roles Optional[List[int]] The new list of roles that can use this emoji. None Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def modify_guild_emoji ( self , guild_id : int , emoji_id : int , * , name : str , roles : Optional [ List [ int ]] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to edit an emoji. Parameters: guild_id (int): The ID of the guild where the emoji is. emoji_id (int): The ID of the emoji. name (str): The new name of the emoji. roles (Optional[List[int]]): The new list of roles that can use this emoji. Returns: The data received from the API after making the call. \"\"\" payload = { \"name\" : name } update_payload ( payload , roles = roles ) return await self . request ( \"PATCH\" , Route ( f \"/guilds/ { guild_id } /emojis/ { emoji_id } \" , guild_id = guild_id ), json = payload , )","title":"modify_guild_emoji()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.delete_guild_emoji","text":"Makes an API call which deletes an emoji. Parameters: Name Type Description Default guild_id int The ID of the guild where the emoji is in. required emoji_id int The ID of the emoji to delete. required Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def delete_guild_emoji ( self , guild_id : int , emoji_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call which deletes an emoji. Parameters: guild_id (int): The ID of the guild where the emoji is in. emoji_id (int): The ID of the emoji to delete. Returns: The data received from the API after making the call. \"\"\" return await self . request ( \"DELETE\" , Route ( f \"/guilds/ { guild_id } /emojis/ { emoji_id } \" , guild_id = guild_id ) )","title":"delete_guild_emoji()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.create_guild","text":"Makes an API call to create a guild. Parameters: Name Type Description Default name str The name of the guild. required region Optional[str] The region of the guild. None icon Optional[str] The icon of the guild. None verification_level Optional[int] The verification level of the guild. None default_message_notifications Optional[int] The default message notifications of the guild. None explicit_content_filter Optional[int] The explicit content filter of the guild. None roles Optional[List[Dict[str, Any]]] The list of roles to create. None channels Optional[List[Dict[str, Any]]]] The list of channels to create. None afk_channel Optional[int] The ID of the AFK channel. None afk_timeout Optional[int] The AFK timeout of the guild. None system_channel_id Optional[int] The ID of the system channel. None system_channel_flags Optional[int] The flags of the system channel. None Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def create_guild ( self , name : str , * , region : Optional [ str ] = None , icon : Optional [ bytes ] = None , verification_level : Optional [ int ] = None , default_message_notifications : Optional [ int ] = None , explicit_content_filter : Optional [ int ] = None , roles : Optional [ List [ Dict [ str , Any ]]] = None , channels : Optional [ List [ Dict [ str , Any ]]] = None , afk_channel : Optional [ int ] = None , afk_timeout : Optional [ int ] = None , system_channel_id : Optional [ int ] = None , system_channel_flags : Optional [ int ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to create a guild. Parameters: name (str): The name of the guild. region (Optional[str]): The region of the guild. icon (Optional[str]): The icon of the guild. verification_level (Optional[int]): The verification level of the guild. default_message_notifications (Optional[int]): The default message notifications of the guild. explicit_content_filter (Optional[int]): The explicit content filter of the guild. roles (Optional[List[Dict[str, Any]]]): The list of roles to create. channels (Optional[List[Dict[str, Any]]]]): The list of channels to create. afk_channel (Optional[int]): The ID of the AFK channel. afk_timeout (Optional[int]): The AFK timeout of the guild. system_channel_id (Optional[int]): The ID of the system channel. system_channel_flags (Optional[int]): The flags of the system channel. Returns: The data received from the API after making the call. \"\"\" payload = update_payload ( {}, name = name , region = region , icon = icon , verification_level = verification_level , default_message_notifications = default_message_notifications , explicit_content_filter = explicit_content_filter , roles = roles , channels = channels , afk_channel = afk_channel , afk_timeout = afk_timeout , system_channel_id = system_channel_id , system_channel_flags = system_channel_flags , ) if \"icon\" in payload : payload [ \"icon\" ] = bytes_to_data_uri ( payload [ \"icon\" ]) return await self . request ( \"POST\" , Route ( \"/guilds\" ), json = payload )","title":"create_guild()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_guild","text":"Makes an API call to get a guild. Parameters: Name Type Description Default guild_id int The ID of the guild to get. required Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def get_guild ( self , guild_id : int , * , with_counts : bool = False ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a guild. Parameters: guild_id (int): The ID of the guild to get. Returns: The data received from the API after making the call. \"\"\" params = { \"with_counts\" : with_counts } return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } \" , guild_id = guild_id ), params = params )","title":"get_guild()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_guild_preview","text":"Makes an API call to get a guild's preview. Parameters: Name Type Description Default guild_id int The ID of the guild. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_guild_preview ( self , guild_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a guild's preview. Parameters: guild_id (int): The ID of the guild. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /preview\" , guild_id = guild_id ) )","title":"get_guild_preview()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.modify_guild","text":"Makes an API call to modify a guild. Parameters guild_id (int): The ID of the guild to edit. name (Optional[str]): The name of the guild. region (Optional[str]): The region of the guild. verification_level (Optional[int]): The verification level of the guild. default_message_notifications (Optional[int]): The default message notifications of the guild. afk_channel (Optional[int]): The AFK channel of the guild. afk_timeout (Optional[int]): The AFK timeout of the guild. icon (Optional[str]): The icon of the guild. owner_id (Optional[int]): The ID of the owner of the guild. splash (Optional[str]): The splash of the guild. discovery_splash (Optional[str]): The discovery splash of the guild. banner (Optional[str]): The banner of the guild. system_channel_id (Optional[int]): The ID of the system channel of the guild. system_channel_flags (Optional[int]): The flags of the system channel of the guild. rules_channel_id (Optional[int]): The ID of the rules channel of the guild. public_updates_channel_id (Optional[int]): The ID of the public updates channel of the guild. preferred_locale (Optional[str]): The preferred locale of the guild. features (Optional[List[str]]): The features of the guild. description (Optional[str]): The description of the guild. Returns: Type Description The data returned from the API. Source code in lefi/http.py async def modify_guild ( self , guild_id : int , * , name : Optional [ str ] = None , region : Optional [ str ] = None , verification_level : Optional [ int ] = None , default_message_notifications : Optional [ int ] = None , afk_channel : Optional [ int ] = None , afk_timeout : Optional [ int ] = None , icon : Optional [ bytes ] = None , owner_id : Optional [ int ] = None , splash : Optional [ bytes ] = None , discovery_splash : Optional [ bytes ] = None , banner : Optional [ bytes ] = None , system_channel_id : Optional [ int ] = None , system_channel_flags : Optional [ int ] = None , rules_channel_id : Optional [ int ] = None , public_updates_channel_id : Optional [ int ] = None , preferred_locale : Optional [ str ] = None , features : Optional [ List [ str ]] = None , description : Optional [ str ] = None , ): \"\"\" Makes an API call to modify a guild. Parameters guild_id (int): The ID of the guild to edit. name (Optional[str]): The name of the guild. region (Optional[str]): The region of the guild. verification_level (Optional[int]): The verification level of the guild. default_message_notifications (Optional[int]): The default message notifications of the guild. afk_channel (Optional[int]): The AFK channel of the guild. afk_timeout (Optional[int]): The AFK timeout of the guild. icon (Optional[str]): The icon of the guild. owner_id (Optional[int]): The ID of the owner of the guild. splash (Optional[str]): The splash of the guild. discovery_splash (Optional[str]): The discovery splash of the guild. banner (Optional[str]): The banner of the guild. system_channel_id (Optional[int]): The ID of the system channel of the guild. system_channel_flags (Optional[int]): The flags of the system channel of the guild. rules_channel_id (Optional[int]): The ID of the rules channel of the guild. public_updates_channel_id (Optional[int]): The ID of the public updates channel of the guild. preferred_locale (Optional[str]): The preferred locale of the guild. features (Optional[List[str]]): The features of the guild. description (Optional[str]): The description of the guild. Returns: The data returned from the API. \"\"\" payload = update_payload ( {}, name = name , region = region , verification_level = verification_level , default_message_notifications = default_message_notifications , afk_channel = afk_channel , afk_timeout = afk_timeout , icon = icon , owner_id = owner_id , splash = splash , discovery_splash = discovery_splash , banner = banner , system_channel_id = system_channel_id , system_channel_flags = system_channel_flags , rules_channel_id = rules_channel_id , public_updates_channel_id = public_updates_channel_id , preferred_locale = preferred_locale , features = features , description = description , ) if \"icon\" in payload : payload [ \"icon\" ] = bytes_to_data_uri ( payload [ \"icon\" ]) if \"splash\" in payload : payload [ \"splash\" ] = bytes_to_data_uri ( payload [ \"splash\" ]) if \"discovery_splash\" in payload : payload [ \"discovery_splash\" ] = bytes_to_data_uri ( payload [ \"discovery_splash\" ]) if \"banner\" in payload : payload [ \"banner\" ] = bytes_to_data_uri ( payload [ \"banner\" ]) return await self . request ( \"PATCH\" , Route ( f \"/guilds/ { guild_id } \" , guild_id = guild_id ), json = payload )","title":"modify_guild()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.delete_guild","text":"Makes an API call to delete a guild. Parameters: Name Type Description Default guild_id int The ID of the guild to delete. required Source code in lefi/http.py async def delete_guild ( self , guild_id : int ): \"\"\" Makes an API call to delete a guild. Parameters: guild_id (int): The ID of the guild to delete. \"\"\" await self . request ( \"DELETE\" , Route ( f \"/guilds/ { guild_id } \" , guild_id = guild_id ))","title":"delete_guild()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_guild_channels","text":"Makes an API call to get a guild's channels. Parameters: Name Type Description Default guild_id int The ID of the guild. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_guild_channels ( self , guild_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a guild's channels. Parameters: guild_id (int): The ID of the guild. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /channels\" , guild_id = guild_id ) )","title":"get_guild_channels()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.create_guild_channel","text":"Makes an API call to create a channel in a guild. Parameters guild_id (int): The ID of the guild. name (str): The name of the channel. type (Optional[int]): The type of the channel. topic (Optional[str]): The topic of the channel. bitrate (Optional[int]): The bitrate of the channel. user_limit (Optional[int]): The user limit of the channel. position (Optional[int]): The position of the channel. permission_overwrites (Optional[List[Dict[str, Any]]]): The permission overwrites of the channel. parent_id (Optional[int]): The ID of the parent of the channel. nsfw (Optional[bool]): Whether the channel is NSFW. Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def create_guild_channel ( self , guild_id : int , name : str , * , type : Optional [ int ] = None , topic : Optional [ str ] = None , bitrate : Optional [ int ] = None , user_limit : Optional [ int ] = None , position : Optional [ int ] = None , permission_overwrites : Optional [ List [ Dict [ str , Any ]]] = None , parent_id : Optional [ int ] = None , nsfw : Optional [ bool ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to create a channel in a guild. Parameters guild_id (int): The ID of the guild. name (str): The name of the channel. type (Optional[int]): The type of the channel. topic (Optional[str]): The topic of the channel. bitrate (Optional[int]): The bitrate of the channel. user_limit (Optional[int]): The user limit of the channel. position (Optional[int]): The position of the channel. permission_overwrites (Optional[List[Dict[str, Any]]]): The permission overwrites of the channel. parent_id (Optional[int]): The ID of the parent of the channel. nsfw (Optional[bool]): Whether the channel is NSFW. Returns: The data returned from the API. \"\"\" payload = update_payload ( {}, name = name , type = type , topic = topic , bitrate = bitrate , user_limit = user_limit , position = position , permission_overwrites = permission_overwrites , parent_id = parent_id , nsfw = nsfw , ) return await self . request ( \"POST\" , Route ( f \"/guilds/ { guild_id } /channels\" , guild_id = guild_id ), json = payload , )","title":"create_guild_channel()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.list_active_threads","text":"Makes an API call to get a guild's active threads. Parameters: Name Type Description Default guild_id int The ID of the guild. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def list_active_threads ( self , guild_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a guild's active threads. Parameters: guild_id (int): The ID of the guild. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /threads/active\" , guild_id = guild_id ) )","title":"list_active_threads()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_guild_member","text":"Makes an API call to get a guild member. Parameters: Name Type Description Default guild_id int The ID of the guild. required member_id int The ID of the member. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_guild_member ( self , guild_id : int , member_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a guild member. Parameters: guild_id (int): The ID of the guild. member_id (int): The ID of the member. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /members/ { member_id } \" , guild_id = guild_id ) )","title":"get_guild_member()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.list_guild_members","text":"Makes an API call to get a guild's members. Parameters: Name Type Description Default guild_id int The ID of the guild. required Returns: Type Description List[Dict[str, Any]] The data returned from the API. Source code in lefi/http.py async def list_guild_members ( self , guild_id : int , * , limit : int = 1 , after : Optional [ int ] = None ) -> List [ Dict [ str , Any ]]: \"\"\" Makes an API call to get a guild's members. Parameters: guild_id (int): The ID of the guild. Returns: The data returned from the API. \"\"\" params = update_payload ({}, limit = limit , after = after ) return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /members\" , guild_id = guild_id ), params = params , )","title":"list_guild_members()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.search_guild_members","text":"Makes an API call to search a guild's members. Parameters: Name Type Description Default guild_id int The ID of the guild. required query str The query to search for. required limit Optional[int] The number of members to return. 1 Returns: Type Description List[Dict[str, Any]] The data returned from the API. Source code in lefi/http.py async def search_guild_members ( self , guild_id : int , * , query : str , limit : int = 1 ) -> List [ Dict [ str , Any ]]: \"\"\" Makes an API call to search a guild's members. Parameters: guild_id (int): The ID of the guild. query (str): The query to search for. limit (Optional[int]): The number of members to return. Returns: The data returned from the API. \"\"\" params = { \"limit\" : limit , \"query\" : query } return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /members/search\" , guild_id = guild_id ), params = params , )","title":"search_guild_members()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.add_guild_member","text":"Makes an API call to add a member to a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required member_id int The ID of the member. required access_token str An oauth2 access token. required nick Optional[str] The nickname of the member. None roles Optional[List[int]] The roles of the member. None mute Optional[bool] Whether the member is muted. None deaf Optional[bool] Whether the member is deafened. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def add_guild_member ( self , guild_id : int , member_id : int , access_token : str , * , nick : Optional [ str ] = None , roles : Optional [ List [ int ]] = None , mute : Optional [ bool ] = None , deaf : Optional [ bool ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to add a member to a guild. Parameters: guild_id (int): The ID of the guild. member_id (int): The ID of the member. access_token (str): An oauth2 access token. nick (Optional[str]): The nickname of the member. roles (Optional[List[int]]): The roles of the member. mute (Optional[bool]): Whether the member is muted. deaf (Optional[bool]): Whether the member is deafened. Returns: The data returned from the API. \"\"\" payload = update_payload ( {}, access_token = access_token , nick = nick , roles = roles , mute = mute , deaf = deaf ) return await self . request ( \"PUT\" , Route ( f \"/guilds/ { guild_id } /members/ { member_id } \" , guild_id = guild_id ), json = payload , )","title":"add_guild_member()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.edit_guild_member","text":"Makes an API call to edit a member in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required member_id int The ID of the member. required nick Optional[str] The nickname of the member. None roles Optional[List[int]] The roles of the member. None mute Optional[bool] Whether the member is muted. None deaf Optional[bool] Whether the member is deafened. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def edit_guild_member ( self , guild_id : int , member_id : int , * , nick : Optional [ str ] = None , roles : Optional [ List [ int ]] = None , mute : Optional [ bool ] = None , deaf : Optional [ bool ] = None , channel_id : Optional [ int ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to edit a member in a guild. Parameters: guild_id (int): The ID of the guild. member_id (int): The ID of the member. nick (Optional[str]): The nickname of the member. roles (Optional[List[int]]): The roles of the member. mute (Optional[bool]): Whether the member is muted. deaf (Optional[bool]): Whether the member is deafened. Returns: The data returned from the API. \"\"\" payload = update_payload ( {}, nick = nick , roles = roles , mute = mute , deaf = deaf , channel_id = channel_id ) return await self . request ( \"PATCH\" , Route ( f \"/guilds/ { guild_id } /members/ { member_id } \" , guild_id = guild_id ), json = payload , )","title":"edit_guild_member()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.edit_current_member","text":"Makes an API call to edit the current userin a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required nick Optional[str] The nickname of the member. None Returns: Type Description The data returned from the API. Source code in lefi/http.py async def edit_current_member ( self , guild_id : int , * , nick : Optional [ str ] = None ): \"\"\" Makes an API call to edit the current userin a guild. Parameters: guild_id (int): The ID of the guild. nick (Optional[str]): The nickname of the member. Returns: The data returned from the API. \"\"\" payload = update_payload ({}, nick = nick ) return await self . request ( \"PATCH\" , Route ( f \"/users/@me/guilds/ { guild_id } \" , guild_id = guild_id ), json = payload , )","title":"edit_current_member()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.add_guild_member_role","text":"Makes an API call to add a role to a member in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required member_id int The ID of the member. required role_id int The ID of the role. required Returns: Type Description The data returned from the API. Source code in lefi/http.py async def add_guild_member_role ( self , guild_id : int , member_id : int , role_id : int ): \"\"\" Makes an API call to add a role to a member in a guild. Parameters: guild_id (int): The ID of the guild. member_id (int): The ID of the member. role_id (int): The ID of the role. Returns: The data returned from the API. \"\"\" return await self . request ( \"PUT\" , Route ( f \"/guilds/ { guild_id } /members/ { member_id } /roles/ { role_id } \" , guild_id = guild_id , ), )","title":"add_guild_member_role()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.remove_guild_member_role","text":"Makes an API call to remove a role from a member in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required member_id int The ID of the member. required role_id int The ID of the role. required Returns: Type Description The data returned from the API. Source code in lefi/http.py async def remove_guild_member_role ( self , guild_id : int , member_id : int , role_id : int ): \"\"\" Makes an API call to remove a role from a member in a guild. Parameters: guild_id (int): The ID of the guild. member_id (int): The ID of the member. role_id (int): The ID of the role. Returns: The data returned from the API. \"\"\" return await self . request ( \"DELETE\" , Route ( f \"/guilds/ { guild_id } /members/ { member_id } /roles/ { role_id } \" , guild_id = guild_id , ), )","title":"remove_guild_member_role()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.remove_guild_member","text":"Makes an API call to remove a member from a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required member_id int The ID of the member. required Returns: Type Description The data returned from the API. Source code in lefi/http.py async def remove_guild_member ( self , guild_id : int , member_id : int ): \"\"\" Makes an API call to remove a member from a guild. Parameters: guild_id (int): The ID of the guild. member_id (int): The ID of the member. Returns: The data returned from the API. \"\"\" return await self . request ( \"DELETE\" , Route ( f \"/guilds/ { guild_id } /members/ { member_id } \" ), guild_id = guild_id , )","title":"remove_guild_member()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_guild_bans","text":"Makes an API call to get the bans of a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required Returns: Type Description List[Dict[str, Any]] The data returned from the API. Source code in lefi/http.py async def get_guild_bans ( self , guild_id : int ) -> List [ Dict [ str , Any ]]: \"\"\" Makes an API call to get the bans of a guild. Parameters: guild_id (int): The ID of the guild. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /bans\" ), guild_id = guild_id )","title":"get_guild_bans()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_guild_ban","text":"Makes an API call to get the ban of a user in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required user_id int The ID of the user. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_guild_ban ( self , guild_id : int , user_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get the ban of a user in a guild. Parameters: guild_id (int): The ID of the guild. user_id (int): The ID of the user. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /bans/ { user_id } \" ), guild_id = guild_id )","title":"get_guild_ban()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.create_guild_ban","text":"Makes an API call to ban a user in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required user_id int The ID of the user. required delete_message_days int The number of days to delete messages for. 0 Returns: Type Description The data returned from the API. Source code in lefi/http.py async def create_guild_ban ( self , guild_id : int , user_id : int , * , delete_message_days : int = 0 ): \"\"\" Makes an API call to ban a user in a guild. Parameters: guild_id (int): The ID of the guild. user_id (int): The ID of the user. delete_message_days (int): The number of days to delete messages for. Returns: The data returned from the API. \"\"\" payload = { \"delete_message_days\" : delete_message_days } return await self . request ( \"PUT\" , Route ( f \"/guilds/ { guild_id } /bans/ { user_id } \" , guild_id = guild_id ), json = payload , )","title":"create_guild_ban()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.remove_guild_ban","text":"Makes an API call to unban a user in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required user_id int The ID of the user. required Returns: Type Description The data returned from the API. Source code in lefi/http.py async def remove_guild_ban ( self , guild_id : int , user_id : int ): \"\"\" Makes an API call to unban a user in a guild. Parameters: guild_id (int): The ID of the guild. user_id (int): The ID of the user. Returns: The data returned from the API. \"\"\" return await self . request ( \"DELETE\" , Route ( f \"/guilds/ { guild_id } /bans/ { user_id } \" ), guild_id = guild_id )","title":"remove_guild_ban()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_guild_roles","text":"Makes an API call to get the roles of a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required Returns: Type Description List[Dict[str, Any]] The data returned from the API. Source code in lefi/http.py async def get_guild_roles ( self , guild_id : int ) -> List [ Dict [ str , Any ]]: \"\"\" Makes an API call to get the roles of a guild. Parameters: guild_id (int): The ID of the guild. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /roles\" ), guild_id = guild_id )","title":"get_guild_roles()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.create_guild_role","text":"Makes an API call to create a role in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required name Optional[str] The name of the role. None permissions Optional[int] The permissions of the role. None color Optional[int] The color of the role. None hoist bool Whether the role is hoisted. False mentionable bool Whether the role is mentionable. False icon Optional[str] The icon of the role. None unicode_emoji Optional[str] The unicode emoji of the role. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def create_guild_role ( self , guild_id : int , * , name : Optional [ str ] = None , permissions : Optional [ int ] = None , color : Optional [ int ] = None , hoist : bool = False , mentionable : bool = False , icon : Optional [ bytes ] = None , unicode_emoji : Optional [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to create a role in a guild. Parameters: guild_id (int): The ID of the guild. name (Optional[str]): The name of the role. permissions (Optional[int]): The permissions of the role. color (Optional[int]): The color of the role. hoist (bool): Whether the role is hoisted. mentionable (bool): Whether the role is mentionable. icon (Optional[str]): The icon of the role. unicode_emoji (Optional[str]): The unicode emoji of the role. Returns: The data returned from the API. \"\"\" payload = update_payload ( {}, name = name , permissions = permissions , color = color , hoist = hoist , mentionable = mentionable , icon = icon , unicode_emoji = unicode_emoji , ) if \"icon\" in payload : payload [ \"icon\" ] = bytes_to_data_uri ( payload [ \"icon\" ]) return await self . request ( \"POST\" , Route ( f \"/guilds/ { guild_id } /roles\" , guild_id = guild_id ), json = payload )","title":"create_guild_role()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.modify_guild_role","text":"Makes an API call to modify a role in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required role_id int The ID of the role. required name Optional[str] The name of the role. None permissions Optional[int] The permissions of the role. None color Optional[int] The color of the role. None hoist Optional[bool] Whether the role is hoisted. None mentionable Optional[bool] Whether the role is mentionable. None icon Optional[str] The icon of the role. None unicode_emoji Optional[str] The unicode emoji of the role. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def modify_guild_role ( self , guild_id : int , role_id : int , * , name : Optional [ str ] = None , permissions : Optional [ int ] = None , color : Optional [ int ] = None , hoist : Optional [ bool ] = None , mentionable : Optional [ bool ] = None , icon : Optional [ bytes ] = None , unicode_emoji : Optional [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to modify a role in a guild. Parameters: guild_id (int): The ID of the guild. role_id (int): The ID of the role. name (Optional[str]): The name of the role. permissions (Optional[int]): The permissions of the role. color (Optional[int]): The color of the role. hoist (Optional[bool]): Whether the role is hoisted. mentionable (Optional[bool]): Whether the role is mentionable. icon (Optional[str]): The icon of the role. unicode_emoji (Optional[str]): The unicode emoji of the role. Returns: The data returned from the API. \"\"\" payload = update_payload ( {}, name = name , permissions = permissions , color = color , hoist = hoist , mentionable = mentionable , icon = icon , unicode_emoji = unicode_emoji , ) if \"icon\" in payload : payload [ \"icon\" ] = bytes_to_data_uri ( payload [ \"icon\" ]) return await self . request ( \"PATCH\" , Route ( f \"/guilds/ { guild_id } /roles/ { role_id } \" , guild_id = guild_id ), json = payload , )","title":"modify_guild_role()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.delete_guild_role","text":"Makes an API call to delete a role in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required role_id int The ID of the role. required Returns: Type Description The data returned from the API. Source code in lefi/http.py async def delete_guild_role ( self , guild_id : int , role_id : int ): \"\"\" Makes an API call to delete a role in a guild. Parameters: guild_id (int): The ID of the guild. role_id (int): The ID of the role. Returns: The data returned from the API. \"\"\" return await self . request ( \"DELETE\" , Route ( f \"/guilds/ { guild_id } /roles/ { role_id } \" ), guild_id = guild_id )","title":"delete_guild_role()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_guild_prune_count","text":"Makes an API call to get the number of members to prune in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required days int The number of days to count. 7 include_roles Optional[List[int]] The IDs of the roles to include. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_guild_prune_count ( self , guild_id : int , * , days : int = 7 , include_roles : Optional [ List [ int ]] = None ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get the number of members to prune in a guild. Parameters: guild_id (int): The ID of the guild. days (int): The number of days to count. include_roles (Optional[List[int]]): The IDs of the roles to include. Returns: The data returned from the API. \"\"\" payload = { \"days\" : str ( days )} if include_roles is not None : payload [ \"include_roles\" ] = \",\" . join ( map ( str , include_roles )) return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /prune\" , guild_id = guild_id ), json = payload )","title":"get_guild_prune_count()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.begin_guild_prune","text":"Makes an API call to begin pruning a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required days int The number of days to count. 7 compute_prune_count bool Whether to compute the prune count. True include_roles Optional[List[int]] The IDs of the roles to include. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def begin_guild_prune ( self , guild_id : int , * , days : int = 7 , compute_prune_count : bool = True , include_roles : Optional [ List [ int ]] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to begin pruning a guild. Parameters: guild_id (int): The ID of the guild. days (int): The number of days to count. compute_prune_count (bool): Whether to compute the prune count. include_roles (Optional[List[int]]): The IDs of the roles to include. Returns: The data returned from the API. \"\"\" payload = { \"days\" : str ( days ), \"compute_prune_count\" : compute_prune_count } if include_roles is not None : payload [ \"include_roles\" ] = \",\" . join ( map ( str , include_roles )) return await self . request ( \"POST\" , Route ( f \"/guilds/ { guild_id } /prune\" , guild_id = guild_id ), json = payload )","title":"begin_guild_prune()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_guild_voice_regions","text":"Makes an API call to get the voice regions in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required Returns: Type Description List[Dict[str, Any]] The data returned from the API. Source code in lefi/http.py async def get_guild_voice_regions ( self , guild_id : int ) -> List [ Dict [ str , Any ]]: \"\"\" Makes an API call to get the voice regions in a guild. Parameters: guild_id (int): The ID of the guild. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /regions\" ), guild_id = guild_id )","title":"get_guild_voice_regions()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_guild_invites","text":"Makes an API call to get the invites in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required Returns: Type Description List[Dict[str, Any]] The data returned from the API. Source code in lefi/http.py async def get_guild_invites ( self , guild_id : int ) -> List [ Dict [ str , Any ]]: \"\"\" Makes an API call to get the invites in a guild. Parameters: guild_id (int): The ID of the guild. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /invites\" ), guild_id = guild_id )","title":"get_guild_invites()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_guild_integrations","text":"Makes an API call to get the integrations in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required Returns: Type Description List[Dict[str, Any]] The data returned from the API. Source code in lefi/http.py async def get_guild_integrations ( self , guild_id : int ) -> List [ Dict [ str , Any ]]: \"\"\" Makes an API call to get the integrations in a guild. Parameters: guild_id (int): The ID of the guild. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /integrations\" ), guild_id = guild_id )","title":"get_guild_integrations()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.delete_guild_integration","text":"Makes an API call to delete an integration in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required integration_id int The ID of the integration. required Source code in lefi/http.py async def delete_guild_integration ( self , guild_id : int , integration_id : int ): \"\"\" Makes an API call to delete an integration in a guild. Parameters: guild_id (int): The ID of the guild. integration_id (int): The ID of the integration. \"\"\" return await self . request ( \"DELETE\" , Route ( f \"/guilds/ { guild_id } /integrations/ { integration_id } \" , guild_id = guild_id ), )","title":"delete_guild_integration()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_guild_widget_settings","text":"Makes an API call to get the widget settings in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_guild_widget_settings ( self , guild_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get the widget settings in a guild. Parameters: guild_id (int): The ID of the guild. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /widget\" ), guild_id = guild_id )","title":"get_guild_widget_settings()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_guild_widget","text":"Makes an API call to get the widget in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_guild_widget ( self , guild_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get the widget in a guild. Parameters: guild_id (int): The ID of the guild. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /widget.json\" ), guild_id = guild_id )","title":"get_guild_widget()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_guild_vanity_url","text":"Makes an API call to get the vanity URL in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_guild_vanity_url ( self , guild_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get the vanity URL in a guild. Parameters: guild_id (int): The ID of the guild. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /vanity-url\" ), guild_id = guild_id )","title":"get_guild_vanity_url()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_guild_widget_image","text":"Makes an API call to get the widget image in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required style Optional[str] The style of the image. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_guild_widget_image ( self , guild_id : int , * , style : Optional [ str ] = None ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get the widget image in a guild. Parameters: guild_id (int): The ID of the guild. style (Optional[str]): The style of the image. Returns: The data returned from the API. \"\"\" payload = { \"style\" : style or \"shield\" } return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /widget.png\" , guild_id = guild_id ), json = payload , )","title":"get_guild_widget_image()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_guild_welcome_screen","text":"Makes an API call to get the welcome screen in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_guild_welcome_screen ( self , guild_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get the welcome screen in a guild. Parameters: guild_id (int): The ID of the guild. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /welcome-screen\" ), guild_id = guild_id )","title":"get_guild_welcome_screen()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.modify_guild_welcome_screen","text":"Makes an API call to modify the welcome screen in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required enabled Optional[bool] Whether the welcome screen is enabled. None description Optional[str] The welcome screen description. None welcome_channels Optional[List[int]] The IDs of the welcome channels. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def modify_guild_welcome_screen ( self , guild_id : int , * , enabled : Optional [ bool ] = None , description : Optional [ str ] = None , welcome_channels : Optional [ List [ int ]] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to modify the welcome screen in a guild. Parameters: guild_id (int): The ID of the guild. enabled (Optional[bool]): Whether the welcome screen is enabled. description (Optional[str]): The welcome screen description. welcome_channels (Optional[List[int]]): The IDs of the welcome channels. Returns: The data returned from the API. \"\"\" payload = update_payload ( {}, enabled = enabled , description = description , welcome_channels = welcome_channels , ) return await self . request ( \"PATCH\" , Route ( f \"/guilds/ { guild_id } /welcome-screen\" , guild_id = guild_id ), json = payload , )","title":"modify_guild_welcome_screen()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_guild_template","text":"Makes an API call to get a guild template. Parameters: Name Type Description Default code str The code of the template. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_guild_template ( self , code : str ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a guild template. Parameters: code (str): The code of the template. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/templates/ { code } \" ))","title":"get_guild_template()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.create_guild_from_template","text":"Makes an API call to create a guild from a template. Parameters: Name Type Description Default code str The code of the template. required name str The name of the guild. required icon Optional[str] The icon of the guild. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def create_guild_from_template ( self , code : str , * , name : str , icon : Optional [ bytes ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to create a guild from a template. Parameters: code (str): The code of the template. name (str): The name of the guild. icon (Optional[str]): The icon of the guild. Returns: The data returned from the API. \"\"\" payload = update_payload ({}, name = name , icon = icon ) if \"icon\" in payload : payload [ \"icon\" ] = bytes_to_data_uri ( payload [ \"icon\" ]) return await self . request ( \"POST\" , Route ( f \"/guilds/templates/ { code } \" ), json = payload )","title":"create_guild_from_template()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_guild_templates","text":"Makes an API call to get the templates in a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required Returns: Type Description List[Dict[str, Any]] The data returned from the API. Source code in lefi/http.py async def get_guild_templates ( self , guild_id : int ) -> List [ Dict [ str , Any ]]: \"\"\" Makes an API call to get the templates in a guild. Parameters: guild_id (int): The ID of the guild. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /templates\" , guild_id = guild_id ) )","title":"get_guild_templates()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.create_guild_template","text":"Makes an API call to create a template for a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required name str The name of the template. required description Optional[str] The description of the template. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def create_guild_template ( self , guild_id : int , * , name : str , description : Optional [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to create a template for a guild. Parameters: guild_id (int): The ID of the guild. name (str): The name of the template. description (Optional[str]): The description of the template. Returns: The data returned from the API. \"\"\" payload = update_payload ({}, name = name , description = description ) return await self . request ( \"POST\" , Route ( f \"/guilds/ { guild_id } /templates\" , guild_id = guild_id ), json = payload , )","title":"create_guild_template()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.sync_guild_template","text":"Makes an API call to sync a template for a guild guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required code str The code of the template. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def sync_guild_template ( self , guild_id : int , code : str ) -> Dict [ str , Any ]: \"\"\" Makes an API call to sync a template for a guild guild. Parameters: guild_id (int): The ID of the guild. code (str): The code of the template. Returns: The data returned from the API. \"\"\" return await self . request ( \"POST\" , Route ( f \"/guilds/ { guild_id } /templates/ { code } /sync\" , guild_id = guild_id ), )","title":"sync_guild_template()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.modify_guild_template","text":"Makes an API call to modify a template for a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required code str The code of the template. required name Optional[str] The name of the template. None description Optional[str] The description of the template. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def modify_guild_template ( self , guild_id : int , code : str , * , name : Optional [ str ] = None , description : Optional [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to modify a template for a guild. Parameters: guild_id (int): The ID of the guild. code (str): The code of the template. name (Optional[str]): The name of the template. description (Optional[str]): The description of the template. Returns: The data returned from the API. \"\"\" payload = update_payload ({}, name = name , description = description ) return await self . request ( \"PATCH\" , Route ( f \"/guilds/ { guild_id } /templates/ { code } \" , guild_id = guild_id ), json = payload , )","title":"modify_guild_template()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.delete_guild_template","text":"Makes an API call to delete a template for a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required code str The code of the template. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def delete_guild_template ( self , guild_id : int , code : str ) -> Dict [ str , Any ]: \"\"\" Makes an API call to delete a template for a guild. Parameters: guild_id (int): The ID of the guild. code (str): The code of the template. Returns: The data returned from the API. \"\"\" return await self . request ( \"DELETE\" , Route ( f \"/guilds/ { guild_id } /templates/ { code } \" , guild_id = guild_id ) )","title":"delete_guild_template()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_invite","text":"Makes an API call to get an invite. Parameters: Name Type Description Default code str The code of the invite. required with_counts bool Whether to include the invite counts. False with_expiration bool Whether to include the invite expiration. False Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_invite ( self , code : str , * , with_counts : bool = False , with_expiration : bool = False ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get an invite. Parameters: code (str): The code of the invite. with_counts (bool): Whether to include the invite counts. with_expiration (bool): Whether to include the invite expiration. Returns: The data returned from the API. \"\"\" params = { \"with_counts\" : with_counts , \"with_expiration\" : with_expiration } return await self . request ( \"GET\" , Route ( f \"/invites/ { code } \" ), params = params )","title":"get_invite()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.delete_invite","text":"Makes an API call to delete an invite. Parameters: Name Type Description Default code str The code of the invite. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def delete_invite ( self , code : str ) -> Dict [ str , Any ]: \"\"\" Makes an API call to delete an invite. Parameters: code (str): The code of the invite. Returns: The data returned from the API. \"\"\" return await self . request ( \"DELETE\" , Route ( f \"/invites/ { code } \" ))","title":"delete_invite()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.create_stage_instance","text":"Makes an API call to create a stage instance. Parameters: Name Type Description Default channel_id int The ID of the channel. required topic str The topic of the stage instance. required privacy_level Optional[int] The privacy level of the stage instance. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def create_stage_instance ( self , * , channel_id : int , topic : str , privacy_level : Optional [ int ] = None ) -> Dict [ str , Any ]: \"\"\" Makes an API call to create a stage instance. Parameters: channel_id (int): The ID of the channel. topic (str): The topic of the stage instance. privacy_level (Optional[int]): The privacy level of the stage instance. Returns: The data returned from the API. \"\"\" payload = update_payload ( {}, channel_id = channel_id , topic = topic , privacy_level = privacy_level ) return await self . request ( \"POST\" , Route ( \"/stage-instances\" , channel_id = channel_id ), json = payload )","title":"create_stage_instance()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_stage_instance","text":"Makes an API call to get a stage instance. Parameters: Name Type Description Default channel_id int The ID of the channel. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_stage_instance ( self , channel_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a stage instance. Parameters: channel_id (int): The ID of the channel. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/stage-instances/ { channel_id } \" , channel_id = channel_id ) )","title":"get_stage_instance()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.modify_stage_instance","text":"Makes an API call to modify a stage instance. Parameters: Name Type Description Default channel_id int The ID of the channel. required topic Optional[str] The topic of the stage instance. None privacy_level Optional[int] The privacy level of the stage instance. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def modify_stage_instance ( self , channel_id : int , * , topic : Optional [ str ] = None , privacy_level : Optional [ int ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to modify a stage instance. Parameters: channel_id (int): The ID of the channel. topic (Optional[str]): The topic of the stage instance. privacy_level (Optional[int]): The privacy level of the stage instance. Returns: The data returned from the API. \"\"\" payload = update_payload ({}, topic = topic , privacy_level = privacy_level ) return await self . request ( \"PATCH\" , Route ( f \"/stage-instances/ { channel_id } \" , channel_id = channel_id ), json = payload , )","title":"modify_stage_instance()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.delete_stage_instance","text":"Makes an API call to delete a stage instance. Parameters: Name Type Description Default channel_id int The ID of the channel. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def delete_stage_instance ( self , channel_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to delete a stage instance. Parameters: channel_id (int): The ID of the channel. Returns: The data returned from the API. \"\"\" return await self . request ( \"DELETE\" , Route ( f \"/stage-instances/ { channel_id } \" ), channel_id = channel_id )","title":"delete_stage_instance()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_sticker","text":"Makes an API call to get a sticker. Parameters: Name Type Description Default sticker_id int The ID of the sticker. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_sticker ( self , sticker_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a sticker. Parameters: sticker_id (int): The ID of the sticker. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/stickers/ { sticker_id } \" ))","title":"get_sticker()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.list_nitro_sticker_packs","text":"Makes an API call to list nitro sticker packs. Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def list_nitro_sticker_packs ( self ) -> Dict [ str , Any ]: \"\"\" Makes an API call to list nitro sticker packs. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( \"/sticker-packs\" ))","title":"list_nitro_sticker_packs()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.list_guild_stickers","text":"Makes an API call to list stickers for a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def list_guild_stickers ( self , guild_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to list stickers for a guild. Parameters: guild_id (int): The ID of the guild. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /stickers\" , guild_id = guild_id ) )","title":"list_guild_stickers()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_guild_sticker","text":"Makes an API call to get a sticker for a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required sticker_id int The ID of the sticker. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_guild_sticker ( self , guild_id : int , sticker_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a sticker for a guild. Parameters: guild_id (int): The ID of the guild. sticker_id (int): The ID of the sticker. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /stickers/ { sticker_id } \" , guild_id = guild_id ) )","title":"get_guild_sticker()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.modify_guild_sticker","text":"Makes an API call to modify a sticker for a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required sticker_id int The ID of the sticker. required name Optional[str] The name of the sticker. None description Optional[str] The description of the sticker. None tags Optional[str] The tags of the sticker. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def modify_guild_sticker ( self , guild_id : int , sticker_id : int , * , name : Optional [ str ] = None , description : Optional [ str ] = None , tags : Optional [ str ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to modify a sticker for a guild. Parameters: guild_id (int): The ID of the guild. sticker_id (int): The ID of the sticker. name (Optional[str]): The name of the sticker. description (Optional[str]): The description of the sticker. tags (Optional[str]): The tags of the sticker. Returns: The data returned from the API. \"\"\" payload = update_payload ({}, name = name , description = description , tags = tags ) return await self . request ( \"PATCH\" , Route ( f \"/guilds/ { guild_id } /stickers/ { sticker_id } \" , guild_id = guild_id ), json = payload , )","title":"modify_guild_sticker()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.delete_guild_sticker","text":"Makes an API call to delete a sticker for a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required sticker_id int The ID of the sticker. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def delete_guild_sticker ( self , guild_id : int , sticker_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to delete a sticker for a guild. Parameters: guild_id (int): The ID of the guild. sticker_id (int): The ID of the sticker. Returns: The data returned from the API. \"\"\" return await self . request ( \"DELETE\" , Route ( f \"/guilds/ { guild_id } /stickers/ { sticker_id } \" , guild_id = guild_id ), )","title":"delete_guild_sticker()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_current_user","text":"Makes an API call to get the current user. Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_current_user ( self ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get the current user. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( \"/users/@me\" ))","title":"get_current_user()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.modify_current_user","text":"Makes an API call to modify the current user. Parameters: Name Type Description Default username Optional[str] The username of the user. None avatar Optional[str] The avatar of the user. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def modify_current_user ( self , * , username : Optional [ str ] = None , avatar : Optional [ bytes ] = None ) -> Dict [ str , Any ]: \"\"\" Makes an API call to modify the current user. Parameters: username (Optional[str]): The username of the user. avatar (Optional[str]): The avatar of the user. Returns: The data returned from the API. \"\"\" payload = update_payload ({}, username = username , avatar = avatar ) if \"avatar\" in payload : payload [ \"avatar\" ] = bytes_to_data_uri ( payload [ \"avatar\" ]) return await self . request ( \"PATCH\" , Route ( \"/users/@me\" ), json = payload )","title":"modify_current_user()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_current_user_guilds","text":"Makes an API call to get the current user's guilds. Returns: Type Description List[Dict[str, Any]] The data returned from the API. Source code in lefi/http.py async def get_current_user_guilds ( self ) -> List [ Dict [ str , Any ]]: \"\"\" Makes an API call to get the current user's guilds. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( \"/users/@me/guilds\" ))","title":"get_current_user_guilds()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.leave_guild","text":"Makes an API call to leave a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required Source code in lefi/http.py async def leave_guild ( self , guild_id : int ): \"\"\" Makes an API call to leave a guild. Parameters: guild_id (int): The ID of the guild. \"\"\" await self . request ( \"DELETE\" , Route ( f \"/users/@me/guilds/ { guild_id } \" , guild_id = guild_id ) )","title":"leave_guild()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.create_dm_channel","text":"Makes an API call which creates a DM channel to a user. Parameters: Name Type Description Default recipient_id int The ID of the user which to open the DM channel to. required Returns: Type Description Dict[str, Any] The data received from the API after making the call. Source code in lefi/http.py async def create_dm_channel ( self , recipient_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call which creates a DM channel to a user. Parameters: recipient_id (int): The ID of the user which to open the DM channel to. Returns: The data received from the API after making the call. \"\"\" payload = { \"recipient_id\" : recipient_id } return await self . request ( \"POST\" , Route ( \"/users/@me/channels\" ), json = payload )","title":"create_dm_channel()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.list_voice_regions","text":"Makes an API call to list voice regions. Returns: Type Description List[Dict[str, Any]] The data returned from the API. Source code in lefi/http.py async def list_voice_regions ( self ) -> List [ Dict [ str , Any ]]: \"\"\" Makes an API call to list voice regions. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( \"/voice/regions\" ))","title":"list_voice_regions()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.create_webhook","text":"Makes an API call to create a webhook. Parameters: Name Type Description Default channel_id int The ID of the channel to create the webhook in. required name str The name of the webhook. required avatar Optional[bytes] The avatar of the webhook. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def create_webhook ( self , channel_id : int , * , name : str , avatar : Optional [ bytes ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to create a webhook. Parameters: channel_id (int): The ID of the channel to create the webhook in. name (str): The name of the webhook. avatar (Optional[bytes]): The avatar of the webhook. Returns: The data returned from the API. \"\"\" payload = { \"name\" : name , \"avatar\" : bytes_to_data_uri ( avatar ) if avatar else None , } return await self . request ( \"POST\" , Route ( f \"/channels/ { channel_id } /webhooks\" , channel_id = channel_id ), json = payload , )","title":"create_webhook()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_channel_webhooks","text":"Makes an API call to get the webhooks for a channel. Parameters: Name Type Description Default channel_id int The ID of the channel. required Returns: Type Description List[Dict[str, Any]] The data returned from the API. Source code in lefi/http.py async def get_channel_webhooks ( self , channel_id : int ) -> List [ Dict [ str , Any ]]: \"\"\" Makes an API call to get the webhooks for a channel. Parameters: channel_id (int): The ID of the channel. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/channels/ { channel_id } /webhooks\" , channel_id = channel_id ) )","title":"get_channel_webhooks()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_guild_webhooks","text":"Makes an API call to get the webhooks for a guild. Parameters: Name Type Description Default guild_id int The ID of the guild. required Returns: Type Description List[Dict[str, Any]] The data returned from the API. Source code in lefi/http.py async def get_guild_webhooks ( self , guild_id : int ) -> List [ Dict [ str , Any ]]: \"\"\" Makes an API call to get the webhooks for a guild. Parameters: guild_id (int): The ID of the guild. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/guilds/ { guild_id } /webhooks\" , guild_id = guild_id ) )","title":"get_guild_webhooks()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_webhook","text":"Makes an API call to get a webhook. Parameters: Name Type Description Default webhook_id int The ID of the webhook. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_webhook ( self , webhook_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a webhook. Parameters: webhook_id (int): The ID of the webhook. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/webhooks/ { webhook_id } \" , webhook_id = webhook_id ) )","title":"get_webhook()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_webhook_with_token","text":"Makes an API call to get a webhook with a token. Parameters: Name Type Description Default webhook_id int The ID of the webhook. required webhook_token str The token of the webhook. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_webhook_with_token ( self , webhook_id : int , webhook_token : str ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a webhook with a token. Parameters: webhook_id (int): The ID of the webhook. webhook_token (str): The token of the webhook. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/webhooks/ { webhook_id } / { webhook_token } \" , webhook_id = webhook_id , webhookd_token = webhook_token , ), )","title":"get_webhook_with_token()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.modify_webhook","text":"Makes an API call to modify a webhook. Parameters: Name Type Description Default webhook_id int The ID of the webhook. required name Optional[str] The name of the webhook. None avatar Optional[bytes] The avatar of the webhook. None channel_id Optional[int] The ID of the channel to move the webhook to. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def modify_webhook ( self , webhook_id : int , * , name : Optional [ str ] = None , avatar : Optional [ bytes ] = None , channel_id : Optional [ int ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to modify a webhook. Parameters: webhook_id (int): The ID of the webhook. name (Optional[str]): The name of the webhook. avatar (Optional[bytes]): The avatar of the webhook. channel_id (Optional[int]): The ID of the channel to move the webhook to. Returns: The data returned from the API. \"\"\" payload = update_payload ({}, name = name , avatar = avatar , channel_id = channel_id ) if \"avatar\" in payload : payload [ \"avatar\" ] = bytes_to_data_uri ( payload [ \"avatar\" ]) return await self . request ( \"PATCH\" , Route ( f \"/webhooks/ { webhook_id } \" , webhook_id = webhook_id ), json = payload , )","title":"modify_webhook()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.modify_webhook_with_token","text":"Makes an API call to modify a webhook with a token. Parameters: Name Type Description Default webhook_id int The ID of the webhook. required webhook_token str The token of the webhook. required name Optional[str] The name of the webhook. None avatar Optional[bytes] The avatar of the webhook. None Source code in lefi/http.py async def modify_webhook_with_token ( self , webhook_id : int , webhook_token : str , * , name : Optional [ str ] = None , avatar : Optional [ bytes ] = None , ): \"\"\" Makes an API call to modify a webhook with a token. Parameters: webhook_id (int): The ID of the webhook. webhook_token (str): The token of the webhook. name (Optional[str]): The name of the webhook. avatar (Optional[bytes]): The avatar of the webhook. \"\"\" payload = update_payload ( {}, name = name , avatar = avatar , ) if \"avatar\" in payload : payload [ \"avatar\" ] = bytes_to_data_uri ( payload [ \"avatar\" ]) await self . request ( \"PATCH\" , Route ( f \"/webhooks/ { webhook_id } / { webhook_token } \" , webhook_id = webhook_id , webhook_token = webhook_token , ), json = payload , )","title":"modify_webhook_with_token()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.delete_webhook","text":"Makes an API call to delete a webhook. Parameters: Name Type Description Default webhook_id int The ID of the webhook. required Source code in lefi/http.py async def delete_webhook ( self , webhook_id : int ) -> None : \"\"\" Makes an API call to delete a webhook. Parameters: webhook_id (int): The ID of the webhook. \"\"\" await self . request ( \"DELETE\" , Route ( f \"/webhooks/ { webhook_id } \" , webhook_id = webhook_id ) )","title":"delete_webhook()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.delete_webhook_with_token","text":"Makes an API call to delete a webhook with a token. Parameters: Name Type Description Default webhook_id int The ID of the webhook. required webhook_token str The token of the webhook. required Source code in lefi/http.py async def delete_webhook_with_token ( self , webhook_id : int , webhook_token : str ) -> None : \"\"\" Makes an API call to delete a webhook with a token. Parameters: webhook_id (int): The ID of the webhook. webhook_token (str): The token of the webhook. \"\"\" await self . request ( \"DELETE\" , Route ( f \"/webhooks/ { webhook_id } / { webhook_token } \" , webhook_id = webhook_id , webhook_token = webhook_token , ), )","title":"delete_webhook_with_token()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.execute_webhook","text":"Makes an API call to execute a webhook. Parameters: Name Type Description Default webhook_id int The ID of the webhook. required webhook_token str The token of the webhook. required content Optional[str] The content of the message. None username Optional[str] The username of the webhook. None avatar_url Optional[str] The avatar url of the webhook. None tts Optional[bool] Whether the message should be TTS. None file Optional[File] The file to upload. None embeds Optional[List[Dict[str, Any]]] The embeds to send. None allowed_mentions Optional[Dict[str, Any]] The allowed mentions. None componenets Optional[List[Dict[str, Any]]] The components to send. None wait Optional[bool] Whether to wait for server confirmation before response. None thread_id Optional[int] The ID of the thread to post to. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def execute_webhook ( self , webhook_id : int , webhook_token : str , * , content : Optional [ str ] = None , username : Optional [ str ] = None , avatar_url : Optional [ str ] = None , tts : Optional [ bool ] = None , file : Optional [ File ] = None , embeds : Optional [ List [ Dict [ str , Any ]]] = None , allowed_mentions : Optional [ Dict [ str , Any ]] = None , componenets : Optional [ List [ Dict [ str , Any ]]] = None , wait : Optional [ bool ] = None , thread_id : Optional [ int ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to execute a webhook. Parameters: webhook_id (int): The ID of the webhook. webhook_token (str): The token of the webhook. content (Optional[str]): The content of the message. username (Optional[str]): The username of the webhook. avatar_url (Optional[str]): The avatar url of the webhook. tts (Optional[bool]): Whether the message should be TTS. file (Optional[File]): The file to upload. embeds (Optional[List[Dict[str, Any]]]): The embeds to send. allowed_mentions (Optional[Dict[str, Any]]): The allowed mentions. componenets (Optional[List[Dict[str, Any]]]): The components to send. wait (Optional[bool]): Whether to wait for server confirmation before response. thread_id (Optional[int]): The ID of the thread to post to. Returns: The data returned from the API. \"\"\" form = self . form_helper ([ file ]) payload = update_payload ( {}, content = content , username = username , avatar_url = avatar_url , tts = tts , embeds = embeds , allowed_mentions = allowed_mentions , componenets = componenets , ) params = update_payload ({}, wait = wait , thread_id = thread_id ) return await self . request ( \"POST\" , Route ( f \"/webhooks/ { webhook_id } / { webhook_token } \" , webhook_id = webhook_id , webhook_token = webhook_token , ), json = payload , form = form , params = params , )","title":"execute_webhook()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_webhook_message","text":"Makes an API call to get a webhook message. Parameters: Name Type Description Default webhook_id int The ID of the webhook. required webhook_token str The token of the webhook. required message_id int The ID of the message. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_webhook_message ( self , webhook_id : int , webhook_token : str , message_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a webhook message. Parameters: webhook_id (int): The ID of the webhook. webhook_token (str): The token of the webhook. message_id (int): The ID of the message. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/webhooks/ { webhook_id } / { webhook_token } /messages/ { message_id } \" , webhook_id = webhook_id , webhook_token = webhook_token , ), )","title":"get_webhook_message()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.edit_webhook_message","text":"Makes an API call to edit a webhook message. Parameters: Name Type Description Default webhook_id int The ID of the webhook. required webhook_token str The token of the webhook. required message_id int The ID of the message. required content Optional[str] The content of the message. None embeds Optional[List[Dict[str, Any]]] The embeds to send. None file Optional[File] The file to upload. None allowed_mentions Optional[Dict[str, Any]] The allowed mentions. None componenets Optional[List[Dict[str, Any]]] The components to send. None attachments Optional[List[Dict[str, Any]]] The attachments to send. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def edit_webhook_message ( self , webhook_id : int , webhook_token : str , message_id : int , * , content : Optional [ str ] = None , embeds : Optional [ List [ Dict [ str , Any ]]] = None , file : Optional [ File ] = None , allowed_mentions : Optional [ Dict [ str , Any ]] = None , componenets : Optional [ List [ Dict [ str , Any ]]] = None , attachments : Optional [ List [ Dict [ str , Any ]]] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to edit a webhook message. Parameters: webhook_id (int): The ID of the webhook. webhook_token (str): The token of the webhook. message_id (int): The ID of the message. content (Optional[str]): The content of the message. embeds (Optional[List[Dict[str, Any]]]): The embeds to send. file (Optional[File]): The file to upload. allowed_mentions (Optional[Dict[str, Any]]): The allowed mentions. componenets (Optional[List[Dict[str, Any]]]): The components to send. attachments (Optional[List[Dict[str, Any]]]): The attachments to send. Returns: The data returned from the API. \"\"\" form = self . form_helper ([ file ]) payload = update_payload ( {}, content = content , embeds = embeds , allowed_mentions = allowed_mentions , componenets = componenets , attachments = attachments , ) return await self . request ( \"PATCH\" , Route ( f \"/webhooks/ { webhook_id } / { webhook_token } /messages/ { message_id } \" , webhook_id = webhook_id , webhook_token = webhook_token , ), json = payload , form = form , )","title":"edit_webhook_message()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.delete_webhook_message","text":"Makes an API call to delete a webhook message. Parameters: Name Type Description Default webhook_id int The ID of the webhook. required webhook_token str The token of the webhook. required message_id int The ID of the message. required Returns: Type Description The data returned from the API. Source code in lefi/http.py async def delete_webhook_message ( self , webhook_id : int , webhook_token : str , message_id : int ): \"\"\" Makes an API call to delete a webhook message. Parameters: webhook_id (int): The ID of the webhook. webhook_token (str): The token of the webhook. message_id (int): The ID of the message. Returns: The data returned from the API. \"\"\" return await self . request ( \"DELETE\" , Route ( f \"/webhooks/ { webhook_id } / { webhook_token } /messages/ { message_id } \" , webhook_id = webhook_id , webhook_token = webhook_token , ), )","title":"delete_webhook_message()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_global_application_commands","text":"Makes an API call to get global application commands. Parameters: Name Type Description Default application_id int The ID of the application. required Returns: Type Description List[Dict[str, Any]] The data returned from the API. Source code in lefi/http.py async def get_global_application_commands ( self , application_id : int ) -> List [ Dict [ str , Any ]]: \"\"\" Makes an API call to get global application commands. Parameters: application_id (int): The ID of the application. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/applications/ { application_id } /commands\" ) )","title":"get_global_application_commands()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.create_global_application_command","text":"Makes an API call to create a global application command. Parameters: Name Type Description Default application_id int The ID of the application. required name str The name of the command. required description str The description of the command. required options Optional[List[Dict[str, Any]]] The options of the command. None default_permission bool Whether the command is enabled by default. True type int The type of the command. 1 Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def create_global_application_command ( self , application_id : int , * , name : str , description : str , options : Optional [ List [ Dict [ str , Any ]]] = None , default_permission : bool = True , type : int = 1 , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to create a global application command. Parameters: application_id (int): The ID of the application. name (str): The name of the command. description (str): The description of the command. options (Optional[List[Dict[str, Any]]]): The options of the command. default_permission (bool): Whether the command is enabled by default. type (int): The type of the command. Returns: The data returned from the API. \"\"\" payload = update_payload ( {}, name = name , description = description , options = options , default_permission = default_permission , type = type , ) return await self . request ( \"POST\" , Route ( f \"/applications/ { application_id } /commands\" ), json = payload )","title":"create_global_application_command()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_global_application_command","text":"Makes an API call to get a global application command. Parameters: Name Type Description Default application_id int The ID of the application. required command_id int The ID of the command. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_global_application_command ( self , application_id : int , command_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a global application command. Parameters: application_id (int): The ID of the application. command_id (int): The ID of the command. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/applications/ { application_id } /commands/ { command_id } \" ) )","title":"get_global_application_command()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.edit_global_application_command","text":"Makes an API call to edit a global application command. Parameters: Name Type Description Default application_id int The ID of the application. required command_id int The ID of the command. required name Optional[str] The name of the command. None description Optional[str] The description of the command. None options Optional[List[Dict[str, Any]]] The options of the command. None default_permission Optional[bool] Whether the command is enabled by default. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def edit_global_application_command ( self , application_id : int , command_id : int , * , name : Optional [ str ] = None , description : Optional [ str ] = None , options : Optional [ List [ Dict [ str , Any ]]] = None , default_permission : Optional [ bool ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to edit a global application command. Parameters: application_id (int): The ID of the application. command_id (int): The ID of the command. name (Optional[str]): The name of the command. description (Optional[str]): The description of the command. options (Optional[List[Dict[str, Any]]]): The options of the command. default_permission (Optional[bool]): Whether the command is enabled by default. Returns: The data returned from the API. \"\"\" payload = update_payload ( {}, name = name , description = description , options = options , default_permission = default_permission , ) return await self . request ( \"PATCH\" , Route ( f \"/applications/ { application_id } /commands/ { command_id } \" ), json = payload , )","title":"edit_global_application_command()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.delete_global_application_command","text":"Makes an API call to delete a global application command. Parameters: Name Type Description Default application_id int The ID of the application. required command_id int The ID of the command. required Source code in lefi/http.py async def delete_global_application_command ( self , application_id : int , command_id : int ) -> None : \"\"\" Makes an API call to delete a global application command. Parameters: application_id (int): The ID of the application. command_id (int): The ID of the command. \"\"\" await self . request ( \"DELETE\" , Route ( f \"/applications/ { application_id } /commands/ { command_id } \" ) )","title":"delete_global_application_command()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.bulk_overwrite_global_application_commands","text":"Makes an API call to bulk overwrite global application commands. Parameters: Name Type Description Default application_id int The ID of the application. required commands List[Dict[str, Any]] The commands to overwrite. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def bulk_overwrite_global_application_commands ( self , application_id : int , * , commands : List [ Dict [ str , Any ]] ) -> Dict [ str , Any ]: \"\"\" Makes an API call to bulk overwrite global application commands. Parameters: application_id (int): The ID of the application. commands (List[Dict[str, Any]]): The commands to overwrite. Returns: The data returned from the API. \"\"\" return await self . request ( \"PUT\" , Route ( f \"/applications/ { application_id } /commands\" ), json = commands )","title":"bulk_overwrite_global_application_commands()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_guild_application_commands","text":"Makes an API call to get guild application commands. Parameters: Name Type Description Default application_id int The ID of the application. required guild_id int The ID of the guild. required Returns: Type Description List[Dict[str, Any]] The data returned from the API. Source code in lefi/http.py async def get_guild_application_commands ( self , application_id : int , guild_id : int ) -> List [ Dict [ str , Any ]]: \"\"\" Makes an API call to get guild application commands. Parameters: application_id (int): The ID of the application. guild_id (int): The ID of the guild. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/applications/ { application_id } /guilds/ { guild_id } /commands\" , guild_id = guild_id , ), )","title":"get_guild_application_commands()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.create_guild_application_command","text":"Makes an API call to create a guild application command. Parameters: Name Type Description Default application_id int The ID of the application. required name str The name of the command. required description str The description of the command. required options Optional[List[Dict[str, Any]]] The options of the command. None default_permission bool Whether the command is enabled by default. True type int The type of the command. 1 Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def create_guild_application_command ( self , application_id : int , guild_id : int , * , name : str , description : str , options : Optional [ List [ Dict [ str , Any ]]] = None , default_permission : bool = True , type : int = 1 , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to create a guild application command. Parameters: application_id (int): The ID of the application. name (str): The name of the command. description (str): The description of the command. options (Optional[List[Dict[str, Any]]]): The options of the command. default_permission (bool): Whether the command is enabled by default. type (int): The type of the command. Returns: The data returned from the API. \"\"\" payload = update_payload ( {}, name = name , description = description , options = options , default_permission = default_permission , type = type , ) return await self . request ( \"POST\" , Route ( f \"/applications/ { application_id } /guilds/ { guild_id } /commands\" , guild_id = guild_id , ), json = payload , )","title":"create_guild_application_command()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_guild_application_command","text":"Makes an API call to get a guild application command. Parameters: Name Type Description Default application_id int The ID of the application. required guild_id int The ID of the guild. required command_id int The ID of the command. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_guild_application_command ( self , application_id : int , guild_id : int , command_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a guild application command. Parameters: application_id (int): The ID of the application. guild_id (int): The ID of the guild. command_id (int): The ID of the command. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/applications/ { application_id } /guilds/ { guild_id } /commands/ { command_id } \" , guild_id = guild_id , ), )","title":"get_guild_application_command()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.edit_guild_application_command","text":"Makes an API call to edit a guild application command. Parameters: Name Type Description Default application_id int The ID of the application. required guild_id int The ID of the guild. required command_id int The ID of the command. required name Optional[str] The name of the command. None description Optional[str] The description of the command. None options Optional[List[Dict[str, Any]]] The options of the command. None default_permission Optional[bool] Whether the command is enabled by default. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def edit_guild_application_command ( self , application_id : int , guild_id : int , command_id : int , * , name : Optional [ str ] = None , description : Optional [ str ] = None , options : Optional [ List [ Dict [ str , Any ]]] = None , default_permission : Optional [ bool ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to edit a guild application command. Parameters: application_id (int): The ID of the application. guild_id (int): The ID of the guild. command_id (int): The ID of the command. name (Optional[str]): The name of the command. description (Optional[str]): The description of the command. options (Optional[List[Dict[str, Any]]]): The options of the command. default_permission (Optional[bool]): Whether the command is enabled by default. Returns: The data returned from the API. \"\"\" payload = update_payload ( {}, name = name , description = description , options = options , default_permission = default_permission , ) return await self . request ( \"PATCH\" , Route ( f \"/applications/ { application_id } /guilds/ { guild_id } /commands/ { command_id } \" , guild_id = guild_id , ), json = payload , )","title":"edit_guild_application_command()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.delete_guild_application_command","text":"Makes an API call to delete a guild application command. Parameters: Name Type Description Default application_id int The ID of the application. required guild_id int The ID of the guild. required command_id int The ID of the command. required Source code in lefi/http.py async def delete_guild_application_command ( self , application_id : int , guild_id : int , command_id : int ): \"\"\" Makes an API call to delete a guild application command. Parameters: application_id (int): The ID of the application. guild_id (int): The ID of the guild. command_id (int): The ID of the command. \"\"\" await self . request ( \"DELETE\" , Route ( f \"/applications/ { application_id } /guilds/ { guild_id } /commands/ { command_id } \" , guild_id = guild_id , ), )","title":"delete_guild_application_command()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.bulk_overwrite_guild_application_commands","text":"Makes an API call to bulk overwrite guild application commands. Parameters: Name Type Description Default application_id int The ID of the application. required guild_id int The ID of the guild. required commands List[Dict[str, Any]] The commands to overwrite. required Returns: Type Description List[Dict[str, Any]] The data returned from the API. Source code in lefi/http.py async def bulk_overwrite_guild_application_commands ( self , application_id : int , guild_id : int , * , commands : List [ Dict [ str , Any ]] ) -> List [ Dict [ str , Any ]]: \"\"\" Makes an API call to bulk overwrite guild application commands. Parameters: application_id (int): The ID of the application. guild_id (int): The ID of the guild. commands (List[Dict[str, Any]]): The commands to overwrite. Returns: The data returned from the API. \"\"\" return await self . request ( \"PUT\" , Route ( f \"/applications/ { application_id } /guilds/ { guild_id } /commands\" , guild_id = guild_id , ), json = commands , )","title":"bulk_overwrite_guild_application_commands()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_guild_application_command_permissions","text":"Makes an API call to get guild application command permissions. Parameters: Name Type Description Default application_id int The ID of the application. required guild_id int The ID of the guild. required command_id int The ID of the command. required Returns: Type Description List[Dict[str, Any]] The data returned from the API. Source code in lefi/http.py async def get_guild_application_command_permissions ( self , application_id : int , guild_id : int ) -> List [ Dict [ str , Any ]]: \"\"\" Makes an API call to get guild application command permissions. Parameters: application_id (int): The ID of the application. guild_id (int): The ID of the guild. command_id (int): The ID of the command. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/applications/ { application_id } /guilds/ { guild_id } /commands/permissions\" , guild_id = guild_id , ), )","title":"get_guild_application_command_permissions()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_application_command_permissions","text":"Makes an API call to get application command permissions. Parameters: Name Type Description Default application_id int The ID of the application. required guild_id int The ID of the guild. required command_id int The ID of the command. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_application_command_permissions ( self , application_id : int , guild_id : int , command_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get application command permissions. Parameters: application_id (int): The ID of the application. guild_id (int): The ID of the guild. command_id (int): The ID of the command. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/applications/ { application_id } /guilds/ { guild_id } /commands/ { command_id } /permissions\" , guild_id = guild_id , ), )","title":"get_application_command_permissions()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.edit_application_command_permissions","text":"Makes an API call to edit application command permissions. Parameters: Name Type Description Default application_id int The ID of the application. required guild_id int The ID of the guild. required command_id int The ID of the command. required permissions List[Dict[str, Any]] The permissions to edit. required Returns: Type Description The data returned from the API. Source code in lefi/http.py async def edit_application_command_permissions ( self , application_id : int , guild_id : int , command_id : int , * , permissions : List [ Dict [ str , Any ]], ): \"\"\" Makes an API call to edit application command permissions. Parameters: application_id (int): The ID of the application. guild_id (int): The ID of the guild. command_id (int): The ID of the command. permissions (List[Dict[str, Any]]): The permissions to edit. Returns: The data returned from the API. \"\"\" payload = { \"permissions\" : permissions } return await self . request ( \"PATCH\" , Route ( f \"/applications/ { application_id } /guilds/ { guild_id } /commands/ { command_id } /permissions\" , guild_id = guild_id , ), json = payload , )","title":"edit_application_command_permissions()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.batch_edit_application_command_permissions","text":"Makes an API call to batch edit application command permissions. Parameters: Name Type Description Default application_id int The ID of the application. required guild_id int The ID of the guild. required permissions List[Dict[str, Any]] The permissions to edit. required Returns: Type Description The data returned from the API. Source code in lefi/http.py async def batch_edit_application_command_permissions ( self , application_id : int , guild_id : int , * , permissions : List [ Dict [ str , Any ]] ): \"\"\" Makes an API call to batch edit application command permissions. Parameters: application_id (int): The ID of the application. guild_id (int): The ID of the guild. permissions (List[Dict[str, Any]]): The permissions to edit. Returns: The data returned from the API. \"\"\" return await self . request ( \"PATCH\" , Route ( f \"/applications/ { application_id } /guilds/ { guild_id } /commands/permissions\" , guild_id = guild_id , ), json = permissions , )","title":"batch_edit_application_command_permissions()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.create_interaction_response","text":"Makes an API call to create an interaction response. Parameters: Name Type Description Default interaction_id int The ID of the interaction. required interaction_token str The token of the interaction. required type int The type of the response. required data Optional[Dict[str, Any]] The data of the response. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def create_interaction_response ( self , interaction_id : int , interaction_token : str , * , type : int , data : Optional [ Dict [ str , Any ]] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to create an interaction response. Parameters: interaction_id (int): The ID of the interaction. interaction_token (str): The token of the interaction. type (int): The type of the response. data (Optional[Dict[str, Any]]): The data of the response. Returns: The data returned from the API. \"\"\" payload = update_payload ({}, type = type , data = data ) return await self . request ( \"POST\" , Route ( f \"/interactions/ { interaction_id } / { interaction_token } /callback\" ), json = payload , )","title":"create_interaction_response()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_original_interaction_response","text":"Makes an API call to get the original interaction response. Parameters: Name Type Description Default application_id int The ID of the application. required interaction_token str The token of the interaction. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_original_interaction_response ( self , application_id : int , interaction_token : str ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get the original interaction response. Parameters: application_id (int): The ID of the application. interaction_token (str): The token of the interaction. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/webhooks/ { application_id } / { interaction_token } /messages/@original\" ), )","title":"get_original_interaction_response()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.edit_original_interaction_response","text":"Makes an API call to edit the original interaction response. Parameters: Name Type Description Default application_id int The ID of the application. required interaction_token str The token of the interaction. required content Optional[str] The content of the response. None embeds Optional[List[Dict[str, Any]]] The embeds of the response. None file Optional[File] The file of the response. None allowed_mentions Optional[Dict[str, Any]] The allowed mentions of the response. None componenets Optional[List[Dict[str, Any]]] The components of the response. None attachments Optional[List[Dict[str, Any]]] The attachments of the response. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def edit_original_interaction_response ( self , application_id : int , interaction_token : str , * , content : Optional [ str ] = None , embeds : Optional [ List [ Dict [ str , Any ]]] = None , file : Optional [ File ] = None , allowed_mentions : Optional [ Dict [ str , Any ]] = None , componenets : Optional [ List [ Dict [ str , Any ]]] = None , attachments : Optional [ List [ Dict [ str , Any ]]] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to edit the original interaction response. Parameters: application_id (int): The ID of the application. interaction_token (str): The token of the interaction. content (Optional[str]): The content of the response. embeds (Optional[List[Dict[str, Any]]]): The embeds of the response. file (Optional[File]): The file of the response. allowed_mentions (Optional[Dict[str, Any]]): The allowed mentions of the response. componenets (Optional[List[Dict[str, Any]]]): The components of the response. attachments (Optional[List[Dict[str, Any]]]): The attachments of the response. Returns: The data returned from the API. \"\"\" form = self . form_helper ([ file ]) payload = update_payload ( {}, content = content , embeds = embeds , allowed_mentions = allowed_mentions , componenets = componenets , attachments = attachments , ) return await self . request ( \"PATCH\" , Route ( f \"/webhooks/ { application_id } / { interaction_token } /messages/@original\" ), json = payload , form = form , )","title":"edit_original_interaction_response()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.delete_original_interaction_response","text":"Makes an API call to delete the original interaction response. Parameters: Name Type Description Default application_id int The ID of the application. required interaction_token str The token of the interaction. required Returns: Type Description The data returned from the API. Source code in lefi/http.py async def delete_original_interaction_response ( self , application_id : int , interaction_token : str ): \"\"\" Makes an API call to delete the original interaction response. Parameters: application_id (int): The ID of the application. interaction_token (str): The token of the interaction. Returns: The data returned from the API. \"\"\" await self . request ( \"DELETE\" , Route ( f \"/webhooks/ { application_id } / { interaction_token } /messages/@original\" ), )","title":"delete_original_interaction_response()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.create_followup_message","text":"Makes an API call to create a followup message. Parameters: Name Type Description Default application_id int The ID of the application. required interaction_token str The token of the interaction. required content Optional[str] The content of the response. None embeds Optional[List[Dict[str, Any]]] The embeds of the response. None file Optional[File] The file of the response. None allowed_mentions Optional[Dict[str, Any]] The allowed mentions of the response. None componenets Optional[List[Dict[str, Any]]] The components of the response. None attachments Optional[List[Dict[str, Any]]] The attachments of the response. None flags Optional[int] The flags of the response. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def create_followup_message ( self , application_id : int , interaction_token : str , * , content : Optional [ str ] = None , embeds : Optional [ List [ Dict [ str , Any ]]] = None , file : Optional [ File ] = None , allowed_mentions : Optional [ Dict [ str , Any ]] = None , componenets : Optional [ List [ Dict [ str , Any ]]] = None , attachments : Optional [ List [ Dict [ str , Any ]]] = None , flags : Optional [ int ] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to create a followup message. Parameters: application_id (int): The ID of the application. interaction_token (str): The token of the interaction. content (Optional[str]): The content of the response. embeds (Optional[List[Dict[str, Any]]]): The embeds of the response. file (Optional[File]): The file of the response. allowed_mentions (Optional[Dict[str, Any]]): The allowed mentions of the response. componenets (Optional[List[Dict[str, Any]]]): The components of the response. attachments (Optional[List[Dict[str, Any]]]): The attachments of the response. flags (Optional[int]): The flags of the response. Returns: The data returned from the API. \"\"\" form = self . form_helper ([ file ]) payload = update_payload ( {}, content = content , embeds = embeds , allowed_mentions = allowed_mentions , componenets = componenets , attachments = attachments , flags = flags , ) return await self . request ( \"POST\" , Route ( f \"/webhooks/ { application_id } / { interaction_token } /messages\" ), json = payload , form = form , )","title":"create_followup_message()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.get_followup_message","text":"Makes an API call to get a followup message. Parameters: Name Type Description Default application_id int The ID of the application. required interaction_token str The token of the interaction. required message_id int The ID of the message. required Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def get_followup_message ( self , application_id : int , interaction_token : str , message_id : int ) -> Dict [ str , Any ]: \"\"\" Makes an API call to get a followup message. Parameters: application_id (int): The ID of the application. interaction_token (str): The token of the interaction. message_id (int): The ID of the message. Returns: The data returned from the API. \"\"\" return await self . request ( \"GET\" , Route ( f \"/webhooks/ { application_id } / { interaction_token } /messages/ { message_id } \" ), )","title":"get_followup_message()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.edit_followup_message","text":"Makes an API call to edit a followup message. Parameters: Name Type Description Default application_id int The ID of the application. required interaction_token str The token of the interaction. required message_id int The ID of the message. required content Optional[str] The content of the response. None embeds Optional[List[Dict[str, Any]]] The embeds of the response. None file Optional[File] The file of the response. None allowed_mentions Optional[Dict[str, Any]] The allowed mentions of the response. None componenets Optional[List[Dict[str, Any]]] The components of the response. None attachments Optional[List[Dict[str, Any]]] The attachments of the response. None Returns: Type Description Dict[str, Any] The data returned from the API. Source code in lefi/http.py async def edit_followup_message ( self , application_id : int , interaction_token : str , message_id : int , * , content : Optional [ str ] = None , embeds : Optional [ List [ Dict [ str , Any ]]] = None , file : Optional [ File ] = None , allowed_mentions : Optional [ Dict [ str , Any ]] = None , componenets : Optional [ List [ Dict [ str , Any ]]] = None , attachments : Optional [ List [ Dict [ str , Any ]]] = None , ) -> Dict [ str , Any ]: \"\"\" Makes an API call to edit a followup message. Parameters: application_id (int): The ID of the application. interaction_token (str): The token of the interaction. message_id (int): The ID of the message. content (Optional[str]): The content of the response. embeds (Optional[List[Dict[str, Any]]]): The embeds of the response. file (Optional[File]): The file of the response. allowed_mentions (Optional[Dict[str, Any]]): The allowed mentions of the response. componenets (Optional[List[Dict[str, Any]]]): The components of the response. attachments (Optional[List[Dict[str, Any]]]): The attachments of the response. Returns: The data returned from the API. \"\"\" form = self . form_helper ([ file ]) payload = update_payload ( {}, content = content , embeds = embeds , allowed_mentions = allowed_mentions , componenets = componenets , attachments = attachments , ) return await self . request ( \"PATCH\" , Route ( f \"/webhooks/ { application_id } / { interaction_token } /messages/ { message_id } \" ), json = payload , form = form , )","title":"edit_followup_message()"},{"location":"API-Reference/http/#lefi.http.HTTPClient.delete_followup_message","text":"Makes an API call to delete a followup message. Parameters: Name Type Description Default application_id int The ID of the application. required interaction_token str The token of the interaction. required message_id int The ID of the message. required Source code in lefi/http.py async def delete_followup_message ( self , application_id : int , interaction_token : str , message_id : int ): \"\"\" Makes an API call to delete a followup message. Parameters: application_id (int): The ID of the application. interaction_token (str): The token of the interaction. message_id (int): The ID of the message. \"\"\" await self . request ( \"DELETE\" , Route ( f \"/webhooks/ { application_id } / { interaction_token } /messages/ { message_id } \" ), )","title":"delete_followup_message()"},{"location":"API-Reference/integration/","text":"Represents an Integration. guild : Guild property readonly Returns the Guild of the integration. id : int property readonly Returns the ID of the integration. name : str property readonly Returns the name of the integration. type : str property readonly Returns the type of the integration. enabled : bool property readonly Returns whether the integration is enabled. syncing : bool property readonly Returns whether the integration is syncing. role_id : Optional [ int ] property readonly Returns the ID of the role. role : Optional [ Role ] property readonly Returns the Role . enable_emoticons : bool property readonly Returns whether emoticons are enabled. expire_behavior : Optional [ int ] property readonly Returns the expire behavior. expire_grace_period : Optional [ int ] property readonly Returns the expire grace period. account : IntegrationAccount property readonly Returns the IntegrationAccount . application : Optional [ IntegrationApplication ] property readonly Returns the IntegrationApplication . synced_at : Optional [ datetime . datetime ] property readonly Returns the time the integration was last synced. subscriber_count : Optional [ int ] property readonly Returns the subscriber count. revoked : bool property readonly Returns whether the integration is revoked. __init__ ( self , state , data , guild ) special Creates an Integration. Parameters: Name Type Description Default state State The State to use. required data Dict[str, Any] The data to use to create the object. required Source code in lefi/objects/integration.py def __init__ ( self , state : State , data : Dict [ str , Any ], guild : Guild ) -> None : \"\"\" Creates an Integration. Parameters: state (State): The [State](./state.md) to use. data (Dict[str, Any]): The data to use to create the object. \"\"\" self . _state = state self . _data = data self . _guild = guild delete ( self ) async Deletes the integration. Source code in lefi/objects/integration.py async def delete ( self ) -> None : \"\"\" Deletes the integration. \"\"\" await self . _state . http . delete_guild_integration ( self . _guild . id , self . id )","title":"Integration"},{"location":"API-Reference/integration/#lefi.objects.integration.Integration.guild","text":"Returns the Guild of the integration.","title":"guild"},{"location":"API-Reference/integration/#lefi.objects.integration.Integration.id","text":"Returns the ID of the integration.","title":"id"},{"location":"API-Reference/integration/#lefi.objects.integration.Integration.name","text":"Returns the name of the integration.","title":"name"},{"location":"API-Reference/integration/#lefi.objects.integration.Integration.type","text":"Returns the type of the integration.","title":"type"},{"location":"API-Reference/integration/#lefi.objects.integration.Integration.enabled","text":"Returns whether the integration is enabled.","title":"enabled"},{"location":"API-Reference/integration/#lefi.objects.integration.Integration.syncing","text":"Returns whether the integration is syncing.","title":"syncing"},{"location":"API-Reference/integration/#lefi.objects.integration.Integration.role_id","text":"Returns the ID of the role.","title":"role_id"},{"location":"API-Reference/integration/#lefi.objects.integration.Integration.role","text":"Returns the Role .","title":"role"},{"location":"API-Reference/integration/#lefi.objects.integration.Integration.enable_emoticons","text":"Returns whether emoticons are enabled.","title":"enable_emoticons"},{"location":"API-Reference/integration/#lefi.objects.integration.Integration.expire_behavior","text":"Returns the expire behavior.","title":"expire_behavior"},{"location":"API-Reference/integration/#lefi.objects.integration.Integration.expire_grace_period","text":"Returns the expire grace period.","title":"expire_grace_period"},{"location":"API-Reference/integration/#lefi.objects.integration.Integration.account","text":"Returns the IntegrationAccount .","title":"account"},{"location":"API-Reference/integration/#lefi.objects.integration.Integration.application","text":"Returns the IntegrationApplication .","title":"application"},{"location":"API-Reference/integration/#lefi.objects.integration.Integration.synced_at","text":"Returns the time the integration was last synced.","title":"synced_at"},{"location":"API-Reference/integration/#lefi.objects.integration.Integration.subscriber_count","text":"Returns the subscriber count.","title":"subscriber_count"},{"location":"API-Reference/integration/#lefi.objects.integration.Integration.revoked","text":"Returns whether the integration is revoked.","title":"revoked"},{"location":"API-Reference/integration/#lefi.objects.integration.Integration.__init__","text":"Creates an Integration. Parameters: Name Type Description Default state State The State to use. required data Dict[str, Any] The data to use to create the object. required Source code in lefi/objects/integration.py def __init__ ( self , state : State , data : Dict [ str , Any ], guild : Guild ) -> None : \"\"\" Creates an Integration. Parameters: state (State): The [State](./state.md) to use. data (Dict[str, Any]): The data to use to create the object. \"\"\" self . _state = state self . _data = data self . _guild = guild","title":"__init__()"},{"location":"API-Reference/integration/#lefi.objects.integration.Integration.delete","text":"Deletes the integration. Source code in lefi/objects/integration.py async def delete ( self ) -> None : \"\"\" Deletes the integration. \"\"\" await self . _state . http . delete_guild_integration ( self . _guild . id , self . id )","title":"delete()"},{"location":"API-Reference/interactions/","text":"An object representing a discord interaction. type : InteractionType property readonly The type of the interaction. token : str property readonly The token of the interaction. These are only valid for 15 minutes. application_id : int property readonly The applications id. id : int property readonly The interactions ID responded : bool property readonly Whether or not the interaction has been responded to. channel : Optional [ Union [ Channel , DMChannel ]] property readonly The channel where the interaction was created. message : Optional [ Message ] property readonly The message which invoked the interaction. user : Union [ User , Member ] property readonly The user or member that created the interaction. guild : Optional [ Guild ] property readonly The guild where the interaction was created, if in one. origin : Optional [ Message ] property readonly The original response message of the interaction. send_message ( self , content = None , * , embeds = None , rows = None , ** kwargs ) async Sends a message through the interaction. Parameters: Name Type Description Default content Optional[str] The content of the message. None embeds Optional[List[Embed]] The embeds of the message. None rows Optional[List[ActionRow]] The rows to send with the message. None **kwargs Extra options to pass. {} Returns: Type Description Message The message after it was sent. Source code in lefi/objects/interactions/interaction.py async def send_message ( self , content : Optional [ str ] = None , * , embeds : Optional [ List [ Embed ]] = None , rows : Optional [ List [ ActionRow ]] = None , ** kwargs , ) -> Message : \"\"\" Sends a message through the interaction. Parameters: content (Optional[str]): The content of the message. embeds (Optional[List[Embed]]): The embeds of the message. rows (Optional[List[ActionRow]]): The rows to send with the message. **kwargs: Extra options to pass. Returns: The message after it was sent. \"\"\" if self . _responded : raise TypeError ( \"Responded to this interaction already\" ) embeds = [] if embeds is None else embeds payload = update_payload ( {}, content = content , components = [ row . to_dict () for row in rows ] if rows is not None else None , embeds = [ embed . to_dict () for embed in embeds ], ** kwargs , ) if rows is not None and payload . get ( \"components\" ): for row in rows : for component in row . components : self . _state . _components [ component . custom_id ] = ( component . callback , component , ) await self . _state . http . create_interaction_response ( self . id , self . token , type = InteractionResponse . MESSAGE , data = payload ) data = await self . _state . http . get_original_interaction_response ( self . application_id , self . token ) self . _responded = True self . _origin = self . _state . create_message ( data , self . channel ) return self . _origin edit_origin ( self , content = None , * , embeds = None , rows = None , ** kwargs ) async Edits the interactions original response message. Parameters: Name Type Description Default content Optional[str] The content of the message. None embeds Optional[List[lefi.Embed]] The list of embeds. None rows Optional[List[ActionRow]] The rows to send with the message. None kwargs Any The options to pass to lefi.HTTPClient.edit_message . {} Returns: Type Description Message The message after being editted. Source code in lefi/objects/interactions/interaction.py async def edit_origin ( self , content : Optional [ str ] = None , * , embeds : Optional [ List [ Embed ]] = None , rows : Optional [ List [ ActionRow ]] = None , ** kwargs , ) -> Message : \"\"\" Edits the interactions original response message. Parameters: content (Optional[str]): The content of the message. embeds (Optional[List[lefi.Embed]]): The list of embeds. rows (Optional[List[ActionRow]]): The rows to send with the message. kwargs (Any): The options to pass to [lefi.HTTPClient.edit_message](./http.md#lefi.HTTPClient.edit_message). Returns: The message after being editted. \"\"\" embeds = [] if not embeds else embeds payload = update_payload ( {}, content = content , components = [ row . to_dict () for row in rows ] if rows is not None else None , embeds = [ embed . to_dict () for embed in embeds ], ) if rows is not None and payload . get ( \"components\" ): for row in rows : for component in row . components : self . _state . _components [ component . custom_id ] = ( component . callback , component , ) data = await self . _state . http . edit_original_interaction_response ( self . application_id , self . token , ** payload ) return self . _state . create_message ( data , self . channel ) delete_origin ( self ) async Deletes the original response message. Source code in lefi/objects/interactions/interaction.py async def delete_origin ( self ) -> None : \"\"\" Deletes the original response message. \"\"\" await self . _state . http . delete_original_interaction_response ( self . application_id , self . token ) defer ( self ) async Defers the interaction. Source code in lefi/objects/interactions/interaction.py async def defer ( self ) -> None : \"\"\" Defers the interaction. \"\"\" if self . _responded : raise TypeError ( \"Responded to this interaction already\" ) await self . _state . http . create_interaction_response ( self . id , self . token , type = int ( self . type ), ) self . _responded = True pong ( self ) async Responds to a ping. Source code in lefi/objects/interactions/interaction.py async def pong ( self ) -> None : \"\"\" Responds to a ping. \"\"\" if self . _responded : raise TypeError ( \"Responded to this interaction already\" ) await self . _state . http . create_interaction_response ( self . id , self . token , type = InteractionResponse . PONG ) self . _responded = True edit_message ( self , content = None , * , embeds = None , rows = None , ** kwargs ) async Edits the message invoking the interaction. Parameters: Name Type Description Default content Optional[str] The content of the message. None embeds Optional[List[lefi.Embed]] The list of embeds. None rows Optional[List[ActionRow]] The rows to send with the message. None kwargs Any The options to pass to lefi.HTTPClient.edit_message . {} Returns: Type Description Message The message after being editted. Source code in lefi/objects/interactions/interaction.py async def edit_message ( self , content : Optional [ str ] = None , * , embeds : Optional [ List [ Embed ]] = None , rows : Optional [ List [ ActionRow ]] = None , ** kwargs , ) -> Message : \"\"\" Edits the message invoking the interaction. Parameters: content (Optional[str]): The content of the message. embeds (Optional[List[lefi.Embed]]): The list of embeds. rows (Optional[List[ActionRow]]): The rows to send with the message. kwargs (Any): The options to pass to [lefi.HTTPClient.edit_message](./http.md#lefi.HTTPClient.edit_message). Returns: The message after being editted. \"\"\" embeds = [] if not embeds else embeds payload = update_payload ( {}, content = content , components = [ row . to_dict () for row in rows ] if rows is not None else None , embeds = [ embed . to_dict () for embed in embeds ], ) if rows is not None and payload . get ( \"components\" ): for row in rows : for component in row . components : self . _state . _components [ component . custom_id ] = ( component . callback , component , ) data = await self . _state . http . create_interaction_response ( self . id , self . token , type = InteractionResponse . UPDATE , data = payload ) return self . _state . create_message ( data , self . channel )","title":"Interaction"},{"location":"API-Reference/interactions/#lefi.objects.interactions.interaction.Interaction.type","text":"The type of the interaction.","title":"type"},{"location":"API-Reference/interactions/#lefi.objects.interactions.interaction.Interaction.token","text":"The token of the interaction. These are only valid for 15 minutes.","title":"token"},{"location":"API-Reference/interactions/#lefi.objects.interactions.interaction.Interaction.application_id","text":"The applications id.","title":"application_id"},{"location":"API-Reference/interactions/#lefi.objects.interactions.interaction.Interaction.id","text":"The interactions ID","title":"id"},{"location":"API-Reference/interactions/#lefi.objects.interactions.interaction.Interaction.responded","text":"Whether or not the interaction has been responded to.","title":"responded"},{"location":"API-Reference/interactions/#lefi.objects.interactions.interaction.Interaction.channel","text":"The channel where the interaction was created.","title":"channel"},{"location":"API-Reference/interactions/#lefi.objects.interactions.interaction.Interaction.message","text":"The message which invoked the interaction.","title":"message"},{"location":"API-Reference/interactions/#lefi.objects.interactions.interaction.Interaction.user","text":"The user or member that created the interaction.","title":"user"},{"location":"API-Reference/interactions/#lefi.objects.interactions.interaction.Interaction.guild","text":"The guild where the interaction was created, if in one.","title":"guild"},{"location":"API-Reference/interactions/#lefi.objects.interactions.interaction.Interaction.origin","text":"The original response message of the interaction.","title":"origin"},{"location":"API-Reference/interactions/#lefi.objects.interactions.interaction.Interaction.send_message","text":"Sends a message through the interaction. Parameters: Name Type Description Default content Optional[str] The content of the message. None embeds Optional[List[Embed]] The embeds of the message. None rows Optional[List[ActionRow]] The rows to send with the message. None **kwargs Extra options to pass. {} Returns: Type Description Message The message after it was sent. Source code in lefi/objects/interactions/interaction.py async def send_message ( self , content : Optional [ str ] = None , * , embeds : Optional [ List [ Embed ]] = None , rows : Optional [ List [ ActionRow ]] = None , ** kwargs , ) -> Message : \"\"\" Sends a message through the interaction. Parameters: content (Optional[str]): The content of the message. embeds (Optional[List[Embed]]): The embeds of the message. rows (Optional[List[ActionRow]]): The rows to send with the message. **kwargs: Extra options to pass. Returns: The message after it was sent. \"\"\" if self . _responded : raise TypeError ( \"Responded to this interaction already\" ) embeds = [] if embeds is None else embeds payload = update_payload ( {}, content = content , components = [ row . to_dict () for row in rows ] if rows is not None else None , embeds = [ embed . to_dict () for embed in embeds ], ** kwargs , ) if rows is not None and payload . get ( \"components\" ): for row in rows : for component in row . components : self . _state . _components [ component . custom_id ] = ( component . callback , component , ) await self . _state . http . create_interaction_response ( self . id , self . token , type = InteractionResponse . MESSAGE , data = payload ) data = await self . _state . http . get_original_interaction_response ( self . application_id , self . token ) self . _responded = True self . _origin = self . _state . create_message ( data , self . channel ) return self . _origin","title":"send_message()"},{"location":"API-Reference/interactions/#lefi.objects.interactions.interaction.Interaction.edit_origin","text":"Edits the interactions original response message. Parameters: Name Type Description Default content Optional[str] The content of the message. None embeds Optional[List[lefi.Embed]] The list of embeds. None rows Optional[List[ActionRow]] The rows to send with the message. None kwargs Any The options to pass to lefi.HTTPClient.edit_message . {} Returns: Type Description Message The message after being editted. Source code in lefi/objects/interactions/interaction.py async def edit_origin ( self , content : Optional [ str ] = None , * , embeds : Optional [ List [ Embed ]] = None , rows : Optional [ List [ ActionRow ]] = None , ** kwargs , ) -> Message : \"\"\" Edits the interactions original response message. Parameters: content (Optional[str]): The content of the message. embeds (Optional[List[lefi.Embed]]): The list of embeds. rows (Optional[List[ActionRow]]): The rows to send with the message. kwargs (Any): The options to pass to [lefi.HTTPClient.edit_message](./http.md#lefi.HTTPClient.edit_message). Returns: The message after being editted. \"\"\" embeds = [] if not embeds else embeds payload = update_payload ( {}, content = content , components = [ row . to_dict () for row in rows ] if rows is not None else None , embeds = [ embed . to_dict () for embed in embeds ], ) if rows is not None and payload . get ( \"components\" ): for row in rows : for component in row . components : self . _state . _components [ component . custom_id ] = ( component . callback , component , ) data = await self . _state . http . edit_original_interaction_response ( self . application_id , self . token , ** payload ) return self . _state . create_message ( data , self . channel )","title":"edit_origin()"},{"location":"API-Reference/interactions/#lefi.objects.interactions.interaction.Interaction.delete_origin","text":"Deletes the original response message. Source code in lefi/objects/interactions/interaction.py async def delete_origin ( self ) -> None : \"\"\" Deletes the original response message. \"\"\" await self . _state . http . delete_original_interaction_response ( self . application_id , self . token )","title":"delete_origin()"},{"location":"API-Reference/interactions/#lefi.objects.interactions.interaction.Interaction.defer","text":"Defers the interaction. Source code in lefi/objects/interactions/interaction.py async def defer ( self ) -> None : \"\"\" Defers the interaction. \"\"\" if self . _responded : raise TypeError ( \"Responded to this interaction already\" ) await self . _state . http . create_interaction_response ( self . id , self . token , type = int ( self . type ), ) self . _responded = True","title":"defer()"},{"location":"API-Reference/interactions/#lefi.objects.interactions.interaction.Interaction.pong","text":"Responds to a ping. Source code in lefi/objects/interactions/interaction.py async def pong ( self ) -> None : \"\"\" Responds to a ping. \"\"\" if self . _responded : raise TypeError ( \"Responded to this interaction already\" ) await self . _state . http . create_interaction_response ( self . id , self . token , type = InteractionResponse . PONG ) self . _responded = True","title":"pong()"},{"location":"API-Reference/interactions/#lefi.objects.interactions.interaction.Interaction.edit_message","text":"Edits the message invoking the interaction. Parameters: Name Type Description Default content Optional[str] The content of the message. None embeds Optional[List[lefi.Embed]] The list of embeds. None rows Optional[List[ActionRow]] The rows to send with the message. None kwargs Any The options to pass to lefi.HTTPClient.edit_message . {} Returns: Type Description Message The message after being editted. Source code in lefi/objects/interactions/interaction.py async def edit_message ( self , content : Optional [ str ] = None , * , embeds : Optional [ List [ Embed ]] = None , rows : Optional [ List [ ActionRow ]] = None , ** kwargs , ) -> Message : \"\"\" Edits the message invoking the interaction. Parameters: content (Optional[str]): The content of the message. embeds (Optional[List[lefi.Embed]]): The list of embeds. rows (Optional[List[ActionRow]]): The rows to send with the message. kwargs (Any): The options to pass to [lefi.HTTPClient.edit_message](./http.md#lefi.HTTPClient.edit_message). Returns: The message after being editted. \"\"\" embeds = [] if not embeds else embeds payload = update_payload ( {}, content = content , components = [ row . to_dict () for row in rows ] if rows is not None else None , embeds = [ embed . to_dict () for embed in embeds ], ) if rows is not None and payload . get ( \"components\" ): for row in rows : for component in row . components : self . _state . _components [ component . custom_id ] = ( component . callback , component , ) data = await self . _state . http . create_interaction_response ( self . id , self . token , type = InteractionResponse . UPDATE , data = payload ) return self . _state . create_message ( data , self . channel )","title":"edit_message()"},{"location":"API-Reference/invite/","text":"Represents an invite. Attributes: Name Type Description code The invite code. url The invite URL. guild : Optional [ Guild ] property readonly The Guild this invite is for. channel : Optional [ Union [ TextChannel , VoiceChannel ]] property readonly The Channel this invite is for. inviter : Optional [ User ] property readonly The User who created this invite. uses : Optional [ int ] property readonly The number of times this invite has been used. max_uses : Optional [ int ] property readonly The maximum number of times this invite can be used. max_age : Optional [ int ] property readonly The maximum age of this invite. temporary : bool property readonly Whether this invite is temporary. created_at : Optional [ datetime . datetime ] property readonly The creation time of this invite. target_type : Optional [ InviteTargetType ] property readonly The target Type of this invite. target_user : Optional [ User ] property readonly The target User of this invite. approximate_presence_count : Optional [ int ] property readonly The approximate number of members in the guild this invite is for. approximate_member_count : Optional [ int ] property readonly The approximate number of members in the guild this invite is for. __init__ ( self , state , data ) special Creates an Invite. Parameters: Name Type Description Default state lefi.State The State to create the invite in. required data Dict[str, Any] The data to create the invite from. required Source code in lefi/objects/invite.py def __init__ ( self , state : State , data : Dict [ str , Any ]) -> None : \"\"\" Creates an Invite. Parameters: state (lefi.State): The [State](./state.md) to create the invite in. data: The data to create the invite from. \"\"\" self . _data = data self . _state = state delete ( self ) async Deletes this invite. Returns: Type Description Invite The deleted invite. Source code in lefi/objects/invite.py async def delete ( self ) -> Invite : \"\"\" Deletes this invite. Returns: The deleted invite. \"\"\" await self . _state . http . delete_invite ( self . code ) return self","title":"Invite"},{"location":"API-Reference/invite/#lefi.objects.invite.Invite.guild","text":"The Guild this invite is for.","title":"guild"},{"location":"API-Reference/invite/#lefi.objects.invite.Invite.channel","text":"The Channel this invite is for.","title":"channel"},{"location":"API-Reference/invite/#lefi.objects.invite.Invite.inviter","text":"The User who created this invite.","title":"inviter"},{"location":"API-Reference/invite/#lefi.objects.invite.Invite.uses","text":"The number of times this invite has been used.","title":"uses"},{"location":"API-Reference/invite/#lefi.objects.invite.Invite.max_uses","text":"The maximum number of times this invite can be used.","title":"max_uses"},{"location":"API-Reference/invite/#lefi.objects.invite.Invite.max_age","text":"The maximum age of this invite.","title":"max_age"},{"location":"API-Reference/invite/#lefi.objects.invite.Invite.temporary","text":"Whether this invite is temporary.","title":"temporary"},{"location":"API-Reference/invite/#lefi.objects.invite.Invite.created_at","text":"The creation time of this invite.","title":"created_at"},{"location":"API-Reference/invite/#lefi.objects.invite.Invite.target_type","text":"The target Type of this invite.","title":"target_type"},{"location":"API-Reference/invite/#lefi.objects.invite.Invite.target_user","text":"The target User of this invite.","title":"target_user"},{"location":"API-Reference/invite/#lefi.objects.invite.Invite.approximate_presence_count","text":"The approximate number of members in the guild this invite is for.","title":"approximate_presence_count"},{"location":"API-Reference/invite/#lefi.objects.invite.Invite.approximate_member_count","text":"The approximate number of members in the guild this invite is for.","title":"approximate_member_count"},{"location":"API-Reference/invite/#lefi.objects.invite.Invite.__init__","text":"Creates an Invite. Parameters: Name Type Description Default state lefi.State The State to create the invite in. required data Dict[str, Any] The data to create the invite from. required Source code in lefi/objects/invite.py def __init__ ( self , state : State , data : Dict [ str , Any ]) -> None : \"\"\" Creates an Invite. Parameters: state (lefi.State): The [State](./state.md) to create the invite in. data: The data to create the invite from. \"\"\" self . _data = data self . _state = state","title":"__init__()"},{"location":"API-Reference/invite/#lefi.objects.invite.Invite.delete","text":"Deletes this invite. Returns: Type Description Invite The deleted invite. Source code in lefi/objects/invite.py async def delete ( self ) -> Invite : \"\"\" Deletes this invite. Returns: The deleted invite. \"\"\" await self . _state . http . delete_invite ( self . code ) return self","title":"delete()"},{"location":"API-Reference/member/","text":"Represents a member of a guild. Attributes: Name Type Description guild lefi.Guild The lefi.Guild instance which the member belongs to. voice : Optional [ VoiceState ] property readonly Returns the voice state of the member. Returns: Type Description lefi.VoiceState The voice state of the member. nick : Optional [ str ] property readonly The nickname of of member. roles : List [ Role ] property readonly The Role s of the member. joined_at : datetime . datetime property readonly A datetime.datetime instance representing when the member joined the guild. premium_since : Optional [ datetime . datetime ] property readonly How long the member has been a premium. deaf : bool property readonly Whether or not the member is deafend. mute : bool property readonly Whether or not the member is muted. permissions : Permissions property readonly The permissions of the member. __init__ ( self , state , data , guild ) special Creates a Member instance. Parameters: Name Type Description Default state lefi.State The State instance. required data dict The data of the Member . required guild lefi.Guild The Guild instance. required Source code in lefi/objects/member.py def __init__ ( self , state : State , data : Dict , guild : Guild ) -> None : \"\"\" Creates a Member instance. Parameters: state (lefi.State): The [State](./state.md) instance. data (dict): The data of the [Member](./member.md). guild (lefi.Guild): The [Guild](./guild.md) instance. \"\"\" super () . __init__ ( state , data [ \"user\" ]) state . add_user ( data [ \"user\" ]) self . _roles : Dict [ int , Role ] = {} self . _member = data self . guild = guild add_role ( self , role ) async Adds a role to the member. Parameters: Name Type Description Default role lefi.Role The Role to add. required Returns: Type Description Member The Member instance. Source code in lefi/objects/member.py async def add_role ( self , role : Role ) -> Member : \"\"\" Adds a role to the member. Parameters: role (lefi.Role): The [Role](./role.md) to add. Returns: The Member instance. \"\"\" await self . _state . http . add_guild_member_role ( self . guild . id , self . id , role . id ) self . _roles [ role . id ] = role return self remove_role ( self , role ) async Removes a role from the member. Parameters: Name Type Description Default role lefi.Role The Role to remove. required Returns: Type Description Member The Member instance. Source code in lefi/objects/member.py async def remove_role ( self , role : Role ) -> Member : \"\"\" Removes a role from the member. Parameters: role (lefi.Role): The [Role](./role.md) to remove. Returns: The Member instance. \"\"\" await self . _state . http . remove_guild_member_role ( self . guild . id , self . id , role . id ) self . _roles . pop ( role . id , None ) return self edit ( self , * , nick = None , roles = None , mute = None , deaf = None , channel = None ) async Edits the member. Parameters: Name Type Description Default nick str The new nickname. None roles list The new list of roles. None mute bool Whether the member is muted or not. None deaf bool Whether the member is deafened or not. None channel lefi.VoiceChannel The new VoiceChannel . None Source code in lefi/objects/member.py async def edit ( self , * , nick : Optional [ str ] = None , roles : Optional [ List [ Role ]] = None , mute : Optional [ bool ] = None , deaf : Optional [ bool ] = None , channel : Optional [ VoiceChannel ] = None ) -> Member : \"\"\" Edits the member. Parameters: nick (str): The new nickname. roles (list): The new list of roles. mute (bool): Whether the member is muted or not. deaf (bool): Whether the member is deafened or not. channel (lefi.VoiceChannel): The new [VoiceChannel](./channel.md#lefi.VoiceChannel). \"\"\" channel_id = channel . id if channel else None roles = roles or [] data = await self . _state . http . edit_guild_member ( guild_id = self . guild . id , member_id = self . id , nick = nick , roles = [ role . id for role in roles ], mute = mute , deaf = deaf , channel_id = channel_id , ) self . _member = data return self kick ( self ) async Kicks the member from the guild. Source code in lefi/objects/member.py async def kick ( self ) -> None : \"\"\" Kicks the member from the guild. \"\"\" await self . guild . kick ( self ) ban ( self , * , delete_message_days = 0 ) async Bans the member from the guild. Parameters: Name Type Description Default delete_message_days int The number of days to delete messages for. 0 Source code in lefi/objects/member.py async def ban ( self , * , delete_message_days : int = 0 ) -> None : \"\"\" Bans the member from the guild. Parameters: delete_message_days (int): The number of days to delete messages for. \"\"\" await self . guild . ban ( self , delete_message_days = delete_message_days ) unban ( self ) async Unbans the member from the guild. Source code in lefi/objects/member.py async def unban ( self ) -> None : \"\"\" Unbans the member from the guild. \"\"\" await self . guild . unban ( self )","title":"Member"},{"location":"API-Reference/member/#lefi.objects.member.Member.voice","text":"Returns the voice state of the member. Returns: Type Description lefi.VoiceState The voice state of the member.","title":"voice"},{"location":"API-Reference/member/#lefi.objects.member.Member.nick","text":"The nickname of of member.","title":"nick"},{"location":"API-Reference/member/#lefi.objects.member.Member.roles","text":"The Role s of the member.","title":"roles"},{"location":"API-Reference/member/#lefi.objects.member.Member.joined_at","text":"A datetime.datetime instance representing when the member joined the guild.","title":"joined_at"},{"location":"API-Reference/member/#lefi.objects.member.Member.premium_since","text":"How long the member has been a premium.","title":"premium_since"},{"location":"API-Reference/member/#lefi.objects.member.Member.deaf","text":"Whether or not the member is deafend.","title":"deaf"},{"location":"API-Reference/member/#lefi.objects.member.Member.mute","text":"Whether or not the member is muted.","title":"mute"},{"location":"API-Reference/member/#lefi.objects.member.Member.permissions","text":"The permissions of the member.","title":"permissions"},{"location":"API-Reference/member/#lefi.objects.member.Member.__init__","text":"Creates a Member instance. Parameters: Name Type Description Default state lefi.State The State instance. required data dict The data of the Member . required guild lefi.Guild The Guild instance. required Source code in lefi/objects/member.py def __init__ ( self , state : State , data : Dict , guild : Guild ) -> None : \"\"\" Creates a Member instance. Parameters: state (lefi.State): The [State](./state.md) instance. data (dict): The data of the [Member](./member.md). guild (lefi.Guild): The [Guild](./guild.md) instance. \"\"\" super () . __init__ ( state , data [ \"user\" ]) state . add_user ( data [ \"user\" ]) self . _roles : Dict [ int , Role ] = {} self . _member = data self . guild = guild","title":"__init__()"},{"location":"API-Reference/member/#lefi.objects.member.Member.add_role","text":"Adds a role to the member. Parameters: Name Type Description Default role lefi.Role The Role to add. required Returns: Type Description Member The Member instance. Source code in lefi/objects/member.py async def add_role ( self , role : Role ) -> Member : \"\"\" Adds a role to the member. Parameters: role (lefi.Role): The [Role](./role.md) to add. Returns: The Member instance. \"\"\" await self . _state . http . add_guild_member_role ( self . guild . id , self . id , role . id ) self . _roles [ role . id ] = role return self","title":"add_role()"},{"location":"API-Reference/member/#lefi.objects.member.Member.remove_role","text":"Removes a role from the member. Parameters: Name Type Description Default role lefi.Role The Role to remove. required Returns: Type Description Member The Member instance. Source code in lefi/objects/member.py async def remove_role ( self , role : Role ) -> Member : \"\"\" Removes a role from the member. Parameters: role (lefi.Role): The [Role](./role.md) to remove. Returns: The Member instance. \"\"\" await self . _state . http . remove_guild_member_role ( self . guild . id , self . id , role . id ) self . _roles . pop ( role . id , None ) return self","title":"remove_role()"},{"location":"API-Reference/member/#lefi.objects.member.Member.edit","text":"Edits the member. Parameters: Name Type Description Default nick str The new nickname. None roles list The new list of roles. None mute bool Whether the member is muted or not. None deaf bool Whether the member is deafened or not. None channel lefi.VoiceChannel The new VoiceChannel . None Source code in lefi/objects/member.py async def edit ( self , * , nick : Optional [ str ] = None , roles : Optional [ List [ Role ]] = None , mute : Optional [ bool ] = None , deaf : Optional [ bool ] = None , channel : Optional [ VoiceChannel ] = None ) -> Member : \"\"\" Edits the member. Parameters: nick (str): The new nickname. roles (list): The new list of roles. mute (bool): Whether the member is muted or not. deaf (bool): Whether the member is deafened or not. channel (lefi.VoiceChannel): The new [VoiceChannel](./channel.md#lefi.VoiceChannel). \"\"\" channel_id = channel . id if channel else None roles = roles or [] data = await self . _state . http . edit_guild_member ( guild_id = self . guild . id , member_id = self . id , nick = nick , roles = [ role . id for role in roles ], mute = mute , deaf = deaf , channel_id = channel_id , ) self . _member = data return self","title":"edit()"},{"location":"API-Reference/member/#lefi.objects.member.Member.kick","text":"Kicks the member from the guild. Source code in lefi/objects/member.py async def kick ( self ) -> None : \"\"\" Kicks the member from the guild. \"\"\" await self . guild . kick ( self )","title":"kick()"},{"location":"API-Reference/member/#lefi.objects.member.Member.ban","text":"Bans the member from the guild. Parameters: Name Type Description Default delete_message_days int The number of days to delete messages for. 0 Source code in lefi/objects/member.py async def ban ( self , * , delete_message_days : int = 0 ) -> None : \"\"\" Bans the member from the guild. Parameters: delete_message_days (int): The number of days to delete messages for. \"\"\" await self . guild . ban ( self , delete_message_days = delete_message_days )","title":"ban()"},{"location":"API-Reference/member/#lefi.objects.member.Member.unban","text":"Unbans the member from the guild. Source code in lefi/objects/member.py async def unban ( self ) -> None : \"\"\" Unbans the member from the guild. \"\"\" await self . guild . unban ( self )","title":"unban()"},{"location":"API-Reference/message/","text":"Represents a message. id : int property readonly The ID of the message. created_at : datetime . datetime property readonly The time the message was created at. channel : Channels property readonly The lefi.Channel which the message is in. guild : Optional [ Guild ] property readonly The lefi.Guild which the message is in. content : str property readonly The content of the message. author : Union [ User , Member ] property readonly The author of the message. pinned : bool property readonly Whether the message is pinned. __init__ ( self , state , data , channel ) special Creates a Message object. Parameters: Name Type Description Default state State The State of the client. required data Dict The data of the message. required channel Channels The Channel the message was sent in. required Source code in lefi/objects/message.py def __init__ ( self , state : State , data : Dict , channel : Channels ) -> None : \"\"\" Creates a Message object. Parameters: state (State): The [State](./state.md) of the client. data (Dict): The data of the message. channel (Channels): The [Channel](./channel.md) the message was sent in. \"\"\" self . _channel = channel self . _state = state self . _data = data self . _pinned = data . get ( \"pinned\" , False ) crosspost ( self ) async Crossposts the message. Returns: Type Description Message The message being crossposted. Source code in lefi/objects/message.py async def crosspost ( self ) -> Message : \"\"\" Crossposts the message. Returns: The message being crossposted. \"\"\" data = await self . _state . http . crosspost_message ( self . channel . id , self . id ) return self . _state . create_message ( data , self . channel ) add_reaction ( self , reaction ) async Adds a reaction to the message. Parameters: Name Type Description Default reaction str The reaction to add. required Source code in lefi/objects/message.py async def add_reaction ( self , reaction : str ) -> None : \"\"\" Adds a reaction to the message. Parameters: reaction (str): The reaction to add. \"\"\" await self . _state . http . create_reaction ( channel_id = self . channel . id , message_id = self . id , emoji = reaction ) remove_reaction ( self , reaction , user = None ) async Removes a reaction from the message. Parameters: Name Type Description Default reaction str The reaction to remove. required user Optional[Snowflake] The message to remove the reaction from. None Source code in lefi/objects/message.py async def remove_reaction ( self , reaction : str , user : Optional [ Snowflake ] = None ) -> None : \"\"\" Removes a reaction from the message. Parameters: reaction (str): The reaction to remove. user (Optional[Snowflake]): The message to remove the reaction from. \"\"\" await self . _state . http . delete_reaction ( channel_id = self . channel . id , message_id = self . id , emoji = reaction , user_id = user . id if user is not None else user , ) pin ( self ) async Pins the message. Source code in lefi/objects/message.py async def pin ( self ) -> None : \"\"\" Pins the message. \"\"\" await self . _state . http . pin_message ( self . channel . id , self . id ) self . _pinned = True unpin ( self ) async Unpins the message. Source code in lefi/objects/message.py async def unpin ( self ) -> None : \"\"\" Unpins the message. \"\"\" await self . _state . http . unpin_message ( self . channel . id , self . id ) self . _pinned = False delete ( self ) async Deletes the message. Source code in lefi/objects/message.py async def delete ( self ) -> None : \"\"\" Deletes the message. \"\"\" await self . _state . http . delete_message ( self . channel . id , self . id ) self . _state . _messages . pop ( self . id , None ) create_thread ( self , * , name , auto_archive_duration = None ) async Creates a thread from the message. Parameters: Name Type Description Default name str The name of the thread. required auto_archive_duration Optional[int] The amount of time to archive the thread. None Returns: Type Description Thread The created thread. Source code in lefi/objects/message.py async def create_thread ( self , * , name : str , auto_archive_duration : Optional [ int ] = None ) -> Thread : \"\"\" Creates a thread from the message. Parameters: name (str): The name of the thread. auto_archive_duration (Optional[int]): The amount of time to archive the thread. Returns: The created thread. \"\"\" if not self . guild : raise TypeError ( \"Cannot a create thread in a DM channel.\" ) if auto_archive_duration is not None : if auto_archive_duration not in ( 60 , 1440 , 4320 , 10080 ): raise ValueError ( \"auto_archive_duration must be 60, 1440, 4320 or 10080\" ) data = await self . _state . http . start_thread_with_message ( channel_id = self . channel . id , message_id = self . id , name = name , auto_archive_duration = auto_archive_duration , ) return Thread ( self . _state , self . guild , data )","title":"Message"},{"location":"API-Reference/message/#lefi.objects.message.Message.id","text":"The ID of the message.","title":"id"},{"location":"API-Reference/message/#lefi.objects.message.Message.created_at","text":"The time the message was created at.","title":"created_at"},{"location":"API-Reference/message/#lefi.objects.message.Message.channel","text":"The lefi.Channel which the message is in.","title":"channel"},{"location":"API-Reference/message/#lefi.objects.message.Message.guild","text":"The lefi.Guild which the message is in.","title":"guild"},{"location":"API-Reference/message/#lefi.objects.message.Message.content","text":"The content of the message.","title":"content"},{"location":"API-Reference/message/#lefi.objects.message.Message.author","text":"The author of the message.","title":"author"},{"location":"API-Reference/message/#lefi.objects.message.Message.pinned","text":"Whether the message is pinned.","title":"pinned"},{"location":"API-Reference/message/#lefi.objects.message.Message.__init__","text":"Creates a Message object. Parameters: Name Type Description Default state State The State of the client. required data Dict The data of the message. required channel Channels The Channel the message was sent in. required Source code in lefi/objects/message.py def __init__ ( self , state : State , data : Dict , channel : Channels ) -> None : \"\"\" Creates a Message object. Parameters: state (State): The [State](./state.md) of the client. data (Dict): The data of the message. channel (Channels): The [Channel](./channel.md) the message was sent in. \"\"\" self . _channel = channel self . _state = state self . _data = data self . _pinned = data . get ( \"pinned\" , False )","title":"__init__()"},{"location":"API-Reference/message/#lefi.objects.message.Message.crosspost","text":"Crossposts the message. Returns: Type Description Message The message being crossposted. Source code in lefi/objects/message.py async def crosspost ( self ) -> Message : \"\"\" Crossposts the message. Returns: The message being crossposted. \"\"\" data = await self . _state . http . crosspost_message ( self . channel . id , self . id ) return self . _state . create_message ( data , self . channel )","title":"crosspost()"},{"location":"API-Reference/message/#lefi.objects.message.Message.add_reaction","text":"Adds a reaction to the message. Parameters: Name Type Description Default reaction str The reaction to add. required Source code in lefi/objects/message.py async def add_reaction ( self , reaction : str ) -> None : \"\"\" Adds a reaction to the message. Parameters: reaction (str): The reaction to add. \"\"\" await self . _state . http . create_reaction ( channel_id = self . channel . id , message_id = self . id , emoji = reaction )","title":"add_reaction()"},{"location":"API-Reference/message/#lefi.objects.message.Message.remove_reaction","text":"Removes a reaction from the message. Parameters: Name Type Description Default reaction str The reaction to remove. required user Optional[Snowflake] The message to remove the reaction from. None Source code in lefi/objects/message.py async def remove_reaction ( self , reaction : str , user : Optional [ Snowflake ] = None ) -> None : \"\"\" Removes a reaction from the message. Parameters: reaction (str): The reaction to remove. user (Optional[Snowflake]): The message to remove the reaction from. \"\"\" await self . _state . http . delete_reaction ( channel_id = self . channel . id , message_id = self . id , emoji = reaction , user_id = user . id if user is not None else user , )","title":"remove_reaction()"},{"location":"API-Reference/message/#lefi.objects.message.Message.pin","text":"Pins the message. Source code in lefi/objects/message.py async def pin ( self ) -> None : \"\"\" Pins the message. \"\"\" await self . _state . http . pin_message ( self . channel . id , self . id ) self . _pinned = True","title":"pin()"},{"location":"API-Reference/message/#lefi.objects.message.Message.unpin","text":"Unpins the message. Source code in lefi/objects/message.py async def unpin ( self ) -> None : \"\"\" Unpins the message. \"\"\" await self . _state . http . unpin_message ( self . channel . id , self . id ) self . _pinned = False","title":"unpin()"},{"location":"API-Reference/message/#lefi.objects.message.Message.delete","text":"Deletes the message. Source code in lefi/objects/message.py async def delete ( self ) -> None : \"\"\" Deletes the message. \"\"\" await self . _state . http . delete_message ( self . channel . id , self . id ) self . _state . _messages . pop ( self . id , None )","title":"delete()"},{"location":"API-Reference/message/#lefi.objects.message.Message.create_thread","text":"Creates a thread from the message. Parameters: Name Type Description Default name str The name of the thread. required auto_archive_duration Optional[int] The amount of time to archive the thread. None Returns: Type Description Thread The created thread. Source code in lefi/objects/message.py async def create_thread ( self , * , name : str , auto_archive_duration : Optional [ int ] = None ) -> Thread : \"\"\" Creates a thread from the message. Parameters: name (str): The name of the thread. auto_archive_duration (Optional[int]): The amount of time to archive the thread. Returns: The created thread. \"\"\" if not self . guild : raise TypeError ( \"Cannot a create thread in a DM channel.\" ) if auto_archive_duration is not None : if auto_archive_duration not in ( 60 , 1440 , 4320 , 10080 ): raise ValueError ( \"auto_archive_duration must be 60, 1440, 4320 or 10080\" ) data = await self . _state . http . start_thread_with_message ( channel_id = self . channel . id , message_id = self . id , name = name , auto_archive_duration = auto_archive_duration , ) return Thread ( self . _state , self . guild , data )","title":"create_thread()"},{"location":"API-Reference/option/","text":"Represents an option for a select menu. Attributes: Name Type Description label str The label of the option. value str The value of the option. description Optional[str] The description. emoji Optional[Union[str, Emoji]] The emoji for the option. default bool Whether or not the option is the default option. __init__ ( self , label , value , ** kwargs ) special Parameters: Name Type Description Default label str The label of the option. required value str The value of the option. required description Optional[str] The description. required emoji Optional[Union[str, Emoji]] The emoji for the option. required default bool Whether or not the option is the default option. required Source code in lefi/__init__.py def __init__ ( self , label : str , value : str , ** kwargs ) -> None : \"\"\" Parameters: label (str): The label of the option. value (str): The value of the option. description (Optional[str]): The description. emoji (Optional[Union[str, Emoji]]): The emoji for the option. default (bool): Whether or not the option is the default option. \"\"\" self . label = label self . value = value self . description : Optional [ str ] = kwargs . get ( \"description\" ) self . emoji : Optional [ Union [ str , Emoji ]] = kwargs . get ( \"emoji\" ) self . default : bool = kwargs . get ( \"default\" , False )","title":"Option"},{"location":"API-Reference/option/#lefi.components.Option.__init__","text":"Parameters: Name Type Description Default label str The label of the option. required value str The value of the option. required description Optional[str] The description. required emoji Optional[Union[str, Emoji]] The emoji for the option. required default bool Whether or not the option is the default option. required Source code in lefi/__init__.py def __init__ ( self , label : str , value : str , ** kwargs ) -> None : \"\"\" Parameters: label (str): The label of the option. value (str): The value of the option. description (Optional[str]): The description. emoji (Optional[Union[str, Emoji]]): The emoji for the option. default (bool): Whether or not the option is the default option. \"\"\" self . label = label self . value = value self . description : Optional [ str ] = kwargs . get ( \"description\" ) self . emoji : Optional [ Union [ str , Emoji ]] = kwargs . get ( \"emoji\" ) self . default : bool = kwargs . get ( \"default\" , False )","title":"__init__()"},{"location":"API-Reference/overwrite/","text":"Represents an overwrite. id : int property readonly The ID of the overwrite. type : OverwriteType property readonly The OverwriteType . allow : Permissions property readonly Value of all allowed Permission s. deny : Permissions property readonly Value of all denied Permission s. __init__ ( self , data ) special Initialize the Overwrite. Parameters: Name Type Description Default data Dict The data to initialize the Overwrite with. required Source code in lefi/objects/permissions.py def __init__ ( self , data : Dict ) -> None : \"\"\" Initialize the Overwrite. Parameters: data (Dict): The data to initialize the Overwrite with. \"\"\" self . _data = data","title":"Overwrite"},{"location":"API-Reference/overwrite/#lefi.objects.permissions.Overwrite.id","text":"The ID of the overwrite.","title":"id"},{"location":"API-Reference/overwrite/#lefi.objects.permissions.Overwrite.type","text":"The OverwriteType .","title":"type"},{"location":"API-Reference/overwrite/#lefi.objects.permissions.Overwrite.allow","text":"Value of all allowed Permission s.","title":"allow"},{"location":"API-Reference/overwrite/#lefi.objects.permissions.Overwrite.deny","text":"Value of all denied Permission s.","title":"deny"},{"location":"API-Reference/overwrite/#lefi.objects.permissions.Overwrite.__init__","text":"Initialize the Overwrite. Parameters: Name Type Description Default data Dict The data to initialize the Overwrite with. required Source code in lefi/objects/permissions.py def __init__ ( self , data : Dict ) -> None : \"\"\" Initialize the Overwrite. Parameters: data (Dict): The data to initialize the Overwrite with. \"\"\" self . _data = data","title":"__init__()"},{"location":"API-Reference/role/","text":"Represents a role. Attributes: Name Type Description id int The ID of the role. guild : Guild property readonly The lefi.Guild instance which the role belongs to. id : int property readonly The ID of the role. name : str property readonly The name of the role. color : int property readonly The color of the role. hoist : bool property readonly Whether or not the role is hoisted. position : int property readonly The position of the role. permissions : Permissions property readonly The Permission s of the role. managed : bool property readonly Whether or not the role is managed. mentionable : bool property readonly Whether or not the role is mentionable. __init__ ( self , state , data , guild ) special Creates a Role object. Parameters: Name Type Description Default state State The State of the client. required data Dict The data of the role. required guild Guild The Guild the role is in. required Source code in lefi/objects/role.py def __init__ ( self , state : State , data : Dict , guild : Guild ) -> None : \"\"\" Creates a Role object. Parameters: state (State): The [State](./state.md) of the client. data (Dict): The data of the role. guild (Guild): The [Guild](./guild.md) the role is in. \"\"\" self . _state = state self . _data = data self . _guild = guild delete ( self ) async Deletes the role from its guild. Source code in lefi/objects/role.py async def delete ( self ) -> None : \"\"\" Deletes the role from its guild. \"\"\" await self . _state . http . delete_guild_role ( self . guild . id , self . id ) edit ( self , * , name = None , permissions = None , color = None , hoist = None , mentionable = None ) async Edits the role. Parameters: Name Type Description Default name Optional[str] The new name of the role. None permissions Optional[Permissions] The new permissions of the role. None color Optional[int] The new color of the role. None hoist Optional[bool] Whether or not to hoist the role. None mentionable Optional[bool] Whether or not the role is mentionable. None Returns: Type Description Role The role after editting. Source code in lefi/objects/role.py async def edit ( self , * , name : Optional [ str ] = None , permissions : Optional [ Permissions ] = None , color : Optional [ int ] = None , hoist : Optional [ bool ] = None , mentionable : Optional [ bool ] = None , ) -> Role : \"\"\" Edits the role. Parameters: name (Optional[str]): The new name of the role. permissions (Optional[Permissions]): The new permissions of the role. color (Optional[int]): The new color of the role. hoist (Optional[bool]): Whether or not to hoist the role. mentionable (Optional[bool]): Whether or not the role is mentionable. Returns: The role after editting. \"\"\" data = await self . _state . http . modify_guild_role ( guild_id = self . guild . id , role_id = self . id , name = name , permissions = permissions . value if permissions else None , color = color , hoist = hoist , mentionable = mentionable , ) self . _data = data return self","title":"Role"},{"location":"API-Reference/role/#lefi.objects.role.Role.guild","text":"The lefi.Guild instance which the role belongs to.","title":"guild"},{"location":"API-Reference/role/#lefi.objects.role.Role.id","text":"The ID of the role.","title":"id"},{"location":"API-Reference/role/#lefi.objects.role.Role.name","text":"The name of the role.","title":"name"},{"location":"API-Reference/role/#lefi.objects.role.Role.color","text":"The color of the role.","title":"color"},{"location":"API-Reference/role/#lefi.objects.role.Role.hoist","text":"Whether or not the role is hoisted.","title":"hoist"},{"location":"API-Reference/role/#lefi.objects.role.Role.position","text":"The position of the role.","title":"position"},{"location":"API-Reference/role/#lefi.objects.role.Role.permissions","text":"The Permission s of the role.","title":"permissions"},{"location":"API-Reference/role/#lefi.objects.role.Role.managed","text":"Whether or not the role is managed.","title":"managed"},{"location":"API-Reference/role/#lefi.objects.role.Role.mentionable","text":"Whether or not the role is mentionable.","title":"mentionable"},{"location":"API-Reference/role/#lefi.objects.role.Role.__init__","text":"Creates a Role object. Parameters: Name Type Description Default state State The State of the client. required data Dict The data of the role. required guild Guild The Guild the role is in. required Source code in lefi/objects/role.py def __init__ ( self , state : State , data : Dict , guild : Guild ) -> None : \"\"\" Creates a Role object. Parameters: state (State): The [State](./state.md) of the client. data (Dict): The data of the role. guild (Guild): The [Guild](./guild.md) the role is in. \"\"\" self . _state = state self . _data = data self . _guild = guild","title":"__init__()"},{"location":"API-Reference/role/#lefi.objects.role.Role.delete","text":"Deletes the role from its guild. Source code in lefi/objects/role.py async def delete ( self ) -> None : \"\"\" Deletes the role from its guild. \"\"\" await self . _state . http . delete_guild_role ( self . guild . id , self . id )","title":"delete()"},{"location":"API-Reference/role/#lefi.objects.role.Role.edit","text":"Edits the role. Parameters: Name Type Description Default name Optional[str] The new name of the role. None permissions Optional[Permissions] The new permissions of the role. None color Optional[int] The new color of the role. None hoist Optional[bool] Whether or not to hoist the role. None mentionable Optional[bool] Whether or not the role is mentionable. None Returns: Type Description Role The role after editting. Source code in lefi/objects/role.py async def edit ( self , * , name : Optional [ str ] = None , permissions : Optional [ Permissions ] = None , color : Optional [ int ] = None , hoist : Optional [ bool ] = None , mentionable : Optional [ bool ] = None , ) -> Role : \"\"\" Edits the role. Parameters: name (Optional[str]): The new name of the role. permissions (Optional[Permissions]): The new permissions of the role. color (Optional[int]): The new color of the role. hoist (Optional[bool]): Whether or not to hoist the role. mentionable (Optional[bool]): Whether or not the role is mentionable. Returns: The role after editting. \"\"\" data = await self . _state . http . modify_guild_role ( guild_id = self . guild . id , role_id = self . id , name = name , permissions = permissions . value if permissions else None , color = color , hoist = hoist , mentionable = mentionable , ) self . _data = data return self","title":"edit()"},{"location":"API-Reference/selectmenu/","text":"Represents a discord select menu. Attributes: Name Type Description custom_id str The custom id of the select menu. placeholder Optional[str] The placeholder of the select menu. min_values int The minimum amount of values that can be choosen. max_values int The maximum amount of values that can be choosen. disabled bool Whether or not the select menu is disabled. values List[str] The list of values choosen after an interaction happens.","title":"SelectMenu"},{"location":"API-Reference/state/","text":"A class which represents the connection state between the client and discord. Attributes: Name Type Description client lefi.Client The lefi.Client instance being used. loop asyncio.AbstractEventLoop The asyncio.AbstractEventLoop being used. http lefi.HTTPClient The lefi.HTTPClient handling requests Danger This class is used internally. It is not meant to called directly __init__ ( self , client , loop ) special Parameters: Name Type Description Default client lefi.Client The Client being used. required loop asyncio.AbstractEventLoop The asyncio.AbstractEventLoop being used. required Source code in lefi/state.py def __init__ ( self , client : Client , loop : asyncio . AbstractEventLoop ) -> None : \"\"\" Parameters: client (lefi.Client): The [Client](./client.md) being used. loop (asyncio.AbstractEventLoop): The asyncio.AbstractEventLoop being used. \"\"\" self . client = client self . loop = loop self . http = client . http self . _messages = Cache [ Message ]( 1000 ) self . _users = Cache [ User ]() self . _guilds = Cache [ Guild ]() self . _emojis = Cache [ Emoji ]() self . _components = Cache [ Tuple [ Callable , Component ]]() self . _channels = Cache [ Union [ TextChannel , DMChannel , VoiceChannel , CategoryChannel , Channel ] ]() self . _emojis = Cache [ Emoji ]() self . _voice_clients = Cache [ VoiceClient ]() dispatch ( self , event , * payload ) Dispatches data to callbacks registered to events after parsing is finished. Parameters: Name Type Description Default event str The name of the event to dispatch to. required *payload Any The data after parsing is finished. () Source code in lefi/state.py def dispatch ( self , event : str , * payload : Any ) -> None : \"\"\" Dispatches data to callbacks registered to events after parsing is finished. Parameters: event (str): The name of the event to dispatch to. *payload (Any): The data after parsing is finished. \"\"\" events : Optional [ dict ] = self . client . events . get ( event ) futures = self . client . futures . get ( event , []) if callbacks := self . client . once_events . get ( event ): for index , callback in enumerate ( callbacks ): self . loop . create_task ( callback ( * payload )) callbacks . pop ( index ) return for future , check in futures : if check ( * payload ): future . set_result ( * payload ) futures . remove (( future , check )) break if events is not None : for callback in events . values (): self . loop . create_task ( callback ( * payload )) parse_ready ( self , data ) async Parses the READY event. Creates a User then dispatches it afterwards. Parameters: Name Type Description Default data Dict The raw data. required Source code in lefi/state.py async def parse_ready ( self , data : Dict ) -> None : \"\"\" Parses the `READY` event. Creates a User then dispatches it afterwards. Parameters: data (Dict): The raw data. \"\"\" user = self . add_user ( data [ \"user\" ]) self . client . user = user if shard := data . get ( \"shard\" ): logger . info ( f \"CONNECTED: SHARD ID: { shard [ 0 ] } \" ) else : logger . info ( f \"CONNECTED: CLIENT ID: { user . id } \" ) self . dispatch ( \"ready\" , user ) parse_guild_create ( self , data ) async Parses GUILD_CREATE event. Creates a Guild then caches it, as well as dispatching it afterwards. Parameters: Name Type Description Default data Dict The raw data. required Source code in lefi/state.py async def parse_guild_create ( self , data : Dict ) -> None : \"\"\" Parses `GUILD_CREATE` event. Creates a Guild then caches it, as well as dispatching it afterwards. Parameters: data (Dict): The raw data. \"\"\" guild = Guild ( self , data ) self . create_guild_channels ( guild , data ) self . create_guild_roles ( guild , data ) self . create_guild_members ( guild , data ) self . create_guild_voice_states ( guild , data ) self . _guilds [ guild . id ] = guild self . dispatch ( \"guild_create\" , guild ) parse_guild_update ( self , data ) async Parses GUILD_UPDATE event. Updates a Guild then dispatches it afterwards. Parameters: Name Type Description Default data Dict The raw data. required Source code in lefi/state.py async def parse_guild_update ( self , data : Dict ) -> None : \"\"\" Parses `GUILD_UPDATE` event. Updates a Guild then dispatches it afterwards. Parameters: data (Dict): The raw data. \"\"\" guild = self . get_guild ( int ( data [ \"id\" ])) if not guild : return before , after = self . update_guild ( guild , data ) self . dispatch ( \"guild_update\" , before , after ) parse_guild_delete ( self , data ) async Parses GUILD_DELETE event. Deletes a Guild then dispatches it afterwards. Parameters: Name Type Description Default data Dict The raw data. required Source code in lefi/state.py async def parse_guild_delete ( self , data : Dict ) -> None : \"\"\" Parses `GUILD_DELETE` event. Deletes a Guild then dispatches it afterwards. Parameters: data (Dict): The raw data. \"\"\" guild = self . get_guild ( int ( data [ \"id\" ])) if not guild : return self . dispatch ( \"guild_delete\" , guild ) self . _guilds . pop ( guild . id ) parse_message_create ( self , data ) async Parses MESSAGE_CREATE event. Creates a Message then caches it, as well as dispatching it afterwards. Parameters: Name Type Description Default data Dict The raw data. required Source code in lefi/state.py async def parse_message_create ( self , data : Dict ) -> None : \"\"\" Parses `MESSAGE_CREATE` event. Creates a Message then caches it, as well as dispatching it afterwards. Parameters: data (Dict): The raw data. \"\"\" self . add_user ( data [ \"author\" ]) channel = self . _channels . get ( int ( data [ \"channel_id\" ])) message = Message ( self , data , channel ) # type: ignore self . _messages [ message . id ] = message self . dispatch ( \"message_create\" , message ) parse_message_delete ( self , data ) async Parses MESSAGE_DELETE event. Retrieves the message from cache if possible. Else it dispatches a DeletedMessage . Parameters: Name Type Description Default data Dict The raw data. required Source code in lefi/state.py async def parse_message_delete ( self , data : Dict ) -> None : \"\"\" Parses `MESSAGE_DELETE` event. Retrieves the message from cache if possible. Else it dispatches a `DeletedMessage`. Parameters: data (Dict): The raw data. \"\"\" deleted = DeletedMessage ( data ) message = self . _messages . get ( deleted . id ) if message : self . _messages . pop ( message . id ) else : message = deleted # type: ignore self . dispatch ( \"message_delete\" , message ) parse_message_update ( self , data ) async Parses MESSAGE_UPDATE event. Dispatches before and after . Parameters: Name Type Description Default data Dict The raw data. required Source code in lefi/state.py async def parse_message_update ( self , data : Dict ) -> None : \"\"\" Parses `MESSAGE_UPDATE` event. Dispatches `before` and `after`. Parameters: data (Dict): The raw data. \"\"\" channel = self . get_channel ( int ( data [ \"channel_id\" ])) if not channel : return after = self . create_message ( data , channel ) if not ( before := self . get_message ( after . id )): msg = await self . http . get_channel_message ( channel . id , after . id ) # type: ignore before = self . create_message ( msg , channel ) else : self . _messages . pop ( before . id ) self . _messages [ after . id ] = after self . dispatch ( \"message_update\" , before , after ) parse_channel_create ( self , data ) async Parses CHANNEL_CREATE event. Creates a Channel then caches it, as well as dispatching it afterwards. Parameters: Name Type Description Default data Dict The raw data. required Source code in lefi/state.py async def parse_channel_create ( self , data : Dict ) -> None : \"\"\" Parses `CHANNEL_CREATE` event. Creates a Channel then caches it, as well as dispatching it afterwards. Parameters: data (Dict): The raw data. \"\"\" if guild_id := data . get ( \"guild_id\" ): guild = self . get_guild ( int ( guild_id )) channel = self . create_channel ( data , guild ) else : channel = self . create_channel ( data ) self . _channels [ channel . id ] = channel self . dispatch ( \"channel_create\" , channel ) parse_channel_update ( self , data ) async Parses CHANNEL_UPDATE event. Dispatches before and after . Parameters: Name Type Description Default data Dict The raw data. required Source code in lefi/state.py async def parse_channel_update ( self , data : Dict ) -> None : \"\"\" Parses `CHANNEL_UPDATE` event. Dispatches `before` and `after`. Parameters: data (Dict): The raw data. \"\"\" channel = self . get_channel ( int ( data [ \"id\" ])) if not channel : return before , after = self . update_channel ( channel , data ) # type: ignore self . dispatch ( \"channel_update\" , before , after ) parse_channel_delete ( self , data ) async Parses CHANNEL_DELETE event. Dispatches the deleted channel. Parameters: Name Type Description Default data Dict The raw data. required Source code in lefi/state.py async def parse_channel_delete ( self , data : Dict ) -> None : \"\"\" Parses `CHANNEL_DELETE` event. Dispatches the deleted channel. Parameters: data (Dict): The raw data. \"\"\" channel = self . get_channel ( int ( data [ \"id\" ])) self . _channels . pop ( channel . id ) # type: ignore self . dispatch ( \"channel_delete\" , channel ) parse_voice_state_update ( self , data ) async Parses VOICE_STATE_UPDATE event. Creates a VoiceState then caches it, as well as dispatching it afterwards. Parameters: Name Type Description Default data Dict The raw data. required Source code in lefi/state.py async def parse_voice_state_update ( self , data : Dict ) -> None : \"\"\" Parses `VOICE_STATE_UPDATE` event. Creates a VoiceState then caches it, as well as dispatching it afterwards. Parameters: data (Dict): The raw data. \"\"\" after = VoiceState ( self , data ) if after . guild : if after . user_id == self . client . user . id : voice = self . get_voice_client ( after . guild . id ) if voice : await voice . voice_state_update ( data ) before = after . guild . get_voice_state ( after . user_id ) if not before : after . guild . _voice_states [ after . user_id ] = after else : if not after . channel : after . guild . _voice_states . pop ( after . user_id ) else : before . _data = after . _data self . dispatch ( \"voice_state_update\" , before , after ) parse_thread_create ( self , data ) async Parses THREAD_CREATE event. Creates a Thread then caches it, as well as dispatching it afterwards. Parameters: Name Type Description Default data Dict The raw data. required Source code in lefi/state.py async def parse_thread_create ( self , data : Dict ) -> None : \"\"\" Parses `THREAD_CREATE` event. Creates a Thread then caches it, as well as dispatching it afterwards. Parameters: data (Dict): The raw data. \"\"\" guild_id = int ( data [ \"guild_id\" ]) guild = self . get_guild ( guild_id ) if not guild : return thread = Thread ( self , guild , data ) guild . _threads [ thread . id ] = thread self . dispatch ( \"thread_create\" , thread ) parse_thread_update ( self , data ) async Parses THREAD_UPDATE event. Dispatches before and after . Parameters: Name Type Description Default data Dict The raw data. required Source code in lefi/state.py async def parse_thread_update ( self , data : Dict ) -> None : \"\"\" Parses `THREAD_UPDATE` event. Dispatches `before` and `after`. Parameters: data (Dict): The raw data. \"\"\" guild_id = int ( data [ \"guild_id\" ]) guild = self . get_guild ( guild_id ) if not guild : return thread_id = int ( data [ \"id\" ]) thread = guild . get_thread ( thread_id ) if not thread : return before , after = self . update_thread ( thread , data ) self . dispatch ( \"thread_update\" , before , after ) parse_thread_delete ( self , data ) async Parses THREAD_DELETE event. Dispatches the deleted thread. Parameters: Name Type Description Default data Dict The raw data. required Source code in lefi/state.py async def parse_thread_delete ( self , data : Dict ) -> None : \"\"\" Parses `THREAD_DELETE` event. Dispatches the deleted thread. Parameters: data (Dict): The raw data. \"\"\" guild_id = int ( data [ \"guild_id\" ]) guild = self . get_guild ( guild_id ) if not guild : return thread_id = int ( data [ \"id\" ]) thread = guild . get_thread ( thread_id ) if not thread : return guild . _threads . pop ( thread . id ) self . dispatch ( \"thread_delete\" , thread ) parse_thread_list_sync ( self , data ) async Parses THREAD_LIST_SYNC event. Dispatches the created threads under THREAD_CREATE and the removed ones under THREAD_DELETE . Parameters: Name Type Description Default data Dict The raw data. required Source code in lefi/state.py async def parse_thread_list_sync ( self , data : Dict ) -> None : \"\"\" Parses `THREAD_LIST_SYNC` event. Dispatches the created threads under `THREAD_CREATE` and the removed ones under `THREAD_DELETE`. Parameters: data (Dict): The raw data. \"\"\" guild = self . get_guild ( int ( data [ \"guild_id\" ])) if not guild : return channel_ids = data . get ( \"channel_ids\" ) if not channel_ids : previous = guild . _threads . copy () guild . _threads . clear () else : previous = { t . id : t for t in guild . _threads . values () if t . parent_id in channel_ids } for thread_id in previous : del guild . _threads [ thread_id ] threads = { int ( d [ \"id\" ]): Thread ( self , guild , d ) for d in data . get ( \"threads\" , []) } guild . _threads . update ( threads ) for member in data . get ( \"members\" , []): thread = threads . get ( int ( member [ \"id\" ])) if thread : thread . _create_member ( member ) for thread in threads . values (): self . dispatch ( \"thread_create\" , thread ) for thread in previous . values (): self . dispatch ( \"thread_delete\" , thread ) parse_thread_members_update ( self , data ) async Parses THREAD_MEMBERS_UPDATE event. Dispatches the added thread members under thread_member_add and the removed ones under thread_member_remove . Parameters: Name Type Description Default data Dict The raw data. required Source code in lefi/state.py async def parse_thread_members_update ( self , data : Dict ) -> None : \"\"\" Parses `THREAD_MEMBERS_UPDATE` event. Dispatches the added thread members under `thread_member_add` and the removed ones under `thread_member_remove`. Parameters: data (Dict): The raw data. \"\"\" guild = self . get_guild ( int ( data [ \"guild_id\" ])) if not guild : return thread = guild . get_thread ( int ( data [ \"id\" ])) if not thread : return new : List [ ThreadMember ] = [ ThreadMember ( self , m , thread ) for m in data . get ( \"added_members\" , []) ] removed : List [ int ] = [ int ( id ) for id in data . get ( \"removed_member_ids\" , [])] for member in new : thread . _members [ member . id ] = member self . dispatch ( \"thread_member_add\" , member ) for member_id in removed : member = thread . _members . pop ( member_id , None ) # type: ignore if member : self . dispatch ( \"thread_member_remove\" , member ) get_message ( self , message_id ) Grabs a message from the cache. Parameters: Name Type Description Default message_id int The ID of the message. required Returns: Type Description Optional[Message] The lefi.Message insance corresponding to the ID if found. Source code in lefi/state.py def get_message ( self , message_id : int ) -> Optional [ Message ]: \"\"\" Grabs a message from the cache. Parameters: message_id (int): The ID of the message. Returns: The [lefi.Message](./message.md) insance corresponding to the ID if found. \"\"\" return self . _messages . get ( message_id ) get_user ( self , user_id ) Grabs a user from the cache. Parameters: Name Type Description Default user_id int The ID of the user. required Returns: Type Description Optional[User] The lefi.User instance corresponding to the ID if found. Source code in lefi/state.py def get_user ( self , user_id : int ) -> Optional [ User ]: \"\"\" Grabs a user from the cache. Parameters: user_id (int): The ID of the user. Returns: The [lefi.User](./user.md) instance corresponding to the ID if found. \"\"\" return self . _users . get ( user_id ) add_user ( self , data ) Creates a user then caches it. Parameters: Name Type Description Default data Dict The data of the user. required Returns: Type Description User The created lefi.User instance. Source code in lefi/state.py def add_user ( self , data : Dict ) -> User : \"\"\" Creates a user then caches it. Parameters: data (Dict): The data of the user. Returns: The created [lefi.User](./user.md) instance. \"\"\" user = User ( self , data ) self . _users [ user . id ] = user return user get_guild ( self , guild_id ) Grabs a guild from the cache. Parameters: Name Type Description Default guild_id int The ID of the guild. required Returns: Type Description Optional[Guild] The lefi.Guild instance corresponding to the ID if found. Source code in lefi/state.py def get_guild ( self , guild_id : int ) -> Optional [ Guild ]: \"\"\" Grabs a guild from the cache. Parameters: guild_id (int): The ID of the guild. Returns: The [lefi.Guild](./guild.md) instance corresponding to the ID if found. \"\"\" return self . _guilds . get ( guild_id ) get_channel ( self , channel_id ) Grabs a channel from the cache. Parameters: Name Type Description Default channel_id int The ID of the channel. required Returns: Type Description Optional[Union[TextChannel, DMChannel, VoiceChannel, CategoryChannel, Channel]] The lefi.Channel instance corresponding to the ID if found. Source code in lefi/state.py def get_channel ( self , channel_id : int ) -> Optional [ Union [ TextChannel , DMChannel , VoiceChannel , CategoryChannel , Channel ] ]: \"\"\" Grabs a channel from the cache. Parameters: channel_id (int): The ID of the channel. Returns: The [lefi.Channel][] instance corresponding to the ID if found. \"\"\" return self . _channels . get ( channel_id ) get_emoji ( self , emoji_id ) Grabs an emoji from the cache. Parameters: Name Type Description Default emoji_id int The ID of the emoji. required Returns: Type Description Optional[Emoji] The lefi.Emoji instance corresponding to the ID if found. Source code in lefi/state.py def get_emoji ( self , emoji_id : int ) -> Optional [ Emoji ]: \"\"\" Grabs an emoji from the cache. Parameters: emoji_id (int): The ID of the emoji. Returns: The [lefi.Emoji](./emoji.md) instance corresponding to the ID if found. \"\"\" return self . _emojis . get ( emoji_id ) create_message ( self , data , channel ) Creates a Message instance. Parameters: Name Type Description Default data Dict The data of the message. required channel Any The Channel of the message. required Returns: Type Description Message The created lefi.Message instance. Source code in lefi/state.py def create_message ( self , data : Dict , channel : Any ) -> Message : \"\"\" Creates a Message instance. Parameters: data (Dict): The data of the message. channel (Any): The [Channel](./channel.md) of the message. Returns: The created [lefi.Message](./message.md) instance. \"\"\" return Message ( self , data , channel ) create_channel ( self , data , * args ) Creates a Channel instance. Parameters: Name Type Description Default data Dict The data of the channel. required *args Any Extra arguments to pass to the channels constructor. () Returns: Type Description Union[TextChannel, VoiceChannel, CategoryChannel, Channel] The created lefi.Channel instance. Source code in lefi/state.py def create_channel ( self , data : Dict , * args ) -> Union [ TextChannel , VoiceChannel , CategoryChannel , Channel ]: \"\"\" Creates a Channel instance. Parameters: data (Dict): The data of the channel. *args (Any): Extra arguments to pass to the channels constructor. Returns: The created [lefi.Channel](./channel.md) instance. \"\"\" cls = self . CHANNEL_MAPPING . get ( int ( data [ \"type\" ]), Channel ) channel = cls ( self , data , * args ) self . create_overwrites ( channel ) return channel # type: ignore create_guild_channels ( self , guild , data ) Creates the channels of a guild. Parameters: Name Type Description Default guild lefi.Guild The Guild which to create the channels for. required data Dict The data of the channels. required Returns: Type Description Guild The lefi.Guild instance passed in. Source code in lefi/state.py def create_guild_channels ( self , guild : Guild , data : Dict ) -> Guild : \"\"\" Creates the channels of a guild. Parameters: guild (lefi.Guild): The [Guild](./guild.md) which to create the channels for. data (Dict): The data of the channels. Returns: The [lefi.Guild](./guild.md) instance passed in. \"\"\" if \"channels\" not in data : return guild channels = { int ( payload [ \"id\" ]): self . create_channel ( payload , guild ) for payload in data [ \"channels\" ] } for id , channel in channels . items (): self . _channels [ id ] = channel guild . _channels = channels return guild create_guild_members ( self , guild , data ) Creates the members of a guild. Parameters: Name Type Description Default guild lefi.Guild The Guild which to create the channels for. required data Dict The data of the members. required Returns: Type Description Guild The lefi.Guild instance passed in. Source code in lefi/state.py def create_guild_members ( self , guild : Guild , data : Dict ) -> Guild : \"\"\" Creates the members of a guild. Parameters: guild (lefi.Guild): The [Guild](./guild.md) which to create the channels for. data (Dict): The data of the members. Returns: The [lefi.Guild](./guild.md) instance passed in. \"\"\" if \"members\" not in data : return guild members : Dict [ int , Member ] = {} for member_data in data [ \"members\" ]: member = self . create_member ( member_data , guild ) members [ member . id ] = member guild . _members = members return guild create_guild_roles ( self , guild , data ) Creates the roles of a guild. Parameters: Name Type Description Default guild lefi.Guild The Guild which to create the channels for. required data Dict The data of the roles. required Returns: Type Description Guild The lefi.Guild instance passed in. Source code in lefi/state.py def create_guild_roles ( self , guild : Guild , data : Dict ) -> Guild : \"\"\" Creates the roles of a guild. Parameters: guild (lefi.Guild): The [Guild](./guild.md) which to create the channels for. data (Dict): The data of the roles. Returns: The [lefi.Guild][] instance passed in. \"\"\" if \"roles\" not in data : return guild roles = { int ( payload [ \"id\" ]): Role ( self , payload , guild ) for payload in data [ \"roles\" ] } guild . _roles = roles return guild create_guild_emojis ( self , guild , data ) Creates the emojis of a guild. Parameters: Name Type Description Default guild lefi.Guild The Guild which to create the emojis for. required data Dict The data of the emojis. required Returns: Type Description Guild The lefi.Guild instance passed in. Source code in lefi/state.py def create_guild_emojis ( self , guild : Guild , data : Dict ) -> Guild : \"\"\" Creates the emojis of a guild. Parameters: guild (lefi.Guild): The [Guild](./guild.md) which to create the emojis for. data (Dict): The data of the emojis. Returns: The [lefi.Guild][] instance passed in. \"\"\" if \"emojis\" not in data : return guild emojis = { int ( payload [ \"id\" ]): Emoji ( self , payload , guild ) for payload in data [ \"emojis\" ] } for id , emoji in emojis . items (): self . _emojis [ id ] = emoji guild . _emojis = emojis return guild create_guild_voice_states ( self , guild , data ) Creates the voice states of a guild. Parameters: Name Type Description Default guild lefi.Guild The guild which to create the voice states for. required data Dict The data of the voice states. required Returns: Type Description Guild The lefi.Guild instance passed in. Source code in lefi/state.py def create_guild_voice_states ( self , guild : Guild , data : Dict ) -> Guild : \"\"\" Creates the voice states of a guild. Parameters: guild (lefi.Guild): The guild which to create the voice states for. data (Dict): The data of the voice states. Returns: The [lefi.Guild][] instance passed in. \"\"\" voice_states = { int ( payload [ \"user_id\" ]): VoiceState ( self , payload ) for payload in data [ \"voice_states\" ] } guild . _voice_states = voice_states return guild create_overwrites ( self , channel ) Creates the overwrites of a channel. Parameters: Name Type Description Default channel lefi.Channel The Channel which to create the overwrites for. required Source code in lefi/state.py def create_overwrites ( self , channel : Union [ TextChannel , DMChannel , VoiceChannel , CategoryChannel , Channel ], ) -> None : \"\"\" Creates the overwrites of a channel. Parameters: channel (lefi.Channel): The [Channel](./channel.md) which to create the overwrites for. \"\"\" if isinstance ( channel , DMChannel ): return if \"permission_overwrites\" not in channel . _data : return overwrites = [ Overwrite ( data ) for data in channel . _data [ \"permission_overwrites\" ] ] ows : Dict [ Union [ Member , Role ], Overwrite ] = {} for overwrite in overwrites : if overwrite . type is OverwriteType . MEMBER : target = channel . guild . get_member ( overwrite . id ) else : target = channel . guild . get_role ( overwrite . id ) # type: ignore ows [ target ] = overwrite # type: ignore channel . _overwrites = ows add_voice_client ( self , guild_id , voice_client ) Adds a voice client to the cache. Parameters: Name Type Description Default guild_id int The ID of the guild. required voice_client lefi.VoiceClient The voice client to add. required Source code in lefi/state.py def add_voice_client ( self , guild_id : int , voice_client : VoiceClient ) -> None : \"\"\" Adds a voice client to the cache. Parameters: guild_id (int): The ID of the guild. voice_client (lefi.VoiceClient): The voice client to add. \"\"\" self . _voice_clients [ guild_id ] = voice_client get_voice_client ( self , guild_id ) Grabs a voice client from the cache. Parameters: Name Type Description Default guild_id int The ID of the guild. required Returns: Type Description Optional[VoiceClient] The lefi.VoiceClient instance corresponding to the ID if found. Source code in lefi/state.py def get_voice_client ( self , guild_id : int ) -> Optional [ VoiceClient ]: \"\"\" Grabs a voice client from the cache. Parameters: guild_id (int): The ID of the guild. Returns: The [lefi.VoiceClient][] instance corresponding to the ID if found. \"\"\" return self . _voice_clients . get ( guild_id ) remove_voice_client ( self , guild_id ) Removes a voice client from the cache. Parameters: Name Type Description Default guild_id int The ID of the guild. required Source code in lefi/state.py def remove_voice_client ( self , guild_id : int ) -> None : \"\"\" Removes a voice client from the cache. Parameters: guild_id (int): The ID of the guild. \"\"\" self . _voice_clients . pop ( guild_id , None )","title":"State"},{"location":"API-Reference/state/#lefi.state.State.__init__","text":"Parameters: Name Type Description Default client lefi.Client The Client being used. required loop asyncio.AbstractEventLoop The asyncio.AbstractEventLoop being used. required Source code in lefi/state.py def __init__ ( self , client : Client , loop : asyncio . AbstractEventLoop ) -> None : \"\"\" Parameters: client (lefi.Client): The [Client](./client.md) being used. loop (asyncio.AbstractEventLoop): The asyncio.AbstractEventLoop being used. \"\"\" self . client = client self . loop = loop self . http = client . http self . _messages = Cache [ Message ]( 1000 ) self . _users = Cache [ User ]() self . _guilds = Cache [ Guild ]() self . _emojis = Cache [ Emoji ]() self . _components = Cache [ Tuple [ Callable , Component ]]() self . _channels = Cache [ Union [ TextChannel , DMChannel , VoiceChannel , CategoryChannel , Channel ] ]() self . _emojis = Cache [ Emoji ]() self . _voice_clients = Cache [ VoiceClient ]()","title":"__init__()"},{"location":"API-Reference/state/#lefi.state.State.dispatch","text":"Dispatches data to callbacks registered to events after parsing is finished. Parameters: Name Type Description Default event str The name of the event to dispatch to. required *payload Any The data after parsing is finished. () Source code in lefi/state.py def dispatch ( self , event : str , * payload : Any ) -> None : \"\"\" Dispatches data to callbacks registered to events after parsing is finished. Parameters: event (str): The name of the event to dispatch to. *payload (Any): The data after parsing is finished. \"\"\" events : Optional [ dict ] = self . client . events . get ( event ) futures = self . client . futures . get ( event , []) if callbacks := self . client . once_events . get ( event ): for index , callback in enumerate ( callbacks ): self . loop . create_task ( callback ( * payload )) callbacks . pop ( index ) return for future , check in futures : if check ( * payload ): future . set_result ( * payload ) futures . remove (( future , check )) break if events is not None : for callback in events . values (): self . loop . create_task ( callback ( * payload ))","title":"dispatch()"},{"location":"API-Reference/state/#lefi.state.State.parse_ready","text":"Parses the READY event. Creates a User then dispatches it afterwards. Parameters: Name Type Description Default data Dict The raw data. required Source code in lefi/state.py async def parse_ready ( self , data : Dict ) -> None : \"\"\" Parses the `READY` event. Creates a User then dispatches it afterwards. Parameters: data (Dict): The raw data. \"\"\" user = self . add_user ( data [ \"user\" ]) self . client . user = user if shard := data . get ( \"shard\" ): logger . info ( f \"CONNECTED: SHARD ID: { shard [ 0 ] } \" ) else : logger . info ( f \"CONNECTED: CLIENT ID: { user . id } \" ) self . dispatch ( \"ready\" , user )","title":"parse_ready()"},{"location":"API-Reference/state/#lefi.state.State.parse_guild_create","text":"Parses GUILD_CREATE event. Creates a Guild then caches it, as well as dispatching it afterwards. Parameters: Name Type Description Default data Dict The raw data. required Source code in lefi/state.py async def parse_guild_create ( self , data : Dict ) -> None : \"\"\" Parses `GUILD_CREATE` event. Creates a Guild then caches it, as well as dispatching it afterwards. Parameters: data (Dict): The raw data. \"\"\" guild = Guild ( self , data ) self . create_guild_channels ( guild , data ) self . create_guild_roles ( guild , data ) self . create_guild_members ( guild , data ) self . create_guild_voice_states ( guild , data ) self . _guilds [ guild . id ] = guild self . dispatch ( \"guild_create\" , guild )","title":"parse_guild_create()"},{"location":"API-Reference/state/#lefi.state.State.parse_guild_update","text":"Parses GUILD_UPDATE event. Updates a Guild then dispatches it afterwards. Parameters: Name Type Description Default data Dict The raw data. required Source code in lefi/state.py async def parse_guild_update ( self , data : Dict ) -> None : \"\"\" Parses `GUILD_UPDATE` event. Updates a Guild then dispatches it afterwards. Parameters: data (Dict): The raw data. \"\"\" guild = self . get_guild ( int ( data [ \"id\" ])) if not guild : return before , after = self . update_guild ( guild , data ) self . dispatch ( \"guild_update\" , before , after )","title":"parse_guild_update()"},{"location":"API-Reference/state/#lefi.state.State.parse_guild_delete","text":"Parses GUILD_DELETE event. Deletes a Guild then dispatches it afterwards. Parameters: Name Type Description Default data Dict The raw data. required Source code in lefi/state.py async def parse_guild_delete ( self , data : Dict ) -> None : \"\"\" Parses `GUILD_DELETE` event. Deletes a Guild then dispatches it afterwards. Parameters: data (Dict): The raw data. \"\"\" guild = self . get_guild ( int ( data [ \"id\" ])) if not guild : return self . dispatch ( \"guild_delete\" , guild ) self . _guilds . pop ( guild . id )","title":"parse_guild_delete()"},{"location":"API-Reference/state/#lefi.state.State.parse_message_create","text":"Parses MESSAGE_CREATE event. Creates a Message then caches it, as well as dispatching it afterwards. Parameters: Name Type Description Default data Dict The raw data. required Source code in lefi/state.py async def parse_message_create ( self , data : Dict ) -> None : \"\"\" Parses `MESSAGE_CREATE` event. Creates a Message then caches it, as well as dispatching it afterwards. Parameters: data (Dict): The raw data. \"\"\" self . add_user ( data [ \"author\" ]) channel = self . _channels . get ( int ( data [ \"channel_id\" ])) message = Message ( self , data , channel ) # type: ignore self . _messages [ message . id ] = message self . dispatch ( \"message_create\" , message )","title":"parse_message_create()"},{"location":"API-Reference/state/#lefi.state.State.parse_message_delete","text":"Parses MESSAGE_DELETE event. Retrieves the message from cache if possible. Else it dispatches a DeletedMessage . Parameters: Name Type Description Default data Dict The raw data. required Source code in lefi/state.py async def parse_message_delete ( self , data : Dict ) -> None : \"\"\" Parses `MESSAGE_DELETE` event. Retrieves the message from cache if possible. Else it dispatches a `DeletedMessage`. Parameters: data (Dict): The raw data. \"\"\" deleted = DeletedMessage ( data ) message = self . _messages . get ( deleted . id ) if message : self . _messages . pop ( message . id ) else : message = deleted # type: ignore self . dispatch ( \"message_delete\" , message )","title":"parse_message_delete()"},{"location":"API-Reference/state/#lefi.state.State.parse_message_update","text":"Parses MESSAGE_UPDATE event. Dispatches before and after . Parameters: Name Type Description Default data Dict The raw data. required Source code in lefi/state.py async def parse_message_update ( self , data : Dict ) -> None : \"\"\" Parses `MESSAGE_UPDATE` event. Dispatches `before` and `after`. Parameters: data (Dict): The raw data. \"\"\" channel = self . get_channel ( int ( data [ \"channel_id\" ])) if not channel : return after = self . create_message ( data , channel ) if not ( before := self . get_message ( after . id )): msg = await self . http . get_channel_message ( channel . id , after . id ) # type: ignore before = self . create_message ( msg , channel ) else : self . _messages . pop ( before . id ) self . _messages [ after . id ] = after self . dispatch ( \"message_update\" , before , after )","title":"parse_message_update()"},{"location":"API-Reference/state/#lefi.state.State.parse_channel_create","text":"Parses CHANNEL_CREATE event. Creates a Channel then caches it, as well as dispatching it afterwards. Parameters: Name Type Description Default data Dict The raw data. required Source code in lefi/state.py async def parse_channel_create ( self , data : Dict ) -> None : \"\"\" Parses `CHANNEL_CREATE` event. Creates a Channel then caches it, as well as dispatching it afterwards. Parameters: data (Dict): The raw data. \"\"\" if guild_id := data . get ( \"guild_id\" ): guild = self . get_guild ( int ( guild_id )) channel = self . create_channel ( data , guild ) else : channel = self . create_channel ( data ) self . _channels [ channel . id ] = channel self . dispatch ( \"channel_create\" , channel )","title":"parse_channel_create()"},{"location":"API-Reference/state/#lefi.state.State.parse_channel_update","text":"Parses CHANNEL_UPDATE event. Dispatches before and after . Parameters: Name Type Description Default data Dict The raw data. required Source code in lefi/state.py async def parse_channel_update ( self , data : Dict ) -> None : \"\"\" Parses `CHANNEL_UPDATE` event. Dispatches `before` and `after`. Parameters: data (Dict): The raw data. \"\"\" channel = self . get_channel ( int ( data [ \"id\" ])) if not channel : return before , after = self . update_channel ( channel , data ) # type: ignore self . dispatch ( \"channel_update\" , before , after )","title":"parse_channel_update()"},{"location":"API-Reference/state/#lefi.state.State.parse_channel_delete","text":"Parses CHANNEL_DELETE event. Dispatches the deleted channel. Parameters: Name Type Description Default data Dict The raw data. required Source code in lefi/state.py async def parse_channel_delete ( self , data : Dict ) -> None : \"\"\" Parses `CHANNEL_DELETE` event. Dispatches the deleted channel. Parameters: data (Dict): The raw data. \"\"\" channel = self . get_channel ( int ( data [ \"id\" ])) self . _channels . pop ( channel . id ) # type: ignore self . dispatch ( \"channel_delete\" , channel )","title":"parse_channel_delete()"},{"location":"API-Reference/state/#lefi.state.State.parse_voice_state_update","text":"Parses VOICE_STATE_UPDATE event. Creates a VoiceState then caches it, as well as dispatching it afterwards. Parameters: Name Type Description Default data Dict The raw data. required Source code in lefi/state.py async def parse_voice_state_update ( self , data : Dict ) -> None : \"\"\" Parses `VOICE_STATE_UPDATE` event. Creates a VoiceState then caches it, as well as dispatching it afterwards. Parameters: data (Dict): The raw data. \"\"\" after = VoiceState ( self , data ) if after . guild : if after . user_id == self . client . user . id : voice = self . get_voice_client ( after . guild . id ) if voice : await voice . voice_state_update ( data ) before = after . guild . get_voice_state ( after . user_id ) if not before : after . guild . _voice_states [ after . user_id ] = after else : if not after . channel : after . guild . _voice_states . pop ( after . user_id ) else : before . _data = after . _data self . dispatch ( \"voice_state_update\" , before , after )","title":"parse_voice_state_update()"},{"location":"API-Reference/state/#lefi.state.State.parse_thread_create","text":"Parses THREAD_CREATE event. Creates a Thread then caches it, as well as dispatching it afterwards. Parameters: Name Type Description Default data Dict The raw data. required Source code in lefi/state.py async def parse_thread_create ( self , data : Dict ) -> None : \"\"\" Parses `THREAD_CREATE` event. Creates a Thread then caches it, as well as dispatching it afterwards. Parameters: data (Dict): The raw data. \"\"\" guild_id = int ( data [ \"guild_id\" ]) guild = self . get_guild ( guild_id ) if not guild : return thread = Thread ( self , guild , data ) guild . _threads [ thread . id ] = thread self . dispatch ( \"thread_create\" , thread )","title":"parse_thread_create()"},{"location":"API-Reference/state/#lefi.state.State.parse_thread_update","text":"Parses THREAD_UPDATE event. Dispatches before and after . Parameters: Name Type Description Default data Dict The raw data. required Source code in lefi/state.py async def parse_thread_update ( self , data : Dict ) -> None : \"\"\" Parses `THREAD_UPDATE` event. Dispatches `before` and `after`. Parameters: data (Dict): The raw data. \"\"\" guild_id = int ( data [ \"guild_id\" ]) guild = self . get_guild ( guild_id ) if not guild : return thread_id = int ( data [ \"id\" ]) thread = guild . get_thread ( thread_id ) if not thread : return before , after = self . update_thread ( thread , data ) self . dispatch ( \"thread_update\" , before , after )","title":"parse_thread_update()"},{"location":"API-Reference/state/#lefi.state.State.parse_thread_delete","text":"Parses THREAD_DELETE event. Dispatches the deleted thread. Parameters: Name Type Description Default data Dict The raw data. required Source code in lefi/state.py async def parse_thread_delete ( self , data : Dict ) -> None : \"\"\" Parses `THREAD_DELETE` event. Dispatches the deleted thread. Parameters: data (Dict): The raw data. \"\"\" guild_id = int ( data [ \"guild_id\" ]) guild = self . get_guild ( guild_id ) if not guild : return thread_id = int ( data [ \"id\" ]) thread = guild . get_thread ( thread_id ) if not thread : return guild . _threads . pop ( thread . id ) self . dispatch ( \"thread_delete\" , thread )","title":"parse_thread_delete()"},{"location":"API-Reference/state/#lefi.state.State.parse_thread_list_sync","text":"Parses THREAD_LIST_SYNC event. Dispatches the created threads under THREAD_CREATE and the removed ones under THREAD_DELETE . Parameters: Name Type Description Default data Dict The raw data. required Source code in lefi/state.py async def parse_thread_list_sync ( self , data : Dict ) -> None : \"\"\" Parses `THREAD_LIST_SYNC` event. Dispatches the created threads under `THREAD_CREATE` and the removed ones under `THREAD_DELETE`. Parameters: data (Dict): The raw data. \"\"\" guild = self . get_guild ( int ( data [ \"guild_id\" ])) if not guild : return channel_ids = data . get ( \"channel_ids\" ) if not channel_ids : previous = guild . _threads . copy () guild . _threads . clear () else : previous = { t . id : t for t in guild . _threads . values () if t . parent_id in channel_ids } for thread_id in previous : del guild . _threads [ thread_id ] threads = { int ( d [ \"id\" ]): Thread ( self , guild , d ) for d in data . get ( \"threads\" , []) } guild . _threads . update ( threads ) for member in data . get ( \"members\" , []): thread = threads . get ( int ( member [ \"id\" ])) if thread : thread . _create_member ( member ) for thread in threads . values (): self . dispatch ( \"thread_create\" , thread ) for thread in previous . values (): self . dispatch ( \"thread_delete\" , thread )","title":"parse_thread_list_sync()"},{"location":"API-Reference/state/#lefi.state.State.parse_thread_members_update","text":"Parses THREAD_MEMBERS_UPDATE event. Dispatches the added thread members under thread_member_add and the removed ones under thread_member_remove . Parameters: Name Type Description Default data Dict The raw data. required Source code in lefi/state.py async def parse_thread_members_update ( self , data : Dict ) -> None : \"\"\" Parses `THREAD_MEMBERS_UPDATE` event. Dispatches the added thread members under `thread_member_add` and the removed ones under `thread_member_remove`. Parameters: data (Dict): The raw data. \"\"\" guild = self . get_guild ( int ( data [ \"guild_id\" ])) if not guild : return thread = guild . get_thread ( int ( data [ \"id\" ])) if not thread : return new : List [ ThreadMember ] = [ ThreadMember ( self , m , thread ) for m in data . get ( \"added_members\" , []) ] removed : List [ int ] = [ int ( id ) for id in data . get ( \"removed_member_ids\" , [])] for member in new : thread . _members [ member . id ] = member self . dispatch ( \"thread_member_add\" , member ) for member_id in removed : member = thread . _members . pop ( member_id , None ) # type: ignore if member : self . dispatch ( \"thread_member_remove\" , member )","title":"parse_thread_members_update()"},{"location":"API-Reference/state/#lefi.state.State.get_message","text":"Grabs a message from the cache. Parameters: Name Type Description Default message_id int The ID of the message. required Returns: Type Description Optional[Message] The lefi.Message insance corresponding to the ID if found. Source code in lefi/state.py def get_message ( self , message_id : int ) -> Optional [ Message ]: \"\"\" Grabs a message from the cache. Parameters: message_id (int): The ID of the message. Returns: The [lefi.Message](./message.md) insance corresponding to the ID if found. \"\"\" return self . _messages . get ( message_id )","title":"get_message()"},{"location":"API-Reference/state/#lefi.state.State.get_user","text":"Grabs a user from the cache. Parameters: Name Type Description Default user_id int The ID of the user. required Returns: Type Description Optional[User] The lefi.User instance corresponding to the ID if found. Source code in lefi/state.py def get_user ( self , user_id : int ) -> Optional [ User ]: \"\"\" Grabs a user from the cache. Parameters: user_id (int): The ID of the user. Returns: The [lefi.User](./user.md) instance corresponding to the ID if found. \"\"\" return self . _users . get ( user_id )","title":"get_user()"},{"location":"API-Reference/state/#lefi.state.State.add_user","text":"Creates a user then caches it. Parameters: Name Type Description Default data Dict The data of the user. required Returns: Type Description User The created lefi.User instance. Source code in lefi/state.py def add_user ( self , data : Dict ) -> User : \"\"\" Creates a user then caches it. Parameters: data (Dict): The data of the user. Returns: The created [lefi.User](./user.md) instance. \"\"\" user = User ( self , data ) self . _users [ user . id ] = user return user","title":"add_user()"},{"location":"API-Reference/state/#lefi.state.State.get_guild","text":"Grabs a guild from the cache. Parameters: Name Type Description Default guild_id int The ID of the guild. required Returns: Type Description Optional[Guild] The lefi.Guild instance corresponding to the ID if found. Source code in lefi/state.py def get_guild ( self , guild_id : int ) -> Optional [ Guild ]: \"\"\" Grabs a guild from the cache. Parameters: guild_id (int): The ID of the guild. Returns: The [lefi.Guild](./guild.md) instance corresponding to the ID if found. \"\"\" return self . _guilds . get ( guild_id )","title":"get_guild()"},{"location":"API-Reference/state/#lefi.state.State.get_channel","text":"Grabs a channel from the cache. Parameters: Name Type Description Default channel_id int The ID of the channel. required Returns: Type Description Optional[Union[TextChannel, DMChannel, VoiceChannel, CategoryChannel, Channel]] The lefi.Channel instance corresponding to the ID if found. Source code in lefi/state.py def get_channel ( self , channel_id : int ) -> Optional [ Union [ TextChannel , DMChannel , VoiceChannel , CategoryChannel , Channel ] ]: \"\"\" Grabs a channel from the cache. Parameters: channel_id (int): The ID of the channel. Returns: The [lefi.Channel][] instance corresponding to the ID if found. \"\"\" return self . _channels . get ( channel_id )","title":"get_channel()"},{"location":"API-Reference/state/#lefi.state.State.get_emoji","text":"Grabs an emoji from the cache. Parameters: Name Type Description Default emoji_id int The ID of the emoji. required Returns: Type Description Optional[Emoji] The lefi.Emoji instance corresponding to the ID if found. Source code in lefi/state.py def get_emoji ( self , emoji_id : int ) -> Optional [ Emoji ]: \"\"\" Grabs an emoji from the cache. Parameters: emoji_id (int): The ID of the emoji. Returns: The [lefi.Emoji](./emoji.md) instance corresponding to the ID if found. \"\"\" return self . _emojis . get ( emoji_id )","title":"get_emoji()"},{"location":"API-Reference/state/#lefi.state.State.create_message","text":"Creates a Message instance. Parameters: Name Type Description Default data Dict The data of the message. required channel Any The Channel of the message. required Returns: Type Description Message The created lefi.Message instance. Source code in lefi/state.py def create_message ( self , data : Dict , channel : Any ) -> Message : \"\"\" Creates a Message instance. Parameters: data (Dict): The data of the message. channel (Any): The [Channel](./channel.md) of the message. Returns: The created [lefi.Message](./message.md) instance. \"\"\" return Message ( self , data , channel )","title":"create_message()"},{"location":"API-Reference/state/#lefi.state.State.create_channel","text":"Creates a Channel instance. Parameters: Name Type Description Default data Dict The data of the channel. required *args Any Extra arguments to pass to the channels constructor. () Returns: Type Description Union[TextChannel, VoiceChannel, CategoryChannel, Channel] The created lefi.Channel instance. Source code in lefi/state.py def create_channel ( self , data : Dict , * args ) -> Union [ TextChannel , VoiceChannel , CategoryChannel , Channel ]: \"\"\" Creates a Channel instance. Parameters: data (Dict): The data of the channel. *args (Any): Extra arguments to pass to the channels constructor. Returns: The created [lefi.Channel](./channel.md) instance. \"\"\" cls = self . CHANNEL_MAPPING . get ( int ( data [ \"type\" ]), Channel ) channel = cls ( self , data , * args ) self . create_overwrites ( channel ) return channel # type: ignore","title":"create_channel()"},{"location":"API-Reference/state/#lefi.state.State.create_guild_channels","text":"Creates the channels of a guild. Parameters: Name Type Description Default guild lefi.Guild The Guild which to create the channels for. required data Dict The data of the channels. required Returns: Type Description Guild The lefi.Guild instance passed in. Source code in lefi/state.py def create_guild_channels ( self , guild : Guild , data : Dict ) -> Guild : \"\"\" Creates the channels of a guild. Parameters: guild (lefi.Guild): The [Guild](./guild.md) which to create the channels for. data (Dict): The data of the channels. Returns: The [lefi.Guild](./guild.md) instance passed in. \"\"\" if \"channels\" not in data : return guild channels = { int ( payload [ \"id\" ]): self . create_channel ( payload , guild ) for payload in data [ \"channels\" ] } for id , channel in channels . items (): self . _channels [ id ] = channel guild . _channels = channels return guild","title":"create_guild_channels()"},{"location":"API-Reference/state/#lefi.state.State.create_guild_members","text":"Creates the members of a guild. Parameters: Name Type Description Default guild lefi.Guild The Guild which to create the channels for. required data Dict The data of the members. required Returns: Type Description Guild The lefi.Guild instance passed in. Source code in lefi/state.py def create_guild_members ( self , guild : Guild , data : Dict ) -> Guild : \"\"\" Creates the members of a guild. Parameters: guild (lefi.Guild): The [Guild](./guild.md) which to create the channels for. data (Dict): The data of the members. Returns: The [lefi.Guild](./guild.md) instance passed in. \"\"\" if \"members\" not in data : return guild members : Dict [ int , Member ] = {} for member_data in data [ \"members\" ]: member = self . create_member ( member_data , guild ) members [ member . id ] = member guild . _members = members return guild","title":"create_guild_members()"},{"location":"API-Reference/state/#lefi.state.State.create_guild_roles","text":"Creates the roles of a guild. Parameters: Name Type Description Default guild lefi.Guild The Guild which to create the channels for. required data Dict The data of the roles. required Returns: Type Description Guild The lefi.Guild instance passed in. Source code in lefi/state.py def create_guild_roles ( self , guild : Guild , data : Dict ) -> Guild : \"\"\" Creates the roles of a guild. Parameters: guild (lefi.Guild): The [Guild](./guild.md) which to create the channels for. data (Dict): The data of the roles. Returns: The [lefi.Guild][] instance passed in. \"\"\" if \"roles\" not in data : return guild roles = { int ( payload [ \"id\" ]): Role ( self , payload , guild ) for payload in data [ \"roles\" ] } guild . _roles = roles return guild","title":"create_guild_roles()"},{"location":"API-Reference/state/#lefi.state.State.create_guild_emojis","text":"Creates the emojis of a guild. Parameters: Name Type Description Default guild lefi.Guild The Guild which to create the emojis for. required data Dict The data of the emojis. required Returns: Type Description Guild The lefi.Guild instance passed in. Source code in lefi/state.py def create_guild_emojis ( self , guild : Guild , data : Dict ) -> Guild : \"\"\" Creates the emojis of a guild. Parameters: guild (lefi.Guild): The [Guild](./guild.md) which to create the emojis for. data (Dict): The data of the emojis. Returns: The [lefi.Guild][] instance passed in. \"\"\" if \"emojis\" not in data : return guild emojis = { int ( payload [ \"id\" ]): Emoji ( self , payload , guild ) for payload in data [ \"emojis\" ] } for id , emoji in emojis . items (): self . _emojis [ id ] = emoji guild . _emojis = emojis return guild","title":"create_guild_emojis()"},{"location":"API-Reference/state/#lefi.state.State.create_guild_voice_states","text":"Creates the voice states of a guild. Parameters: Name Type Description Default guild lefi.Guild The guild which to create the voice states for. required data Dict The data of the voice states. required Returns: Type Description Guild The lefi.Guild instance passed in. Source code in lefi/state.py def create_guild_voice_states ( self , guild : Guild , data : Dict ) -> Guild : \"\"\" Creates the voice states of a guild. Parameters: guild (lefi.Guild): The guild which to create the voice states for. data (Dict): The data of the voice states. Returns: The [lefi.Guild][] instance passed in. \"\"\" voice_states = { int ( payload [ \"user_id\" ]): VoiceState ( self , payload ) for payload in data [ \"voice_states\" ] } guild . _voice_states = voice_states return guild","title":"create_guild_voice_states()"},{"location":"API-Reference/state/#lefi.state.State.create_overwrites","text":"Creates the overwrites of a channel. Parameters: Name Type Description Default channel lefi.Channel The Channel which to create the overwrites for. required Source code in lefi/state.py def create_overwrites ( self , channel : Union [ TextChannel , DMChannel , VoiceChannel , CategoryChannel , Channel ], ) -> None : \"\"\" Creates the overwrites of a channel. Parameters: channel (lefi.Channel): The [Channel](./channel.md) which to create the overwrites for. \"\"\" if isinstance ( channel , DMChannel ): return if \"permission_overwrites\" not in channel . _data : return overwrites = [ Overwrite ( data ) for data in channel . _data [ \"permission_overwrites\" ] ] ows : Dict [ Union [ Member , Role ], Overwrite ] = {} for overwrite in overwrites : if overwrite . type is OverwriteType . MEMBER : target = channel . guild . get_member ( overwrite . id ) else : target = channel . guild . get_role ( overwrite . id ) # type: ignore ows [ target ] = overwrite # type: ignore channel . _overwrites = ows","title":"create_overwrites()"},{"location":"API-Reference/state/#lefi.state.State.add_voice_client","text":"Adds a voice client to the cache. Parameters: Name Type Description Default guild_id int The ID of the guild. required voice_client lefi.VoiceClient The voice client to add. required Source code in lefi/state.py def add_voice_client ( self , guild_id : int , voice_client : VoiceClient ) -> None : \"\"\" Adds a voice client to the cache. Parameters: guild_id (int): The ID of the guild. voice_client (lefi.VoiceClient): The voice client to add. \"\"\" self . _voice_clients [ guild_id ] = voice_client","title":"add_voice_client()"},{"location":"API-Reference/state/#lefi.state.State.get_voice_client","text":"Grabs a voice client from the cache. Parameters: Name Type Description Default guild_id int The ID of the guild. required Returns: Type Description Optional[VoiceClient] The lefi.VoiceClient instance corresponding to the ID if found. Source code in lefi/state.py def get_voice_client ( self , guild_id : int ) -> Optional [ VoiceClient ]: \"\"\" Grabs a voice client from the cache. Parameters: guild_id (int): The ID of the guild. Returns: The [lefi.VoiceClient][] instance corresponding to the ID if found. \"\"\" return self . _voice_clients . get ( guild_id )","title":"get_voice_client()"},{"location":"API-Reference/state/#lefi.state.State.remove_voice_client","text":"Removes a voice client from the cache. Parameters: Name Type Description Default guild_id int The ID of the guild. required Source code in lefi/state.py def remove_voice_client ( self , guild_id : int ) -> None : \"\"\" Removes a voice client from the cache. Parameters: guild_id (int): The ID of the guild. \"\"\" self . _voice_clients . pop ( guild_id , None )","title":"remove_voice_client()"},{"location":"API-Reference/template/","text":"Represents a guild template. code : str property readonly The template code. name : str property readonly The template name. description : str property readonly The template description. usage_count : int property readonly The number of times this template has been used. creator_id : int property readonly The ID of the user who created this template. creator : Optional [ User ] property readonly The user who created this template. created_at : datetime . datetime property readonly When this template was created. updated_at : datetime . datetime property readonly When this template was last updated. source_guild_id : int property readonly The ID of the guild this template was created from. source_guild : Optional [ Guild ] property readonly The Guild this template was created from. is_dirty : Optional [ bool ] property readonly Whether this template is dirty. __init__ ( self , state , data ) special Creates a GuildTemplate. Parameters: Name Type Description Default state State The State of the client. required data Dict[str, Any] The data of the guild template. required Source code in lefi/objects/template.py def __init__ ( self , state : State , data : Dict [ str , Any ]) -> None : \"\"\" Creates a GuildTemplate. Parameters: state (State): The [State](./state.md) of the client. data (Dict[str, Any]): The data of the guild template. \"\"\" self . _state = state self . _data = data create_guild ( self , name , * , icon = None ) async Creates a Guild from this template. Parameters: Name Type Description Default name str The name of the guild. required icon Optional[bytes] The icon of the guild. None Source code in lefi/objects/template.py async def create_guild ( self , name : str , * , icon : Optional [ bytes ] = None ) -> Guild : \"\"\" Creates a [Guild](./guild.md) from this template. Parameters: name: The name of the guild. icon: The icon of the guild. \"\"\" from .guild import Guild data = await self . _state . http . create_guild_from_template ( code = self . code , name = name , icon = icon ) return Guild ( state = self . _state , data = data )","title":"Template"},{"location":"API-Reference/template/#lefi.objects.template.GuildTemplate.code","text":"The template code.","title":"code"},{"location":"API-Reference/template/#lefi.objects.template.GuildTemplate.name","text":"The template name.","title":"name"},{"location":"API-Reference/template/#lefi.objects.template.GuildTemplate.description","text":"The template description.","title":"description"},{"location":"API-Reference/template/#lefi.objects.template.GuildTemplate.usage_count","text":"The number of times this template has been used.","title":"usage_count"},{"location":"API-Reference/template/#lefi.objects.template.GuildTemplate.creator_id","text":"The ID of the user who created this template.","title":"creator_id"},{"location":"API-Reference/template/#lefi.objects.template.GuildTemplate.creator","text":"The user who created this template.","title":"creator"},{"location":"API-Reference/template/#lefi.objects.template.GuildTemplate.created_at","text":"When this template was created.","title":"created_at"},{"location":"API-Reference/template/#lefi.objects.template.GuildTemplate.updated_at","text":"When this template was last updated.","title":"updated_at"},{"location":"API-Reference/template/#lefi.objects.template.GuildTemplate.source_guild_id","text":"The ID of the guild this template was created from.","title":"source_guild_id"},{"location":"API-Reference/template/#lefi.objects.template.GuildTemplate.source_guild","text":"The Guild this template was created from.","title":"source_guild"},{"location":"API-Reference/template/#lefi.objects.template.GuildTemplate.is_dirty","text":"Whether this template is dirty.","title":"is_dirty"},{"location":"API-Reference/template/#lefi.objects.template.GuildTemplate.__init__","text":"Creates a GuildTemplate. Parameters: Name Type Description Default state State The State of the client. required data Dict[str, Any] The data of the guild template. required Source code in lefi/objects/template.py def __init__ ( self , state : State , data : Dict [ str , Any ]) -> None : \"\"\" Creates a GuildTemplate. Parameters: state (State): The [State](./state.md) of the client. data (Dict[str, Any]): The data of the guild template. \"\"\" self . _state = state self . _data = data","title":"__init__()"},{"location":"API-Reference/template/#lefi.objects.template.GuildTemplate.create_guild","text":"Creates a Guild from this template. Parameters: Name Type Description Default name str The name of the guild. required icon Optional[bytes] The icon of the guild. None Source code in lefi/objects/template.py async def create_guild ( self , name : str , * , icon : Optional [ bytes ] = None ) -> Guild : \"\"\" Creates a [Guild](./guild.md) from this template. Parameters: name: The name of the guild. icon: The icon of the guild. \"\"\" from .guild import Guild data = await self . _state . http . create_guild_from_template ( code = self . code , name = name , icon = icon ) return Guild ( state = self . _state , data = data )","title":"create_guild()"},{"location":"API-Reference/user/","text":"Represents a user. username : str property readonly The username of the user. discriminator : int property readonly The discriminator of the user. id : int property readonly The ID of the user. bot : bool property readonly Whether or not the user is a bot. system : bool property readonly Whether or not the user is a discord system user.. mfa_enabled : bool property readonly Whether or not the user has 2fa enabled. accent_color : int property readonly The accent color of the user. locale : Optional [ str ] property readonly The locale of the user. verified : bool property readonly Whether the email on the users account is verified. email : Optional [ str ] property readonly The email of the user. flags : UserFlags property readonly The flags of the user. premium_type : PremiumType property readonly The premium type of the user. public_flags : UserFlags property readonly The users public flags. channel : Optional [ DMChannel ] property readonly The users DMChannel . __init__ ( self , state , data ) special Creates a User object. Parameters: Name Type Description Default state lefi.State The State of the client. required data dict The data of the user. required Source code in lefi/objects/user.py def __init__ ( self , state : State , data : Dict ) -> None : \"\"\" Creates a User object. Parameters: state (lefi.State): The [State](./state.md) of the client. data (dict): The data of the user. \"\"\" self . _state = state self . _data = data self . _channel : Optional [ DMChannel ] = None create_dm_channel ( self ) async Creates a DMChannel for the user if one isn't open already. Returns: Type Description DMChannel The lefi.DMChannel instance of the DMChannel. Source code in lefi/objects/user.py async def create_dm_channel ( self ) -> DMChannel : \"\"\" Creates a DMChannel for the user if one isn't open already. Returns: The [lefi.DMChannel](./channel.md#lefi.DMChannel) instance of the DMChannel. \"\"\" if self . _channel is not None : return self . _channel data = await self . _state . http . create_dm_channel ( self . id ) self . _channel = DMChannel ( self . _state , data ) return self . _channel send ( self , content ) async Sends a message to the user. Parameters: Name Type Description Default content str The content of the message. required Returns: Type Description Message The lefi.Message instance of the message sent. Source code in lefi/objects/user.py async def send ( self , content : str ) -> Message : \"\"\" Sends a message to the user. Parameters: content (str): The content of the message. Returns: The [lefi.Message](./message.md) instance of the message sent. \"\"\" if self . _channel is None : self . _channel = await self . create_dm_channel () return await self . _channel . send ( content )","title":"User"},{"location":"API-Reference/user/#lefi.objects.user.User.username","text":"The username of the user.","title":"username"},{"location":"API-Reference/user/#lefi.objects.user.User.discriminator","text":"The discriminator of the user.","title":"discriminator"},{"location":"API-Reference/user/#lefi.objects.user.User.id","text":"The ID of the user.","title":"id"},{"location":"API-Reference/user/#lefi.objects.user.User.bot","text":"Whether or not the user is a bot.","title":"bot"},{"location":"API-Reference/user/#lefi.objects.user.User.system","text":"Whether or not the user is a discord system user..","title":"system"},{"location":"API-Reference/user/#lefi.objects.user.User.mfa_enabled","text":"Whether or not the user has 2fa enabled.","title":"mfa_enabled"},{"location":"API-Reference/user/#lefi.objects.user.User.accent_color","text":"The accent color of the user.","title":"accent_color"},{"location":"API-Reference/user/#lefi.objects.user.User.locale","text":"The locale of the user.","title":"locale"},{"location":"API-Reference/user/#lefi.objects.user.User.verified","text":"Whether the email on the users account is verified.","title":"verified"},{"location":"API-Reference/user/#lefi.objects.user.User.email","text":"The email of the user.","title":"email"},{"location":"API-Reference/user/#lefi.objects.user.User.flags","text":"The flags of the user.","title":"flags"},{"location":"API-Reference/user/#lefi.objects.user.User.premium_type","text":"The premium type of the user.","title":"premium_type"},{"location":"API-Reference/user/#lefi.objects.user.User.public_flags","text":"The users public flags.","title":"public_flags"},{"location":"API-Reference/user/#lefi.objects.user.User.channel","text":"The users DMChannel .","title":"channel"},{"location":"API-Reference/user/#lefi.objects.user.User.__init__","text":"Creates a User object. Parameters: Name Type Description Default state lefi.State The State of the client. required data dict The data of the user. required Source code in lefi/objects/user.py def __init__ ( self , state : State , data : Dict ) -> None : \"\"\" Creates a User object. Parameters: state (lefi.State): The [State](./state.md) of the client. data (dict): The data of the user. \"\"\" self . _state = state self . _data = data self . _channel : Optional [ DMChannel ] = None","title":"__init__()"},{"location":"API-Reference/user/#lefi.objects.user.User.create_dm_channel","text":"Creates a DMChannel for the user if one isn't open already. Returns: Type Description DMChannel The lefi.DMChannel instance of the DMChannel. Source code in lefi/objects/user.py async def create_dm_channel ( self ) -> DMChannel : \"\"\" Creates a DMChannel for the user if one isn't open already. Returns: The [lefi.DMChannel](./channel.md#lefi.DMChannel) instance of the DMChannel. \"\"\" if self . _channel is not None : return self . _channel data = await self . _state . http . create_dm_channel ( self . id ) self . _channel = DMChannel ( self . _state , data ) return self . _channel","title":"create_dm_channel()"},{"location":"API-Reference/user/#lefi.objects.user.User.send","text":"Sends a message to the user. Parameters: Name Type Description Default content str The content of the message. required Returns: Type Description Message The lefi.Message instance of the message sent. Source code in lefi/objects/user.py async def send ( self , content : str ) -> Message : \"\"\" Sends a message to the user. Parameters: content (str): The content of the message. Returns: The [lefi.Message](./message.md) instance of the message sent. \"\"\" if self . _channel is None : self . _channel = await self . create_dm_channel () return await self . _channel . send ( content )","title":"send()"},{"location":"API-Reference/exts/commands/bot/","text":"A subclass of Client that adds Plugins, commands and some more functionality to it. Attributes: Name Type Description prefix str The prefix to use for commands. commands Dict[str, Command] The commands registered. plugins Dict[str, Plugin] The plugins registered. checks List[Callable[..., bool]] The checks registered. pub_key Optional[str] The client's public key. Used when handling interactions over HTTP. loop asyncio.AbstractEventLoop The event loop to use. http lefi.HTTPClient The HTTPClient to use for handling requests to the API. ws lefi.WebSocketClient The WebSocketClient which handles the gateway. __init__ ( self , prefix , token , * args , ** kwargs ) special Parameters: Name Type Description Default prefix str The prefix to use for commands. required token str The clients token, used for authorization (logging in, etc...) This is required. required intents Optional[lefi.Intents] The intents to be used for the client. required loop Optional[asyncio.AbstractEventLoop] The loop to use. required Source code in lefi/exts/commands/bot.py def __init__ ( self , prefix : Union [ str , Tuple [ str , ... ], List [ str ], Callable ], token : str , * args , ** kwargs , ) -> None : \"\"\" Parameters: prefix (str): The prefix to use for commands. token (str): The clients token, used for authorization (logging in, etc...) This is required. intents (Optional[lefi.Intents]): The intents to be used for the client. loop (Optional[asyncio.AbstractEventLoop]): The loop to use. \"\"\" super () . __init__ ( token , * args , ** kwargs ) self . add_listener ( self . parse_commands , \"message_create\" , False ) self . add_listener ( self . handle_command_error , \"command_error\" , False ) self . _check : Callable [ ... , bool ] = lambda _ : True self . checks : List [ Callable [ ... , bool ]] = [] self . commands : Dict [ str , Command ] = {} self . plugins : Dict [ str , Plugin ] = {} self . prefix = prefix command ( self , name = None , * , cls =< class ' lefi . exts . commands . core . command . Command '>) Decorator to register a command. Parameters: Name Type Description Default name Optional[str] The name of the command. None cls Optional[Type[CMD]] The class to use for the command. <class 'lefi.exts.commands.core.command.Command'> Returns: Type Description Callable[..., CMD] The decorated function after registering the command. Examples: @bot . command () async def ping ( ctx ): await ctx . send ( \"Pong!\" ) Source code in lefi/exts/commands/bot.py def command ( self , name : Optional [ str ] = None , * , cls : Type [ CMD ] = Command ) -> Callable [ ... , CMD ]: # type: ignore \"\"\" Decorator to register a command. Parameters: name (Optional[str]): The name of the command. cls (Optional[Type[CMD]]): The class to use for the command. Returns: The decorated function after registering the command. Example: ```py @bot.command() async def ping(ctx): await ctx.send(\"Pong!\") ``` \"\"\" def inner ( func : Callable [ ... , Coroutine ]) -> CMD : func . checks : List [ Callable [ ... , bool ]] = [] # type: ignore command = cls ( name or func . __name__ , func ) self . commands [ command . name ] = command return command return inner check ( self , func ) A method to register a check. Parameters: Name Type Description Default func Callable[..., bool] The function to register. required Returns: Type Description Callable[..., bool] The function passed. Source code in lefi/exts/commands/bot.py def check ( self , func : Callable [ ... , bool ]) -> Callable [ ... , bool ]: \"\"\" A method to register a check. Parameters: func (Callable[..., bool]): The function to register. Returns: The function passed. \"\"\" self . _check = func return func get_command ( self , name ) Get a command by name. Parameters: Name Type Description Default name str The name of the command. required Returns: Type Description Optional[Command] The Command if found, otherwise None. Source code in lefi/exts/commands/bot.py def get_command ( self , name : str ) -> Optional [ Command ]: \"\"\" Get a command by name. Parameters: name (str): The name of the command. Returns: The [Command](./core/command.md) if found, otherwise None. \"\"\" return self . commands . get ( name ) remove_command ( self , name ) Remove a command by name. Parameters: Name Type Description Default name str The name of the command. required Returns: Type Description Command The Command removed. Source code in lefi/exts/commands/bot.py def remove_command ( self , name : str ) -> Command : \"\"\" Remove a command by name. Parameters: name (str): The name of the command. Returns: The [Command](./core/command.md) removed. \"\"\" return self . commands . pop ( name ) add_plugin ( self , plugin ) Add a plugin to the bot. Parameters: Name Type Description Default plugin Type[Plugin] The Plugin to add. required Source code in lefi/exts/commands/bot.py def add_plugin ( self , plugin : Type [ Plugin ]) -> None : \"\"\" Add a plugin to the bot. Parameters: plugin (Type[Plugin]): The [Plugin](./core/plugin.md) to add. \"\"\" plugin_ = plugin ( self ) self . plugins [ plugin_ . name ] = plugin_ plugin_ . _attach_commands ( self ) remove_plugin ( self , name ) Remove a plugin by name. Parameters: Name Type Description Default name str The name of the plugin. required Returns: Type Description Optional[Plugin] The Plugin removed. Source code in lefi/exts/commands/bot.py def remove_plugin ( self , name : str ) -> Optional [ Plugin ]: \"\"\" Remove a plugin by name. Parameters: name (str): The name of the plugin. Returns: The [Plugin](./core/plugin.md) removed. \"\"\" return self . plugins . pop ( name ) get_plugin ( self , name ) Get a plugin by name. Parameters: Name Type Description Default name str The name of the plugin. required Returns: Type Description Optional[Plugin] The instance of Plugin if found, otherwise None. Source code in lefi/exts/commands/bot.py def get_plugin ( self , name : str ) -> Optional [ Plugin ]: \"\"\" Get a plugin by name. Parameters: name (str): The name of the plugin. Returns: The instance of [Plugin](./core/plugin.md) if found, otherwise None. \"\"\" return self . plugins . get ( name ) get_context ( self , message , * , cls =< class ' lefi . exts . commands . core . context . Context '>) async Get a context for a message. Parameters: Name Type Description Default message lefi.Message The Message to get the context for. required cls Optional[Type[CTX]] The class to use for the context. <class 'lefi.exts.commands.core.context.Context'> Returns: Type Description CTX An instance of Context . Source code in lefi/exts/commands/bot.py async def get_context ( self , message : lefi . Message , * , cls : Type [ CTX ] = Context ) -> CTX : # type: ignore \"\"\" Get a context for a message. Parameters: message (lefi.Message): The [Message](../message.md) to get the context for. cls (Optional[Type[CTX]]): The class to use for the context. Returns: An instance of [Context](./core/context.md). \"\"\" prefix = await self . get_prefix ( message ) parser = StringParser ( message . content , prefix ) ctx = cls ( message , parser , self ) if command_name := ctx . parser . find_command (): ctx . command = self . get_command ( command_name ) return ctx get_prefix ( self , message ) async Get the prefix for a message. Parameters: Name Type Description Default message lefi.Message The Message from which prefix needs to be extracted. required Returns: Type Description Union[str, Tuple[str, ...], List[str]] The prefix or a tuple of prefixes. Source code in lefi/exts/commands/bot.py async def get_prefix ( self , message : lefi . Message ) -> Union [ str , Tuple [ str , ... ], List [ str ]]: \"\"\" Get the prefix for a message. Parameters: message (lefi.Message): The [Message](../message.md) from which prefix needs to be extracted. Returns: The prefix or a tuple of prefixes. \"\"\" if callable ( self . prefix ) and inspect . iscoroutinefunction ( self . prefix ): return await self . prefix ( message ) elif callable ( self . prefix ): return self . prefix ( message ) return self . prefix parse_commands ( self , message ) async Parse a message for looking up commands. Parameters: Name Type Description Default message lefi.Message The Message to parse. required Source code in lefi/exts/commands/bot.py async def parse_commands ( self , message : lefi . Message ) -> None : \"\"\" Parse a message for looking up commands. Parameters: message (lefi.Message): The [Message](../message.md) to parse. \"\"\" ctx = await self . get_context ( message ) # type: ignore if ctx . valid and not ctx . author . bot : await self . execute ( ctx ) handle_command_error ( self , ctx , error ) async Handle a command error. Parameters: Name Type Description Default ctx Context The Context of the command. required error Any The error that occured. required Source code in lefi/exts/commands/bot.py async def handle_command_error ( self , ctx : Context , error : Any ) -> None : \"\"\" Handle a command error. Parameters: ctx (Context): The [Context](./core/context.md) of the command. error (Any): The error that occured. \"\"\" traceback . print_exception ( type ( error ), error , error . __traceback__ ) execute ( self , ctx ) async Execute a command. Parameters: Name Type Description Default ctx Context The Context of the command. required Returns: Type Description Any The result of the command. Source code in lefi/exts/commands/bot.py async def execute ( self , ctx : Context ) -> Any : \"\"\" Execute a command. Parameters: ctx (Context): The [Context](./core/context.md) of the command. Returns: The result of the command. \"\"\" with Handler ( ctx ) as handler : if handler . can_run and ctx . command : return await handler . invoke () elif not handler . can_run : self . _state . dispatch ( \"command_error\" , ctx , CheckFailed )","title":"Bot"},{"location":"API-Reference/exts/commands/bot/#lefi.exts.commands.bot.Bot.__init__","text":"Parameters: Name Type Description Default prefix str The prefix to use for commands. required token str The clients token, used for authorization (logging in, etc...) This is required. required intents Optional[lefi.Intents] The intents to be used for the client. required loop Optional[asyncio.AbstractEventLoop] The loop to use. required Source code in lefi/exts/commands/bot.py def __init__ ( self , prefix : Union [ str , Tuple [ str , ... ], List [ str ], Callable ], token : str , * args , ** kwargs , ) -> None : \"\"\" Parameters: prefix (str): The prefix to use for commands. token (str): The clients token, used for authorization (logging in, etc...) This is required. intents (Optional[lefi.Intents]): The intents to be used for the client. loop (Optional[asyncio.AbstractEventLoop]): The loop to use. \"\"\" super () . __init__ ( token , * args , ** kwargs ) self . add_listener ( self . parse_commands , \"message_create\" , False ) self . add_listener ( self . handle_command_error , \"command_error\" , False ) self . _check : Callable [ ... , bool ] = lambda _ : True self . checks : List [ Callable [ ... , bool ]] = [] self . commands : Dict [ str , Command ] = {} self . plugins : Dict [ str , Plugin ] = {} self . prefix = prefix","title":"__init__()"},{"location":"API-Reference/exts/commands/bot/#lefi.exts.commands.bot.Bot.command","text":"Decorator to register a command. Parameters: Name Type Description Default name Optional[str] The name of the command. None cls Optional[Type[CMD]] The class to use for the command. <class 'lefi.exts.commands.core.command.Command'> Returns: Type Description Callable[..., CMD] The decorated function after registering the command. Examples: @bot . command () async def ping ( ctx ): await ctx . send ( \"Pong!\" ) Source code in lefi/exts/commands/bot.py def command ( self , name : Optional [ str ] = None , * , cls : Type [ CMD ] = Command ) -> Callable [ ... , CMD ]: # type: ignore \"\"\" Decorator to register a command. Parameters: name (Optional[str]): The name of the command. cls (Optional[Type[CMD]]): The class to use for the command. Returns: The decorated function after registering the command. Example: ```py @bot.command() async def ping(ctx): await ctx.send(\"Pong!\") ``` \"\"\" def inner ( func : Callable [ ... , Coroutine ]) -> CMD : func . checks : List [ Callable [ ... , bool ]] = [] # type: ignore command = cls ( name or func . __name__ , func ) self . commands [ command . name ] = command return command return inner","title":"command()"},{"location":"API-Reference/exts/commands/bot/#lefi.exts.commands.bot.Bot.check","text":"A method to register a check. Parameters: Name Type Description Default func Callable[..., bool] The function to register. required Returns: Type Description Callable[..., bool] The function passed. Source code in lefi/exts/commands/bot.py def check ( self , func : Callable [ ... , bool ]) -> Callable [ ... , bool ]: \"\"\" A method to register a check. Parameters: func (Callable[..., bool]): The function to register. Returns: The function passed. \"\"\" self . _check = func return func","title":"check()"},{"location":"API-Reference/exts/commands/bot/#lefi.exts.commands.bot.Bot.get_command","text":"Get a command by name. Parameters: Name Type Description Default name str The name of the command. required Returns: Type Description Optional[Command] The Command if found, otherwise None. Source code in lefi/exts/commands/bot.py def get_command ( self , name : str ) -> Optional [ Command ]: \"\"\" Get a command by name. Parameters: name (str): The name of the command. Returns: The [Command](./core/command.md) if found, otherwise None. \"\"\" return self . commands . get ( name )","title":"get_command()"},{"location":"API-Reference/exts/commands/bot/#lefi.exts.commands.bot.Bot.remove_command","text":"Remove a command by name. Parameters: Name Type Description Default name str The name of the command. required Returns: Type Description Command The Command removed. Source code in lefi/exts/commands/bot.py def remove_command ( self , name : str ) -> Command : \"\"\" Remove a command by name. Parameters: name (str): The name of the command. Returns: The [Command](./core/command.md) removed. \"\"\" return self . commands . pop ( name )","title":"remove_command()"},{"location":"API-Reference/exts/commands/bot/#lefi.exts.commands.bot.Bot.add_plugin","text":"Add a plugin to the bot. Parameters: Name Type Description Default plugin Type[Plugin] The Plugin to add. required Source code in lefi/exts/commands/bot.py def add_plugin ( self , plugin : Type [ Plugin ]) -> None : \"\"\" Add a plugin to the bot. Parameters: plugin (Type[Plugin]): The [Plugin](./core/plugin.md) to add. \"\"\" plugin_ = plugin ( self ) self . plugins [ plugin_ . name ] = plugin_ plugin_ . _attach_commands ( self )","title":"add_plugin()"},{"location":"API-Reference/exts/commands/bot/#lefi.exts.commands.bot.Bot.remove_plugin","text":"Remove a plugin by name. Parameters: Name Type Description Default name str The name of the plugin. required Returns: Type Description Optional[Plugin] The Plugin removed. Source code in lefi/exts/commands/bot.py def remove_plugin ( self , name : str ) -> Optional [ Plugin ]: \"\"\" Remove a plugin by name. Parameters: name (str): The name of the plugin. Returns: The [Plugin](./core/plugin.md) removed. \"\"\" return self . plugins . pop ( name )","title":"remove_plugin()"},{"location":"API-Reference/exts/commands/bot/#lefi.exts.commands.bot.Bot.get_plugin","text":"Get a plugin by name. Parameters: Name Type Description Default name str The name of the plugin. required Returns: Type Description Optional[Plugin] The instance of Plugin if found, otherwise None. Source code in lefi/exts/commands/bot.py def get_plugin ( self , name : str ) -> Optional [ Plugin ]: \"\"\" Get a plugin by name. Parameters: name (str): The name of the plugin. Returns: The instance of [Plugin](./core/plugin.md) if found, otherwise None. \"\"\" return self . plugins . get ( name )","title":"get_plugin()"},{"location":"API-Reference/exts/commands/bot/#lefi.exts.commands.bot.Bot.get_context","text":"Get a context for a message. Parameters: Name Type Description Default message lefi.Message The Message to get the context for. required cls Optional[Type[CTX]] The class to use for the context. <class 'lefi.exts.commands.core.context.Context'> Returns: Type Description CTX An instance of Context . Source code in lefi/exts/commands/bot.py async def get_context ( self , message : lefi . Message , * , cls : Type [ CTX ] = Context ) -> CTX : # type: ignore \"\"\" Get a context for a message. Parameters: message (lefi.Message): The [Message](../message.md) to get the context for. cls (Optional[Type[CTX]]): The class to use for the context. Returns: An instance of [Context](./core/context.md). \"\"\" prefix = await self . get_prefix ( message ) parser = StringParser ( message . content , prefix ) ctx = cls ( message , parser , self ) if command_name := ctx . parser . find_command (): ctx . command = self . get_command ( command_name ) return ctx","title":"get_context()"},{"location":"API-Reference/exts/commands/bot/#lefi.exts.commands.bot.Bot.get_prefix","text":"Get the prefix for a message. Parameters: Name Type Description Default message lefi.Message The Message from which prefix needs to be extracted. required Returns: Type Description Union[str, Tuple[str, ...], List[str]] The prefix or a tuple of prefixes. Source code in lefi/exts/commands/bot.py async def get_prefix ( self , message : lefi . Message ) -> Union [ str , Tuple [ str , ... ], List [ str ]]: \"\"\" Get the prefix for a message. Parameters: message (lefi.Message): The [Message](../message.md) from which prefix needs to be extracted. Returns: The prefix or a tuple of prefixes. \"\"\" if callable ( self . prefix ) and inspect . iscoroutinefunction ( self . prefix ): return await self . prefix ( message ) elif callable ( self . prefix ): return self . prefix ( message ) return self . prefix","title":"get_prefix()"},{"location":"API-Reference/exts/commands/bot/#lefi.exts.commands.bot.Bot.parse_commands","text":"Parse a message for looking up commands. Parameters: Name Type Description Default message lefi.Message The Message to parse. required Source code in lefi/exts/commands/bot.py async def parse_commands ( self , message : lefi . Message ) -> None : \"\"\" Parse a message for looking up commands. Parameters: message (lefi.Message): The [Message](../message.md) to parse. \"\"\" ctx = await self . get_context ( message ) # type: ignore if ctx . valid and not ctx . author . bot : await self . execute ( ctx )","title":"parse_commands()"},{"location":"API-Reference/exts/commands/bot/#lefi.exts.commands.bot.Bot.handle_command_error","text":"Handle a command error. Parameters: Name Type Description Default ctx Context The Context of the command. required error Any The error that occured. required Source code in lefi/exts/commands/bot.py async def handle_command_error ( self , ctx : Context , error : Any ) -> None : \"\"\" Handle a command error. Parameters: ctx (Context): The [Context](./core/context.md) of the command. error (Any): The error that occured. \"\"\" traceback . print_exception ( type ( error ), error , error . __traceback__ )","title":"handle_command_error()"},{"location":"API-Reference/exts/commands/bot/#lefi.exts.commands.bot.Bot.execute","text":"Execute a command. Parameters: Name Type Description Default ctx Context The Context of the command. required Returns: Type Description Any The result of the command. Source code in lefi/exts/commands/bot.py async def execute ( self , ctx : Context ) -> Any : \"\"\" Execute a command. Parameters: ctx (Context): The [Context](./core/context.md) of the command. Returns: The result of the command. \"\"\" with Handler ( ctx ) as handler : if handler . can_run and ctx . command : return await handler . invoke () elif not handler . can_run : self . _state . dispatch ( \"command_error\" , ctx , CheckFailed )","title":"execute()"},{"location":"API-Reference/exts/commands/core/command/","text":"A class representing a Command. Attributes: Name Type Description checks List[Callable[..., bool]] A list of checks to be run before the command is executed. parent Optional[Plugin] The parent plugin of the command. cooldown Cooldown The cooldown of the command. callback Callable[..., Coroutine] The callback of the command. name str The name of the command. __init__ ( self , name , callback ) special Initialize a Command. Parameters: Name Type Description Default name str The name of the command. required callback Callable[..., Coroutine] The callback of the command. required Source code in lefi/exts/commands/core/command.py def __init__ ( self , name : str , callback : Callable [ ... , Coroutine ]) -> None : \"\"\" Initialize a Command. Parameters: name (str): The name of the command. callback (Callable[..., Coroutine]): The callback of the command. \"\"\" self . checks : List [ Callable [ ... , bool ]] = [] self . parent : Optional [ Plugin ] = None self . cooldown : Cooldown self . callback = callback self . name = name if hasattr ( self . callback , \"check\" ): self . checks . append ( self . callback . check ) # type: ignore elif hasattr ( self . callback , \"cooldown\" ): self . cooldown = self . callback . cooldown # type: ignore","title":"Command"},{"location":"API-Reference/exts/commands/core/command/#lefi.exts.commands.core.command.Command.__init__","text":"Initialize a Command. Parameters: Name Type Description Default name str The name of the command. required callback Callable[..., Coroutine] The callback of the command. required Source code in lefi/exts/commands/core/command.py def __init__ ( self , name : str , callback : Callable [ ... , Coroutine ]) -> None : \"\"\" Initialize a Command. Parameters: name (str): The name of the command. callback (Callable[..., Coroutine]): The callback of the command. \"\"\" self . checks : List [ Callable [ ... , bool ]] = [] self . parent : Optional [ Plugin ] = None self . cooldown : Cooldown self . callback = callback self . name = name if hasattr ( self . callback , \"check\" ): self . checks . append ( self . callback . check ) # type: ignore elif hasattr ( self . callback , \"cooldown\" ): self . cooldown = self . callback . cooldown # type: ignore","title":"__init__()"},{"location":"API-Reference/exts/commands/core/context/","text":"The Context of a command. Attributes: Name Type Description command Command The Command that was called. parser StringParser The Parser that was used to parse the command. bot Bot The Bot that is running the command. author : Union [ User , Member ] property readonly The author of the message. channel : Union [ Channel , DMChannel ] property readonly The Channel that the message was sent in. message : Message property readonly The Message that was sent. guild : Optional [ Guild ] property readonly The Guild that the message was sent in. valid : bool property readonly Whether or not the context is valid. __init__ ( self , message , parser , bot ) special Initialize the Context. Parameters: Name Type Description Default message Message The Message that was sent. required parser StringParser The Parser that was used to parse the command. required bot Bot The Bot that is running the command. required Source code in lefi/exts/commands/core/context.py def __init__ ( self , message : Message , parser : StringParser , bot : Bot ) -> None : \"\"\" Initialize the Context. Parameters: message (Message): The [Message](../../message.md) that was sent. parser (StringParser): The [Parser](./parser.md) that was used to parse the command. bot (Bot): The [Bot](../bot.md) that is running the command. \"\"\" self . command : Optional [ Command ] = None self . _message = message self . parser = parser self . bot = bot send ( self , * args , ** kwargs ) async Send a message to the channel. Parameters: Name Type Description Default args The arguments to pass when sending the message () kwargs The keyword arguments to pass to the message. {} Returns: Type Description Message The Message that was sent. Source code in lefi/exts/commands/core/context.py async def send ( self , * args , ** kwargs ) -> Message : \"\"\" Send a message to the channel. Parameters: args: The arguments to pass when sending the message kwargs: The keyword arguments to pass to the message. Returns: Message: The [Message](../../message.md) that was sent. \"\"\" return await self . _message . channel . send ( * args , ** kwargs )","title":"Context"},{"location":"API-Reference/exts/commands/core/context/#lefi.exts.commands.core.context.Context.author","text":"The author of the message.","title":"author"},{"location":"API-Reference/exts/commands/core/context/#lefi.exts.commands.core.context.Context.channel","text":"The Channel that the message was sent in.","title":"channel"},{"location":"API-Reference/exts/commands/core/context/#lefi.exts.commands.core.context.Context.message","text":"The Message that was sent.","title":"message"},{"location":"API-Reference/exts/commands/core/context/#lefi.exts.commands.core.context.Context.guild","text":"The Guild that the message was sent in.","title":"guild"},{"location":"API-Reference/exts/commands/core/context/#lefi.exts.commands.core.context.Context.valid","text":"Whether or not the context is valid.","title":"valid"},{"location":"API-Reference/exts/commands/core/context/#lefi.exts.commands.core.context.Context.__init__","text":"Initialize the Context. Parameters: Name Type Description Default message Message The Message that was sent. required parser StringParser The Parser that was used to parse the command. required bot Bot The Bot that is running the command. required Source code in lefi/exts/commands/core/context.py def __init__ ( self , message : Message , parser : StringParser , bot : Bot ) -> None : \"\"\" Initialize the Context. Parameters: message (Message): The [Message](../../message.md) that was sent. parser (StringParser): The [Parser](./parser.md) that was used to parse the command. bot (Bot): The [Bot](../bot.md) that is running the command. \"\"\" self . command : Optional [ Command ] = None self . _message = message self . parser = parser self . bot = bot","title":"__init__()"},{"location":"API-Reference/exts/commands/core/context/#lefi.exts.commands.core.context.Context.send","text":"Send a message to the channel. Parameters: Name Type Description Default args The arguments to pass when sending the message () kwargs The keyword arguments to pass to the message. {} Returns: Type Description Message The Message that was sent. Source code in lefi/exts/commands/core/context.py async def send ( self , * args , ** kwargs ) -> Message : \"\"\" Send a message to the channel. Parameters: args: The arguments to pass when sending the message kwargs: The keyword arguments to pass to the message. Returns: Message: The [Message](../../message.md) that was sent. \"\"\" return await self . _message . channel . send ( * args , ** kwargs )","title":"send()"},{"location":"API-Reference/exts/commands/core/cooldown/","text":"A class that represents a Cooldown. Attributes: Name Type Description amount int The amount of uses. time float The amount of time until the cooldown resets. type CooldownType The type of cooldown. members_cooldowns_cache Cache[Dict[int, CooldownData]] The cache for member cooldowns. cooldowns_cache Cache[CooldownData] The cache for cooldowns. __init__ ( self , amount , time , type ) special Creates a new Cooldown object. Parameters: Name Type Description Default amount int The amount of uses. required time float The amount of time until the cooldown resets. required type CooldownType The type of cooldown. required Source code in lefi/exts/commands/core/cooldowns.py def __init__ ( self , amount : int , time : float , type : CooldownType ) -> None : \"\"\" Creates a new Cooldown object. Parameters: amount (int): The amount of uses. time (float): The amount of time until the cooldown resets. type (CooldownType): The type of cooldown. \"\"\" self . members_cooldowns_cache = Cache [ Dict [ int , CooldownData ]]() self . cooldowns_cache = Cache [ CooldownData ]() self . amount = amount self . time = time self . type = type set_cooldown_time ( self , message ) Sets the cooldown time for the command. Parameters: Name Type Description Default message Message The Message that triggered the command. required Source code in lefi/exts/commands/core/cooldowns.py def set_cooldown_time ( self , message : Message ) -> None : \"\"\" Sets the cooldown time for the command. Parameters: message (Message): The [Message]() that triggered the command. \"\"\" cooldown_id = self . get_cooldown_id ( message ) if not isinstance ( cooldown_id , tuple ): self . cooldowns_cache [ cooldown_id ] = CooldownData ( datetime . timedelta ( seconds = self . time ), None , self . amount ) return guild_id , member_id = cooldown_id self . members_cooldowns_cache [ guild_id ] = { member_id : CooldownData ( datetime . timedelta ( seconds = self . time ), None , self . amount ) } get_cooldown_reset ( self , message ) Gets the cooldown reset for the command. Parameters: Name Type Description Default message Message The Message that triggered the command. required Returns: Type Description Optional[CooldownData] The CooldownData for the command. Source code in lefi/exts/commands/core/cooldowns.py def get_cooldown_reset ( self , message : Message ) -> Optional [ CooldownData ]: \"\"\" Gets the cooldown reset for the command. Parameters: message (Message): The [Message]() that triggered the command. Returns: The [CooldownData]() for the command. \"\"\" cooldown_id = self . get_cooldown_id ( message ) if not isinstance ( cooldown_id , tuple ): return self . cooldowns_cache . get ( cooldown_id ) guild_id , member_id = cooldown_id if guild := self . members_cooldowns_cache . get ( guild_id ): return guild . get ( member_id ) return None get_cooldown_id ( self , message ) Gets the cooldown id for the command. Parameters: Name Type Description Default message Message The Message that triggered the command. required Returns: Type Description Union[int, Tuple[int, int]] The cooldown id for the command. Source code in lefi/exts/commands/core/cooldowns.py def get_cooldown_id ( self , message : Message ) -> Union [ int , Tuple [ int , int ]]: \"\"\" Gets the cooldown id for the command. Parameters: message (Message): The [Message]() that triggered the command. Returns: The cooldown id for the command. \"\"\" cooldown_id = self . type . value . format ( message ) if self . type is CooldownType . member : return ast . literal_eval ( cooldown_id ) return int ( cooldown_id ) delete_cooldown ( self , message ) Deletes the cooldown for the command. Parameters: Name Type Description Default message Message The Message that triggered the command. required Source code in lefi/exts/commands/core/cooldowns.py def delete_cooldown ( self , message ) -> None : \"\"\" Deletes the cooldown for the command. Parameters: message (Message): The [Message](../../message.md) that triggered the command. \"\"\" cooldown_id = self . get_cooldown_id ( message ) if not isinstance ( cooldown_id , tuple ): del self . cooldowns_cache [ cooldown_id ] return guild_id , member_id = cooldown_id del self . members_cooldowns_cache [ guild_id ][ member_id ]","title":"Cooldown"},{"location":"API-Reference/exts/commands/core/cooldown/#lefi.exts.commands.core.cooldowns.Cooldown.__init__","text":"Creates a new Cooldown object. Parameters: Name Type Description Default amount int The amount of uses. required time float The amount of time until the cooldown resets. required type CooldownType The type of cooldown. required Source code in lefi/exts/commands/core/cooldowns.py def __init__ ( self , amount : int , time : float , type : CooldownType ) -> None : \"\"\" Creates a new Cooldown object. Parameters: amount (int): The amount of uses. time (float): The amount of time until the cooldown resets. type (CooldownType): The type of cooldown. \"\"\" self . members_cooldowns_cache = Cache [ Dict [ int , CooldownData ]]() self . cooldowns_cache = Cache [ CooldownData ]() self . amount = amount self . time = time self . type = type","title":"__init__()"},{"location":"API-Reference/exts/commands/core/cooldown/#lefi.exts.commands.core.cooldowns.Cooldown.set_cooldown_time","text":"Sets the cooldown time for the command. Parameters: Name Type Description Default message Message The Message that triggered the command. required Source code in lefi/exts/commands/core/cooldowns.py def set_cooldown_time ( self , message : Message ) -> None : \"\"\" Sets the cooldown time for the command. Parameters: message (Message): The [Message]() that triggered the command. \"\"\" cooldown_id = self . get_cooldown_id ( message ) if not isinstance ( cooldown_id , tuple ): self . cooldowns_cache [ cooldown_id ] = CooldownData ( datetime . timedelta ( seconds = self . time ), None , self . amount ) return guild_id , member_id = cooldown_id self . members_cooldowns_cache [ guild_id ] = { member_id : CooldownData ( datetime . timedelta ( seconds = self . time ), None , self . amount ) }","title":"set_cooldown_time()"},{"location":"API-Reference/exts/commands/core/cooldown/#lefi.exts.commands.core.cooldowns.Cooldown.get_cooldown_reset","text":"Gets the cooldown reset for the command. Parameters: Name Type Description Default message Message The Message that triggered the command. required Returns: Type Description Optional[CooldownData] The CooldownData for the command. Source code in lefi/exts/commands/core/cooldowns.py def get_cooldown_reset ( self , message : Message ) -> Optional [ CooldownData ]: \"\"\" Gets the cooldown reset for the command. Parameters: message (Message): The [Message]() that triggered the command. Returns: The [CooldownData]() for the command. \"\"\" cooldown_id = self . get_cooldown_id ( message ) if not isinstance ( cooldown_id , tuple ): return self . cooldowns_cache . get ( cooldown_id ) guild_id , member_id = cooldown_id if guild := self . members_cooldowns_cache . get ( guild_id ): return guild . get ( member_id ) return None","title":"get_cooldown_reset()"},{"location":"API-Reference/exts/commands/core/cooldown/#lefi.exts.commands.core.cooldowns.Cooldown.get_cooldown_id","text":"Gets the cooldown id for the command. Parameters: Name Type Description Default message Message The Message that triggered the command. required Returns: Type Description Union[int, Tuple[int, int]] The cooldown id for the command. Source code in lefi/exts/commands/core/cooldowns.py def get_cooldown_id ( self , message : Message ) -> Union [ int , Tuple [ int , int ]]: \"\"\" Gets the cooldown id for the command. Parameters: message (Message): The [Message]() that triggered the command. Returns: The cooldown id for the command. \"\"\" cooldown_id = self . type . value . format ( message ) if self . type is CooldownType . member : return ast . literal_eval ( cooldown_id ) return int ( cooldown_id )","title":"get_cooldown_id()"},{"location":"API-Reference/exts/commands/core/cooldown/#lefi.exts.commands.core.cooldowns.Cooldown.delete_cooldown","text":"Deletes the cooldown for the command. Parameters: Name Type Description Default message Message The Message that triggered the command. required Source code in lefi/exts/commands/core/cooldowns.py def delete_cooldown ( self , message ) -> None : \"\"\" Deletes the cooldown for the command. Parameters: message (Message): The [Message](../../message.md) that triggered the command. \"\"\" cooldown_id = self . get_cooldown_id ( message ) if not isinstance ( cooldown_id , tuple ): del self . cooldowns_cache [ cooldown_id ] return guild_id , member_id = cooldown_id del self . members_cooldowns_cache [ guild_id ][ member_id ]","title":"delete_cooldown()"},{"location":"API-Reference/exts/commands/core/handler/","text":"A class representing a Handler. __init__ ( self , ctx ) special Initialize a new Handler. Parameters: Name Type Description Default ctx Context The Context to handle. required Source code in lefi/exts/commands/core/handler.py def __init__ ( self , ctx : Context ) -> None : \"\"\" Initialize a new Handler. Parameters: ctx: The [Context](./context.md) to handle. \"\"\" self . context = ctx invoke ( self ) async Invoke the command. Returns: Type Description Any The return value of the command. Source code in lefi/exts/commands/core/handler.py async def invoke ( self ) -> Any : \"\"\" Invoke the command. Returns: The return value of the command. \"\"\" assert self . context . command is not None command : Command = self . context . command cooldown = getattr ( command , \"cooldown\" , None ) ctx = self . context parser = ctx . parser parser . command = command kwargs , args = await parser . parse_arguments () if all ( check ( ctx ) for check in command . checks ): async def run_command ( ctx : Context ) -> Any : if command . parent is not None : return await command ( command . parent , ctx , * args , ** kwargs ) return await command ( ctx , * args , ** kwargs ) if cooldown is not None : if cooldown . get_cooldown_reset ( ctx . message ) is None : cooldown . set_cooldown_time ( ctx . message ) if cooldown . _check_cooldown ( ctx . message ): cooldown . _update_cooldown ( ctx . message ) return await run_command ( ctx ) cooldown_data = cooldown . get_cooldown_reset ( ctx . message ) return ctx . bot . _state . dispatch ( \"command_error\" , ctx , CommandOnCooldown ( cooldown_data . retry_after ), # type: ignore ) return await run_command ( ctx ) return ctx . bot . _state . dispatch ( \"command_error\" , ctx , CheckFailed )","title":"Handler"},{"location":"API-Reference/exts/commands/core/handler/#lefi.exts.commands.core.handler.Handler.__init__","text":"Initialize a new Handler. Parameters: Name Type Description Default ctx Context The Context to handle. required Source code in lefi/exts/commands/core/handler.py def __init__ ( self , ctx : Context ) -> None : \"\"\" Initialize a new Handler. Parameters: ctx: The [Context](./context.md) to handle. \"\"\" self . context = ctx","title":"__init__()"},{"location":"API-Reference/exts/commands/core/handler/#lefi.exts.commands.core.handler.Handler.invoke","text":"Invoke the command. Returns: Type Description Any The return value of the command. Source code in lefi/exts/commands/core/handler.py async def invoke ( self ) -> Any : \"\"\" Invoke the command. Returns: The return value of the command. \"\"\" assert self . context . command is not None command : Command = self . context . command cooldown = getattr ( command , \"cooldown\" , None ) ctx = self . context parser = ctx . parser parser . command = command kwargs , args = await parser . parse_arguments () if all ( check ( ctx ) for check in command . checks ): async def run_command ( ctx : Context ) -> Any : if command . parent is not None : return await command ( command . parent , ctx , * args , ** kwargs ) return await command ( ctx , * args , ** kwargs ) if cooldown is not None : if cooldown . get_cooldown_reset ( ctx . message ) is None : cooldown . set_cooldown_time ( ctx . message ) if cooldown . _check_cooldown ( ctx . message ): cooldown . _update_cooldown ( ctx . message ) return await run_command ( ctx ) cooldown_data = cooldown . get_cooldown_reset ( ctx . message ) return ctx . bot . _state . dispatch ( \"command_error\" , ctx , CommandOnCooldown ( cooldown_data . retry_after ), # type: ignore ) return await run_command ( ctx ) return ctx . bot . _state . dispatch ( \"command_error\" , ctx , CheckFailed )","title":"invoke()"},{"location":"API-Reference/exts/commands/core/parser/","text":"A class representing a StringParser. Attributes: Name Type Description command_name Optional[str] The name of the command. command Optional[Command] The Command object. arguments List[str] The arguments of the command. content str The content of the command. prefix Union[Tuple[str], str] The prefix of the command. invoker : Optional [ Command ] property readonly Get the invoker. Returns: Type Description Optional[Command] The invoker Command . invoked_with : Optional [ str ] property readonly The prefix the command was invoked with. Returns: Type Description Optional[str] The prefix. __init__ ( self , content , prefix ) special Initialize a StringParser. Parameters: Name Type Description Default content str The content of the command. required prefix Union[Tuple[str], str] The prefix of the command. required Source code in lefi/exts/commands/core/parser.py def __init__ ( self , content : str , prefix : Union [ str , Tuple [ str , ... ], List [ str ]] ) -> None : \"\"\" Initialize a StringParser. Parameters: content (str): The content of the command. prefix (Union[Tuple[str], str]): The prefix of the command. \"\"\" self . command_name : Optional [ str ] = None self . command : Optional [ Command ] = None self . arguments : List [ str ] = [] self . content = content self . prefix = prefix find_command ( self ) Find the command. Returns: Type Description Optional[str] The command name. Source code in lefi/exts/commands/core/parser.py def find_command ( self ) -> Optional [ str ]: \"\"\" Find the command. Returns: The command name. \"\"\" tokens = self . content . split ( \" \" ) if prefix := self . parse_prefix (): if tokens [ 0 ] . startswith ( prefix ): self . command_name = tokens [ 0 ][ len ( prefix ) :] self . arguments = tokens [ 1 :] return self . command_name return None parse_prefix ( self ) Parse the prefix. Returns: Type Description Optional[str] The prefix. Source code in lefi/exts/commands/core/parser.py def parse_prefix ( self ) -> Optional [ str ]: \"\"\" Parse the prefix. Returns: The prefix. \"\"\" if isinstance ( self . prefix , ( tuple , list )): find_prefix = [ self . content . startswith ( prefix ) for prefix in self . prefix ] for index , prefix in enumerate ( find_prefix ): if prefix is not True : continue return self . prefix [ index ] elif not isinstance ( self . prefix , ( tuple , list )): return self . prefix return None parse_arguments ( self ) async Parse the arguments. Returns: Type Description Tuple[Dict, List] The arguments and the keyword-arguments. Source code in lefi/exts/commands/core/parser.py async def parse_arguments ( self ) -> Tuple [ Dict , List ]: \"\"\" Parse the arguments. Returns: The arguments and the keyword-arguments. \"\"\" keyword_arguments : Dict = {} arguments : List = [] if self . command is not None : signature = inspect . signature ( self . command . callback ) for index , ( argument , parameter ) in enumerate ( signature . parameters . items ()): if index == 0 : continue if index == 1 and self . command . parent is not None : continue if parameter . kind is parameter . POSITIONAL_OR_KEYWORD : arguments . append ( await self . convert ( parameter , self . arguments [ index - 1 ]) ) elif parameter . kind is parameter . KEYWORD_ONLY : keyword_arguments [ argument ] = await self . convert ( parameter , \" \" . join ( self . arguments [ index - 1 :]) ) return keyword_arguments , arguments","title":"Parser"},{"location":"API-Reference/exts/commands/core/parser/#lefi.exts.commands.core.parser.StringParser.invoker","text":"Get the invoker. Returns: Type Description Optional[Command] The invoker Command .","title":"invoker"},{"location":"API-Reference/exts/commands/core/parser/#lefi.exts.commands.core.parser.StringParser.invoked_with","text":"The prefix the command was invoked with. Returns: Type Description Optional[str] The prefix.","title":"invoked_with"},{"location":"API-Reference/exts/commands/core/parser/#lefi.exts.commands.core.parser.StringParser.__init__","text":"Initialize a StringParser. Parameters: Name Type Description Default content str The content of the command. required prefix Union[Tuple[str], str] The prefix of the command. required Source code in lefi/exts/commands/core/parser.py def __init__ ( self , content : str , prefix : Union [ str , Tuple [ str , ... ], List [ str ]] ) -> None : \"\"\" Initialize a StringParser. Parameters: content (str): The content of the command. prefix (Union[Tuple[str], str]): The prefix of the command. \"\"\" self . command_name : Optional [ str ] = None self . command : Optional [ Command ] = None self . arguments : List [ str ] = [] self . content = content self . prefix = prefix","title":"__init__()"},{"location":"API-Reference/exts/commands/core/parser/#lefi.exts.commands.core.parser.StringParser.find_command","text":"Find the command. Returns: Type Description Optional[str] The command name. Source code in lefi/exts/commands/core/parser.py def find_command ( self ) -> Optional [ str ]: \"\"\" Find the command. Returns: The command name. \"\"\" tokens = self . content . split ( \" \" ) if prefix := self . parse_prefix (): if tokens [ 0 ] . startswith ( prefix ): self . command_name = tokens [ 0 ][ len ( prefix ) :] self . arguments = tokens [ 1 :] return self . command_name return None","title":"find_command()"},{"location":"API-Reference/exts/commands/core/parser/#lefi.exts.commands.core.parser.StringParser.parse_prefix","text":"Parse the prefix. Returns: Type Description Optional[str] The prefix. Source code in lefi/exts/commands/core/parser.py def parse_prefix ( self ) -> Optional [ str ]: \"\"\" Parse the prefix. Returns: The prefix. \"\"\" if isinstance ( self . prefix , ( tuple , list )): find_prefix = [ self . content . startswith ( prefix ) for prefix in self . prefix ] for index , prefix in enumerate ( find_prefix ): if prefix is not True : continue return self . prefix [ index ] elif not isinstance ( self . prefix , ( tuple , list )): return self . prefix return None","title":"parse_prefix()"},{"location":"API-Reference/exts/commands/core/parser/#lefi.exts.commands.core.parser.StringParser.parse_arguments","text":"Parse the arguments. Returns: Type Description Tuple[Dict, List] The arguments and the keyword-arguments. Source code in lefi/exts/commands/core/parser.py async def parse_arguments ( self ) -> Tuple [ Dict , List ]: \"\"\" Parse the arguments. Returns: The arguments and the keyword-arguments. \"\"\" keyword_arguments : Dict = {} arguments : List = [] if self . command is not None : signature = inspect . signature ( self . command . callback ) for index , ( argument , parameter ) in enumerate ( signature . parameters . items ()): if index == 0 : continue if index == 1 and self . command . parent is not None : continue if parameter . kind is parameter . POSITIONAL_OR_KEYWORD : arguments . append ( await self . convert ( parameter , self . arguments [ index - 1 ]) ) elif parameter . kind is parameter . KEYWORD_ONLY : keyword_arguments [ argument ] = await self . convert ( parameter , \" \" . join ( self . arguments [ index - 1 :]) ) return keyword_arguments , arguments","title":"parse_arguments()"},{"location":"API-Reference/exts/commands/core/plugin/","text":"","title":"Plugin"}]}